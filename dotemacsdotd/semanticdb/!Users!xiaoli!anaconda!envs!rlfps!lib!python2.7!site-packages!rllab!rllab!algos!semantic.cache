;; Object algos/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "algos/"
  :tables
  (list
    (semanticdb-table "batch_polopt.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("rllab.algos.base" include nil nil [20 60])
            ("rllab.sampler" include nil nil [61 103])
            ("rllab.sampler.base" include nil nil [104 142])
            ("rllab.misc" include nil nil [143 173])
            ("rllab.misc" include nil nil [174 209])
            ("rllab.algos" include nil nil [210 238])
            ("rllab.misc.logger" include nil nil [239 273])
            ("rllab.plotter" include nil nil [274 305])
            ("rllab.policies.base" include nil nil [306 344])
            ("BatchSampler" type
               (:superclasses ("Sampler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :type algo: BatchPolopt
        \"\"\"" code nil (reparse-symbol indented_block_body) [414 461])
                            ("self" variable nil (reparse-symbol indented_block_body) [470 486]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [393 397])
                            ("algo" variable nil (reparse-symbol function_parameters) [399 403]))                          
                        :documentation "
        :type algo: BatchPolopt
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [380 487])
                    ("start_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [509 513]))                          )
                        (reparse-symbol indented_block_body) [492 611])
                    ("shutdown_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [636 640]))                          )
                        (reparse-symbol indented_block_body) [616 706])
                    ("obtain_samples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [730 734])
                            ("itr" variable nil (reparse-symbol function_parameters) [736 739]))                          )
                        (reparse-symbol indented_block_body) [711 1229])
                    ("process_samples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1254 1258])
                            ("itr" variable nil (reparse-symbol function_parameters) [1260 1263])
                            ("paths" variable nil (reparse-symbol function_parameters) [1265 1270]))                          )
                        (reparse-symbol indented_block_body) [1234 6681]))                  
                :type "class")
                nil [347 6681])
            ("BatchPolopt" type
               (:documentation "
    Base class for batch sampling-based policy optimization methods.
    This includes various policy gradient methods like vpg, npg, ppo, trpo, etc.
    "
                :superclasses ("RLAlgorithm")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :param env: Environment
        :param policy: Policy
        :type policy: Policy
        :param baseline: Baseline
        :param scope: Scope for identifying the algorithm. Must be specified if running multiple algorithms
        simultaneously, each using different environments and policies
        :param n_itr: Number of iterations.
        :param start_itr: Starting iteration.
        :param batch_size: Number of samples per iteration.
        :param max_path_length: Maximum length of a single rollout.
        :param discount: Discount.
        :param gae_lambda: Lambda used for generalized advantage estimation.
        :param plot: Plot evaluation run after each iteration.
        :param pause_for_plot: Whether to pause before contiuing when plotting.
        :param center_adv: Whether to rescale the advantages so that they have mean 0 and standard deviation 1.
        :param positive_adv: Whether to shift the advantages so that they are always positive. When used in
        conjunction with center_adv the advantages will be standardized before shifting.
        :param store_paths: Whether to save all paths data to the snapshot.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7441 8618])
                            ("self" variable nil (reparse-symbol indented_block_body) [8627 8641])
                            ("self" variable nil (reparse-symbol indented_block_body) [8650 8670])
                            ("self" variable nil (reparse-symbol indented_block_body) [8679 8703])
                            ("self" variable nil (reparse-symbol indented_block_body) [8712 8730])
                            ("self" variable nil (reparse-symbol indented_block_body) [8739 8757])
                            ("self" variable nil (reparse-symbol indented_block_body) [8766 8794])
                            ("self" variable nil (reparse-symbol indented_block_body) [8803 8831])
                            ("self" variable nil (reparse-symbol indented_block_body) [8840 8878])
                            ("self" variable nil (reparse-symbol indented_block_body) [8887 8911])
                            ("self" variable nil (reparse-symbol indented_block_body) [8920 8948])
                            ("self" variable nil (reparse-symbol indented_block_body) [8957 8973])
                            ("self" variable nil (reparse-symbol indented_block_body) [8982 9018])
                            ("self" variable nil (reparse-symbol indented_block_body) [9027 9055])
                            ("self" variable nil (reparse-symbol indented_block_body) [9064 9096])
                            ("self" variable nil (reparse-symbol indented_block_body) [9105 9135])
                            ("self" variable nil (reparse-symbol indented_block_body) [9144 9174])
                            ("if" code nil (reparse-symbol indented_block_body) [9183 9246])
                            ("if" code nil (reparse-symbol indented_block_body) [9254 9313])
                            ("self" variable nil (reparse-symbol indented_block_body) [9321 9369]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6912 6916])
                            ("env" variable nil (reparse-symbol function_parameters) [6930 6933])
                            ("policy" variable nil (reparse-symbol function_parameters) [6947 6953])
                            ("baseline" variable nil (reparse-symbol function_parameters) [6967 6975])
                            ("scope" variable nil (reparse-symbol function_parameters) [6989 6994])
                            ("n_itr" variable nil (reparse-symbol function_parameters) [7013 7018])
                            ("start_itr" variable nil (reparse-symbol function_parameters) [7036 7045])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [7061 7071])
                            ("max_path_length" variable nil (reparse-symbol function_parameters) [7090 7105])
                            ("discount" variable nil (reparse-symbol function_parameters) [7123 7131])
                            ("gae_lambda" variable nil (reparse-symbol function_parameters) [7150 7160])
                            ("plot" variable nil (reparse-symbol function_parameters) [7176 7180])
                            ("pause_for_plot" variable nil (reparse-symbol function_parameters) [7200 7214])
                            ("center_adv" variable nil (reparse-symbol function_parameters) [7234 7244])
                            ("positive_adv" variable nil (reparse-symbol function_parameters) [7263 7275])
                            ("store_paths" variable nil (reparse-symbol function_parameters) [7295 7306])
                            ("whole_paths" variable nil (reparse-symbol function_parameters) [7326 7337])
                            ("sampler_cls" variable nil (reparse-symbol function_parameters) [7356 7367])
                            ("sampler_args" variable nil (reparse-symbol function_parameters) [7386 7398])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7417 7425]))                          
                        :documentation "
        :param env: Environment
        :param policy: Policy
        :type policy: Policy
        :param baseline: Baseline
        :param scope: Scope for identifying the algorithm. Must be specified if running multiple algorithms
        simultaneously, each using different environments and policies
        :param n_itr: Number of iterations.
        :param start_itr: Starting iteration.
        :param batch_size: Number of samples per iteration.
        :param max_path_length: Maximum length of a single rollout.
        :param discount: Discount.
        :param gae_lambda: Lambda used for generalized advantage estimation.
        :param plot: Plot evaluation run after each iteration.
        :param pause_for_plot: Whether to pause before contiuing when plotting.
        :param center_adv: Whether to rescale the advantages so that they have mean 0 and standard deviation 1.
        :param positive_adv: Whether to shift the advantages so that they are always positive. When used in
        conjunction with center_adv the advantages will be standardized before shifting.
        :param store_paths: Whether to save all paths data to the snapshot.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6886 9370])
                    ("start_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9392 9396]))                          )
                        (reparse-symbol indented_block_body) [9375 9510])
                    ("shutdown_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9535 9539]))                          )
                        (reparse-symbol indented_block_body) [9515 9581])
                    ("train" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9596 9600]))                          )
                        (reparse-symbol indented_block_body) [9586 10700])
                    ("log_diagnostics" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10725 10729])
                            ("paths" variable nil (reparse-symbol function_parameters) [10731 10736]))                          )
                        (reparse-symbol indented_block_body) [10705 10867])
                    ("init_opt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10885 10889]))                          
                        :documentation "
        Initialize the optimization procedure. If using theano / cgt, this may
        include declaring all the variables and compiling functions
        ")
                        (reparse-symbol indented_block_body) [10872 11097])
                    ("get_itr_snapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11123 11127])
                            ("itr" variable nil (reparse-symbol function_parameters) [11129 11132])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [11134 11146]))                          
                        :documentation "
        Returns all the data that should be saved in the snapshot for this
        iteration.
        ")
                        (reparse-symbol indented_block_body) [11102 11301])
                    ("optimize_policy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11326 11330])
                            ("itr" variable nil (reparse-symbol function_parameters) [11332 11335])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [11337 11349]))                          )
                        (reparse-symbol indented_block_body) [11306 11386])
                    ("update_plot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11407 11411]))                          )
                        (reparse-symbol indented_block_body) [11391 11503]))                  
                :type "class")
                nil [6683 11503]))          
      :file "batch_polopt.py"
      :pointmax 11503
      :fsize 11502
      :lastmodtime '(22512 25984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "base.py"
      :file "base.py"
      :fsize 122
      :lastmodtime '(22512 25984 0 0)))
  :file "!Users!xiaoli!anaconda!envs!rlfps!lib!python2.7!site-packages!rllab!rllab!algos!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
