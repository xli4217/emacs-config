;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("pyrep.robots.end_effectors.gripper" include nil nil [1 55])
            ("PandaGripper" type
               (:superclasses ("Gripper")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [136 251]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105 109])
                            ("int" variable nil (reparse-symbol function_parameters) [118 121]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92 252]))                  
                :type "class")
                nil [58 252]))          
      :file "panda_gripper.py"
      :pointmax 252
      :fsize 251
      :lastmodtime '(24574 23022 298885 175000)
      :unmatched-syntax '((NAME 111 . 116) (COLON 116 . 117)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("typing" include nil nil [1 31])
            ("pyrep.objects.object" include nil nil [32 71])
            ("pyrep.objects.proximity_sensor" include nil nil [72 130])
            ("pyrep.objects.force_sensor" include nil nil [131 181])
            ("pyrep.robots.robot_component" include nil nil [182 237])
            ("numpy" include nil nil [238 256])
            ("POSITION_ERROR" variable nil nil [258 280])
            ("Gripper" type
               (:documentation "Represents all types of end-effectors, e.g. grippers.
    "
                :superclasses ("RobotComponent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [463 505])
                            ("prox_name" code nil (reparse-symbol indented_block_body) [573 625])
                            ("attach_name" code nil (reparse-symbol indented_block_body) [634 683])
                            ("self" variable nil (reparse-symbol indented_block_body) [692 743])
                            ("self" variable nil (reparse-symbol indented_block_body) [752 797])
                            ("List" variable nil (reparse-symbol indented_block_body) [825 842])
                            ("List" variable nil (reparse-symbol indented_block_body) [874 891])
                            ("self" code nil (reparse-symbol indented_block_body) [900 948])
                            ("self" code nil (reparse-symbol indented_block_body) [957 1000])
                            ("self" variable nil (reparse-symbol indented_block_body) [1038 1062])
                            ("i" variable nil (reparse-symbol indented_block_body) [1071 1076])
                            ("while" code nil (reparse-symbol indented_block_body) [1085 1304]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [401 405])
                            ("int" variable nil (reparse-symbol function_parameters) [414 417])
                            ("str" variable nil (reparse-symbol function_parameters) [425 428]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [388 1304]))                  
                :type "class")
                nil [283 6211]))          
      :file "gripper.py"
      :pointmax 6211
      :fsize 6210
      :lastmodtime '(24593 6927 70925 239000)
      :unmatched-syntax nil))
  :file "!home!xli4217!Dropbox!docker!docker_home!lof_robot_learning!libs!PyRep!pyrep!robots!end_effectors!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
