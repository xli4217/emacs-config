;; Object sampler/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "sampler/"
  :tables
  (list
    (semanticdb-table "batch_sampler.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("os" include nil nil [20 29])
            ("cloudpickle" include nil nil [30 48])
            ("future.utils" include nil nil [49 83])
            ("BatchSampler" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [374 388])
                            ("self" variable nil (reparse-symbol indented_block_body) [510 530])
                            ("self" variable nil (reparse-symbol indented_block_body) [539 598])
                            ("self" variable nil (reparse-symbol indented_block_body) [607 674])
                            ("self" variable nil (reparse-symbol indented_block_body) [683 744])
                            ("self" variable nil (reparse-symbol indented_block_body) [753 773])
                            ("self" variable nil (reparse-symbol indented_block_body) [782 860])
                            ("self" variable nil (reparse-symbol indented_block_body) [869 943])
                            ("self" variable nil (reparse-symbol indented_block_body) [961 1005])
                            ("self" variable nil (reparse-symbol indented_block_body) [1014 1060])
                            ("self" variable nil (reparse-symbol indented_block_body) [1070 1094])
                            ("self" variable nil (reparse-symbol indented_block_body) [1144 1166])
                            ("self" variable nil (reparse-symbol indented_block_body) [1216 1233]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131 135])
                            ("env" variable nil (reparse-symbol function_parameters) [154 157])
                            ("policy" variable nil (reparse-symbol function_parameters) [176 182])
                            ("sampler_hyperparams" variable nil (reparse-symbol function_parameters) [201 220])
                            ("state_preprocessor" variable nil (reparse-symbol function_parameters) [239 257])
                            ("reward_preprocessor" variable nil (reparse-symbol function_parameters) [281 300])
                            ("logger" variable nil (reparse-symbol function_parameters) [324 330])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [354 362]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [118 1234])
                    ("init_sampler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1264 1268]))                          )
                        (reparse-symbol indented_block_body) [1247 1563])
                    ("run_episode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1592 1596])
                            ("episode_horizon" variable nil (reparse-symbol function_parameters) [1598 1613])
                            ("deterministic" variable nil (reparse-symbol function_parameters) [1615 1628]))                          
                        :documentation " Run single episode with option to animate
        Args:
        
        Returns: two dictionaries with keys \"Observations\", \"Actions\", \"Rewards\"
        Observations: shape = (episode len, obs_dim)
        Actions: shape = (episode len, act_dim)
        Rewards: shape = (episode len,)

        The first dictionary is original trajectory
        The second is normalized trajectory (same as the first if no state or reward preprocessor specified)
        ")
                        (reparse-symbol indented_block_body) [1576 4826])
                    ("update_preprocessors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4856 4860])
                            ("traj" variable nil (reparse-symbol function_parameters) [4862 4866]))                          )
                        (reparse-symbol indented_block_body) [4831 5100])
                    ("save_preprocessors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5141 5145]))                          )
                        (reparse-symbol indented_block_body) [5118 5548])
                    ("get_batch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5583 5587])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [5589 5599])
                            ("episode_horizon" variable nil (reparse-symbol function_parameters) [5606 5621])
                            ("deterministic" variable nil (reparse-symbol function_parameters) [5628 5641]))                          )
                        (reparse-symbol indented_block_body) [5569 6646])
                    ("save_batch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6667 6671])
                            ("batch" variable nil (reparse-symbol function_parameters) [6673 6678])
                            ("path" variable nil (reparse-symbol function_parameters) [6680 6684]))                          )
                        (reparse-symbol indented_block_body) [6652 6881]))                  
                :type "class")
                nil [85 6881])
            ("if" code nil nil [6894 8500]))          
      :file "batch_sampler.py"
      :pointmax 8500
      :fsize 8499
      :lastmodtime '(23286 16461 0 0)
      :unmatched-syntax nil))
  :file "!Users!xiaoli!Dropbox!docker!docker_home!rlfps!rl_pipeline!sampler!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
