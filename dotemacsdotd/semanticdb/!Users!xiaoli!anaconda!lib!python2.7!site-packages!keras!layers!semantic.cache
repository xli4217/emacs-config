;; Object layers/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "layers/"
  :tables
  (list
    (semanticdb-table "core.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [25 63])
            ("__future__" include nil nil [64 95])
            ("numpy" include nil nil [97 115])
            ("copy" include nil nil [117 128])
            ("inspect" include nil nil [129 143])
            ("types" include nil nil [144 172])
            ("marshal" include nil nil [173 187])
            ("sys" include nil nil [188 198])
            ("warnings" include nil nil [199 214])
            ("backend" include nil nil [224 243])
            ("constraints" include nil nil [252 314])
            ("regularizers" include nil nil [252 314])
            ("initializations" include nil nil [252 314])
            ("activations" include nil nil [252 314])
            ("Merge" include nil nil [329 359])
            ("Layer" include nil nil [329 359])
            ("InputSpec" include nil nil [329 359])
            ("ActivityRegularizer" include nil nil [380 406])
            ("Masking" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Masks an input sequence by using a mask value to
    identify timesteps to be skipped.

    For each timestep in the input tensor (dimension #1 in the tensor),
    if all values in the input tensor at that timestep
    are equal to `mask_value`, then the timestep will masked (skipped)
    in all downstream layers (as long as they support masking).

    If any downstream layer does not support masking yet receives such
    an input mask, an exception will be raised.

    # Example

    Consider a Numpy data array `x` of shape `(samples, timesteps, features)`,
    to be fed to a LSTM layer.
    You want to mask timestep #3 and #5 because you lack data for
    these timesteps. You can:

        - set `x[:, 3, :] = 0.` and `x[:, 5, :] = 0.`
        - insert a `Masking` layer with `mask_value=0.` before the LSTM layer:

    ```python
        model = Sequential()
        model.add(Masking(mask_value=0., input_shape=(timesteps, features)))
        model.add(LSTM(32))
    ```
    '''" code nil (reparse-symbol indented_block_body) [435 1428])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1487 1515])
                            ("self" variable nil (reparse-symbol indented_block_body) [1524 1552])
                            ("super" code nil (reparse-symbol indented_block_body) [1561 1600]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1446 1450])
                            ("mask_value" variable nil (reparse-symbol function_parameters) [1452 1462])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1467 1475]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1433 1600])
                    ("compute_mask" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1622 1626])
                            ("input" variable nil (reparse-symbol function_parameters) [1628 1633])
                            ("input_mask" variable nil (reparse-symbol function_parameters) [1635 1645]))                          )
                        (reparse-symbol indented_block_body) [1605 1720])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1734 1738])
                            ("x" variable nil (reparse-symbol function_parameters) [1740 1741])
                            ("mask" variable nil (reparse-symbol function_parameters) [1743 1747]))                          )
                        (reparse-symbol indented_block_body) [1725 1922])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1942 1946]))                          )
                        (reparse-symbol indented_block_body) [1927 2124]))                  
                :type "class")
                nil [409 2124])
            ("Dropout" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Applies Dropout to the input. Dropout consists in randomly setting
    a fraction `p` of input units to 0 at each update during training time,
    which helps prevent overfitting.

    # Arguments
        p: float between 0 and 1. Fraction of the input units to drop.

    # References
        - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)
    '''" code nil (reparse-symbol indented_block_body) [2152 2588])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2635 2663])
                            ("self" variable nil (reparse-symbol indented_block_body) [2672 2703])
                            ("self" variable nil (reparse-symbol indented_block_body) [2712 2722])
                            ("super" code nil (reparse-symbol indented_block_body) [2731 2770]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2606 2610])
                            ("p" variable nil (reparse-symbol function_parameters) [2612 2613])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2615 2623]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2593 2770])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2784 2788])
                            ("x" variable nil (reparse-symbol function_parameters) [2790 2791])
                            ("mask" variable nil (reparse-symbol function_parameters) [2793 2797]))                          )
                        (reparse-symbol indented_block_body) [2775 2915])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2935 2939]))                          )
                        (reparse-symbol indented_block_body) [2920 3099]))                  
                :type "class")
                nil [2126 3099])
            ("Activation" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Applies an activation function to an output.

    # Arguments
        activation: name of activation function to use
            (see: [activations](../activations.md)),
            or alternatively, a Theano or TensorFlow operation.

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same shape as input.
    '''" code nil (reparse-symbol indented_block_body) [3130 3624])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3680 3708])
                            ("self" variable nil (reparse-symbol indented_block_body) [3717 3762])
                            ("super" code nil (reparse-symbol indented_block_body) [3771 3813]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3642 3646])
                            ("activation" variable nil (reparse-symbol function_parameters) [3648 3658])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3660 3668]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3629 3813])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3827 3831])
                            ("x" variable nil (reparse-symbol function_parameters) [3833 3834])
                            ("mask" variable nil (reparse-symbol function_parameters) [3836 3840]))                          )
                        (reparse-symbol indented_block_body) [3818 3882])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3902 3906]))                          )
                        (reparse-symbol indented_block_body) [3887 4096]))                  
                :type "class")
                nil [3101 4096])
            ("Reshape" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Reshapes an output to a certain shape.

    # Arguments
        target_shape: target shape. Tuple of integers,
            does not include the samples dimension (batch size).

    # Input shape
        Arbitrary, although all dimensions in the input shaped must be fixed.
        Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        `(batch_size,) + target_shape`

    # Example

    ```python
        # as first layer in a Sequential model
        model = Sequential()
        model.add(Reshape((3, 4), input_shape=(12,)))
        # now: model.output_shape == (None, 3, 4)
        # note: `None` is the batch dimension

        # as intermediate layer in a Sequential model
        model.add(Reshape((6, 2)))
        # now: model.output_shape == (None, 6, 2)
    ```
    '''" code nil (reparse-symbol indented_block_body) [4124 5041])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [5099 5138])
                            ("self" variable nil (reparse-symbol indented_block_body) [5147 5186]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5059 5063])
                            ("target_shape" variable nil (reparse-symbol function_parameters) [5065 5077])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5079 5087]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5046 5186])
                    ("_fix_unknown_dimension" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5218 5222])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [5224 5235])
                            ("output_shape" variable nil (reparse-symbol function_parameters) [5237 5249]))                          )
                        (reparse-symbol indented_block_body) [5191 6796])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6826 6830])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [6832 6843]))                          )
                        (reparse-symbol indented_block_body) [6801 6945])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6959 6963])
                            ("x" variable nil (reparse-symbol function_parameters) [6965 6966])
                            ("mask" variable nil (reparse-symbol function_parameters) [6968 6972]))                          )
                        (reparse-symbol indented_block_body) [6950 7655])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7675 7679]))                          )
                        (reparse-symbol indented_block_body) [7660 7861]))                  
                :type "class")
                nil [4098 7861])
            ("Permute" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Permutes the dimensions of the input according to a given pattern.

    Useful for e.g. connecting RNNs and convnets together.

    # Example

    ```python
        model = Sequential()
        model.add(Permute((2, 1), input_shape=(10, 64)))
        # now: model.output_shape == (None, 64, 10)
        # note: `None` is the batch dimension
    ```

    # Arguments
        dims: Tuple of integers. Permutation pattern, does not include the
            samples dimension. Indexing starts at 1.
            For instance, `(2, 1)` permutes the first and second dimension
            of the input.

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same as the input shape, but with the dimensions re-ordered according
        to the specified pattern.
    '''" code nil (reparse-symbol indented_block_body) [7889 8827])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8877 8900])
                            ("super" code nil (reparse-symbol indented_block_body) [8909 8948]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8845 8849])
                            ("dims" variable nil (reparse-symbol function_parameters) [8851 8855])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8857 8865]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8832 8948])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8978 8982])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [8984 8995]))                          )
                        (reparse-symbol indented_block_body) [8953 9248])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9262 9266])
                            ("x" variable nil (reparse-symbol function_parameters) [9268 9269])
                            ("mask" variable nil (reparse-symbol function_parameters) [9271 9275]))                          )
                        (reparse-symbol indented_block_body) [9253 9340])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9360 9364]))                          )
                        (reparse-symbol indented_block_body) [9345 9530]))                  
                :type "class")
                nil [7863 9530])
            ("Flatten" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Flattens the input. Does not affect the batch size.

    # Example

    ```python
        model = Sequential()
        model.add(Convolution2D(64, 3, 3, border_mode='same', input_shape=(3, 32, 32)))
        # now: model.output_shape == (None, 64, 32, 32)

        model.add(Flatten())
        # now: model.output_shape == (None, 65536)
    ```
    '''" code nil (reparse-symbol indented_block_body) [9558 9912])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9956 9996])
                            ("super" code nil (reparse-symbol indented_block_body) [10005 10044]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9930 9934])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9936 9944]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9917 10044])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10074 10078])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [10080 10091]))                          )
                        (reparse-symbol indented_block_body) [10049 10576])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10590 10594])
                            ("x" variable nil (reparse-symbol function_parameters) [10596 10597])
                            ("mask" variable nil (reparse-symbol function_parameters) [10599 10603]))                          )
                        (reparse-symbol indented_block_body) [10581 10645]))                  
                :type "class")
                nil [9532 10645])
            ("RepeatVector" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Repeats the input n times.

    # Example

    ```python
        model = Sequential()
        model.add(Dense(32, input_dim=32))
        # now: model.output_shape == (None, 32)
        # note: `None` is the batch dimension

        model.add(RepeatVector(3))
        # now: model.output_shape == (None, 3, 32)
    ```

    # Arguments
        n: integer, repetition factor.

    # Input shape
        2D tensor of shape `(nb_samples, features)`.

    # Output shape
        3D tensor of shape `(nb_samples, n, features)`.
    '''" code nil (reparse-symbol indented_block_body) [10678 11210])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11257 11267])
                            ("self" variable nil (reparse-symbol indented_block_body) [11276 11313])
                            ("super" code nil (reparse-symbol indented_block_body) [11322 11366]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11228 11232])
                            ("n" variable nil (reparse-symbol function_parameters) [11234 11235])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11237 11245]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11215 11366])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11396 11400])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [11402 11413]))                          )
                        (reparse-symbol indented_block_body) [11371 11472])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11486 11490])
                            ("x" variable nil (reparse-symbol function_parameters) [11492 11493])
                            ("mask" variable nil (reparse-symbol function_parameters) [11495 11499]))                          )
                        (reparse-symbol indented_block_body) [11477 11542])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11562 11566]))                          )
                        (reparse-symbol indented_block_body) [11547 11731]))                  
                :type "class")
                nil [10647 11731])
            ("Lambda" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Used for evaluating an arbitrary Theano / TensorFlow expression
    on the output of the previous layer.

    # Examples

    ```python
        # add a x -> x^2 layer
        model.add(Lambda(lambda x: x ** 2))
    ```
    ```python
        # add a layer that returns the concatenation
        # of the positive part of the input and
        # the opposite of the negative part

        def antirectifier(x):
            x -= K.mean(x, axis=1, keepdims=True)
            x = K.l2_normalize(x, axis=1)
            pos = K.relu(x)
            neg = K.relu(-x)
            return K.concatenate([pos, neg], axis=1)

        def antirectifier_output_shape(input_shape):
            shape = list(input_shape)
            assert len(shape) == 2  # only valid for 2D tensors
            shape[-1] *= 2
            return tuple(shape)

        model.add(Lambda(antirectifier, output_shape=antirectifier_output_shape))
    ```

    # Arguments
        function: The function to be evaluated.
            Takes one argument: the output of previous layer
        output_shape: Expected output shape from function.
            Could be a tuple or a function of the shape of the input
        arguments: optional dictionary of keyword arguments to be passed
            to the function.

    # Input shape
        Arbitrary. Use the keyword argument input_shape
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Specified by `output_shape` argument.
    '''" code nil (reparse-symbol indented_block_body) [11758 13306])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [13393 13417])
                            ("self" variable nil (reparse-symbol indented_block_body) [13426 13452])
                            ("if" code nil (reparse-symbol indented_block_body) [13461 13877])
                            ("super" code nil (reparse-symbol indented_block_body) [13885 13923]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13324 13328])
                            ("function" variable nil (reparse-symbol function_parameters) [13330 13338])
                            ("output_shape" variable nil (reparse-symbol function_parameters) [13340 13352])
                            ("arguments" variable nil (reparse-symbol function_parameters) [13359 13368])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13373 13381]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13311 13923])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13953 13957])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [13959 13970]))                          )
                        (reparse-symbol indented_block_body) [13928 15060])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15074 15078])
                            ("x" variable nil (reparse-symbol function_parameters) [15080 15081])
                            ("mask" variable nil (reparse-symbol function_parameters) [15083 15087]))                          )
                        (reparse-symbol indented_block_body) [15065 15301])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15321 15325]))                          )
                        (reparse-symbol indented_block_body) [15306 16699])
                    ("from_config" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16737 16740])
                            ("config" variable nil (reparse-symbol function_parameters) [16742 16748]))                          )
                        (reparse-symbol indented_block_body) [16704 17708]))                  
                :type "class")
                nil [11733 17708])
            ("Dense" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Just your regular fully connected NN layer.

    # Example

    ```python
        # as first layer in a sequential model:
        model = Sequential(Dense(32, input_dim=16))
        # now the model will take as input arrays of shape (*, 16)
        # and output arrays of shape (*, 32)

        # this is equivalent to the above:
        model = Sequential(Dense(32, input_shape=(16,)))

        # after the first layer, you don't need to specify
        # the size of the input anymore:
        model.add(Dense(32))
    ```

    # Arguments
        output_dim: int > 0.
        init: name of initialization function for the weights of the layer
            (see [initializations](../initializations.md)),
            or alternatively, Theano function to use for weights
            initialization. This parameter is only relevant
            if you don't pass a `weights` argument.
        activation: name of activation function to use
            (see [activations](../activations.md)),
            or alternatively, elementwise Theano function.
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: a(x) = x).
        weights: list of numpy arrays to set as initial weights.
            The list should have 2 elements, of shape `(input_dim, output_dim)`
            and (output_dim,) for weights and biases respectively.
        W_regularizer: instance of [WeightRegularizer](../regularizers.md)
            (eg. L1 or L2 regularization), applied to the main weights matrix.
        b_regularizer: instance of [WeightRegularizer](../regularizers.md),
            applied to the bias.
        activity_regularizer: instance of [ActivityRegularizer](../regularizers.md),
            applied to the network output.
        W_constraint: instance of the [constraints](../constraints.md) module
            (eg. maxnorm, nonneg), applied to the main weights matrix.
        b_constraint: instance of the [constraints](../constraints.md) module,
            applied to the bias.
        input_dim: dimensionality of the input (integer).
            This argument (or alternatively, the keyword argument `input_shape`)
            is required when using this layer as the first layer in a model.

    # Input shape
        2D tensor with shape: `(nb_samples, input_dim)`.

    # Output shape
        2D tensor with shape: `(nb_samples, output_dim)`.
    '''" code nil (reparse-symbol indented_block_body) [17734 20144])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20413 20450])
                            ("self" variable nil (reparse-symbol indented_block_body) [20459 20504])
                            ("self" variable nil (reparse-symbol indented_block_body) [20513 20541])
                            ("self" variable nil (reparse-symbol indented_block_body) [20550 20576])
                            ("self" variable nil (reparse-symbol indented_block_body) [20586 20638])
                            ("self" variable nil (reparse-symbol indented_block_body) [20647 20699])
                            ("self" variable nil (reparse-symbol indented_block_body) [20708 20774])
                            ("self" variable nil (reparse-symbol indented_block_body) [20784 20833])
                            ("self" variable nil (reparse-symbol indented_block_body) [20842 20891])
                            ("self" variable nil (reparse-symbol indented_block_body) [20901 20931])
                            ("self" variable nil (reparse-symbol indented_block_body) [20940 20977])
                            ("if" code nil (reparse-symbol indented_block_body) [20987 21060])
                            ("super" code nil (reparse-symbol indented_block_body) [21068 21105]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20162 20166])
                            ("output_dim" variable nil (reparse-symbol function_parameters) [20168 20178])
                            ("init" variable nil (reparse-symbol function_parameters) [20180 20184])
                            ("activation" variable nil (reparse-symbol function_parameters) [20203 20213])
                            ("weights" variable nil (reparse-symbol function_parameters) [20224 20231])
                            ("W_regularizer" variable nil (reparse-symbol function_parameters) [20255 20268])
                            ("b_regularizer" variable nil (reparse-symbol function_parameters) [20275 20288])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [20295 20315])
                            ("W_constraint" variable nil (reparse-symbol function_parameters) [20339 20351])
                            ("b_constraint" variable nil (reparse-symbol function_parameters) [20358 20370])
                            ("input_dim" variable nil (reparse-symbol function_parameters) [20377 20386])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20393 20401]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20149 21105])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21120 21124])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [21126 21137]))                          )
                        (reparse-symbol indented_block_body) [21110 22400])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22414 22418])
                            ("x" variable nil (reparse-symbol function_parameters) [22420 22421])
                            ("mask" variable nil (reparse-symbol function_parameters) [22423 22427]))                          )
                        (reparse-symbol indented_block_body) [22405 22493])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22523 22527])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [22529 22540]))                          )
                        (reparse-symbol indented_block_body) [22498 22645])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22665 22669]))                          )
                        (reparse-symbol indented_block_body) [22650 23511]))                  
                :type "class")
                nil [17710 23511])
            ("ActivityRegularization" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Layer that passes through its input unchanged, but applies an update
    to the cost function based on the activity.

    # Arguments
        l1: L1 regularization factor (positive float).
        l2: L2 regularization factor (positive float).

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same shape as input.
    '''" code nil (reparse-symbol indented_block_body) [23554 24058])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [24116 24144])
                            ("self" variable nil (reparse-symbol indented_block_body) [24153 24165])
                            ("self" variable nil (reparse-symbol indented_block_body) [24174 24186])
                            ("activity_regularizer" variable nil (reparse-symbol indented_block_body) [24196 24252])
                            ("activity_regularizer" code nil (reparse-symbol indented_block_body) [24261 24297])
                            ("self" variable nil (reparse-symbol indented_block_body) [24306 24348])
                            ("super" code nil (reparse-symbol indented_block_body) [24357 24411]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24076 24080])
                            ("l1" variable nil (reparse-symbol function_parameters) [24082 24084])
                            ("l2" variable nil (reparse-symbol function_parameters) [24089 24091])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24096 24104]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24063 24411])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24431 24435]))                          )
                        (reparse-symbol indented_block_body) [24416 24645]))                  
                :type "class")
                nil [23513 24645])
            ("MaxoutDense" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''A dense maxout layer.

    A `MaxoutDense` layer takes the element-wise maximum of
    `nb_feature` `Dense(input_dim, output_dim)` linear layers.
    This allows the layer to learn a convex,
    piecewise linear activation function over the inputs.

    Note that this is a *linear* layer;
    if you wish to apply activation function
    (you shouldn't need to --they are universal function approximators),
    an `Activation` layer must be added after.

    # Arguments
        output_dim: int > 0.
        nb_feature: number of Dense layers to use internally.
        init: name of initialization function for the weights of the layer
            (see [initializations](../initializations.md)),
            or alternatively, Theano function to use for weights
            initialization. This parameter is only relevant
            if you don't pass a `weights` argument.
        activation: name of activation function to use
            (see [activations](../activations.md)),
            or alternatively, elementwise Theano function.
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: a(x) = x).
        weights: list of numpy arrays to set as initial weights.
            The list should have 2 elements, of shape `(input_dim, output_dim)`
            and (output_dim,) for weights and biases respectively.
        W_regularizer: instance of [WeightRegularizer](../regularizers.md)
            (eg. L1 or L2 regularization), applied to the main weights matrix.
        b_regularizer: instance of [WeightRegularizer](../regularizers.md),
            applied to the bias.
        activity_regularizer: instance of [ActivityRegularizer](../regularizers.md),
            applied to the network output.
        W_constraint: instance of the [constraints](../constraints.md) module
            (eg. maxnorm, nonneg), applied to the main weights matrix.
        b_constraint: instance of the [constraints](../constraints.md) module,
            applied to the bias.
        input_dim: dimensionality of the input (integer).
            This argument (or alternatively, the keyword argument `input_shape`)
            is required when using this layer as the first layer in a model.

    # Input shape
        2D tensor with shape: `(nb_samples, input_dim)`.

    # Output shape
        2D tensor with shape: `(nb_samples, output_dim)`.

    # References
        - [Maxout Networks](http://arxiv.org/pdf/1302.4389.pdf)
    '''" code nil (reparse-symbol indented_block_body) [24677 27161])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [27440 27468])
                            ("self" variable nil (reparse-symbol indented_block_body) [27477 27505])
                            ("self" variable nil (reparse-symbol indented_block_body) [27514 27551])
                            ("self" variable nil (reparse-symbol indented_block_body) [27561 27613])
                            ("self" variable nil (reparse-symbol indented_block_body) [27622 27674])
                            ("self" variable nil (reparse-symbol indented_block_body) [27683 27749])
                            ("self" variable nil (reparse-symbol indented_block_body) [27759 27808])
                            ("self" variable nil (reparse-symbol indented_block_body) [27817 27866])
                            ("self" variable nil (reparse-symbol indented_block_body) [27876 27906])
                            ("self" variable nil (reparse-symbol indented_block_body) [27915 27952])
                            ("self" variable nil (reparse-symbol indented_block_body) [27962 27988])
                            ("if" code nil (reparse-symbol indented_block_body) [27997 28070])
                            ("super" code nil (reparse-symbol indented_block_body) [28078 28121]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27179 27183])
                            ("output_dim" variable nil (reparse-symbol function_parameters) [27185 27195])
                            ("nb_feature" variable nil (reparse-symbol function_parameters) [27197 27207])
                            ("init" variable nil (reparse-symbol function_parameters) [27228 27232])
                            ("weights" variable nil (reparse-symbol function_parameters) [27251 27258])
                            ("W_regularizer" variable nil (reparse-symbol function_parameters) [27282 27295])
                            ("b_regularizer" variable nil (reparse-symbol function_parameters) [27302 27315])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [27322 27342])
                            ("W_constraint" variable nil (reparse-symbol function_parameters) [27366 27378])
                            ("b_constraint" variable nil (reparse-symbol function_parameters) [27385 27397])
                            ("input_dim" variable nil (reparse-symbol function_parameters) [27404 27413])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27420 27428]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27166 28121])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28136 28140])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [28142 28153]))                          )
                        (reparse-symbol indented_block_body) [28126 29413])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29443 29447])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [29449 29460]))                          )
                        (reparse-symbol indented_block_body) [29418 29565])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29579 29583])
                            ("x" variable nil (reparse-symbol function_parameters) [29585 29586])
                            ("mask" variable nil (reparse-symbol function_parameters) [29588 29592]))                          )
                        (reparse-symbol indented_block_body) [29570 29732])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29752 29756]))                          )
                        (reparse-symbol indented_block_body) [29737 30595]))                  
                :type "class")
                nil [24647 30595])
            ("Highway" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Densely connected highway network,
    a natural extension of LSTMs to feedforward networks.

    # Arguments
        init: name of initialization function for the weights of the layer
            (see [initializations](../initializations.md)),
            or alternatively, Theano function to use for weights
            initialization. This parameter is only relevant
            if you don't pass a `weights` argument.
        transform_bias: value for the bias to take on initially (default -2)
        activation: name of activation function to use
            (see [activations](../activations.md)),
            or alternatively, elementwise Theano function.
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: a(x) = x).
        weights: list of numpy arrays to set as initial weights.
            The list should have 2 elements, of shape `(input_dim, output_dim)`
            and (output_dim,) for weights and biases respectively.
        W_regularizer: instance of [WeightRegularizer](../regularizers.md)
            (eg. L1 or L2 regularization), applied to the main weights matrix.
        b_regularizer: instance of [WeightRegularizer](../regularizers.md),
            applied to the bias.
        activity_regularizer: instance of [ActivityRegularizer](../regularizers.md),
            applied to the network output.
        W_constraint: instance of the [constraints](../constraints.md) module
            (eg. maxnorm, nonneg), applied to the main weights matrix.
        b_constraint: instance of the [constraints](../constraints.md) module,
            applied to the bias.
        input_dim: dimensionality of the input (integer).
            This argument (or alternatively, the keyword argument `input_shape`)
            is required when using this layer as the first layer in a model.

    # Input shape
        2D tensor with shape: `(nb_samples, input_dim)`.

    # Output shape
        2D tensor with shape: `(nb_samples, input_dim)`.

    # References
        - [Highway Networks](http://arxiv.org/pdf/1505.00387v2.pdf)
    '''" code nil (reparse-symbol indented_block_body) [30623 32734])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33027 33064])
                            ("self" variable nil (reparse-symbol indented_block_body) [33073 33109])
                            ("self" variable nil (reparse-symbol indented_block_body) [33118 33163])
                            ("self" variable nil (reparse-symbol indented_block_body) [33173 33225])
                            ("self" variable nil (reparse-symbol indented_block_body) [33234 33286])
                            ("self" variable nil (reparse-symbol indented_block_body) [33295 33361])
                            ("self" variable nil (reparse-symbol indented_block_body) [33371 33420])
                            ("self" variable nil (reparse-symbol indented_block_body) [33429 33478])
                            ("self" variable nil (reparse-symbol indented_block_body) [33488 33518])
                            ("self" variable nil (reparse-symbol indented_block_body) [33527 33564])
                            ("self" variable nil (reparse-symbol indented_block_body) [33574 33600])
                            ("if" code nil (reparse-symbol indented_block_body) [33609 33682])
                            ("super" code nil (reparse-symbol indented_block_body) [33690 33729]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32752 32756])
                            ("init" variable nil (reparse-symbol function_parameters) [32758 32762])
                            ("transform_bias" variable nil (reparse-symbol function_parameters) [32781 32795])
                            ("activation" variable nil (reparse-symbol function_parameters) [32817 32827])
                            ("weights" variable nil (reparse-symbol function_parameters) [32838 32845])
                            ("W_regularizer" variable nil (reparse-symbol function_parameters) [32869 32882])
                            ("b_regularizer" variable nil (reparse-symbol function_parameters) [32889 32902])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [32909 32929])
                            ("W_constraint" variable nil (reparse-symbol function_parameters) [32953 32965])
                            ("b_constraint" variable nil (reparse-symbol function_parameters) [32972 32984])
                            ("input_dim" variable nil (reparse-symbol function_parameters) [32991 33000])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33007 33015]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32739 33729])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33744 33748])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [33750 33761]))                          )
                        (reparse-symbol indented_block_body) [33734 35319])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35333 35337])
                            ("x" variable nil (reparse-symbol function_parameters) [35339 35340])
                            ("mask" variable nil (reparse-symbol function_parameters) [35342 35346]))                          )
                        (reparse-symbol indented_block_body) [35324 35601])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35621 35625]))                          )
                        (reparse-symbol indented_block_body) [35606 36477]))                  
                :type "class")
                nil [30597 36477])
            ("TimeDistributedDense" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Apply a same Dense layer for each dimension[1] (time_dimension) input.
    Especially useful after a recurrent network with 'return_sequence=True'.

    Note: this layer is deprecated, prefer using the `TimeDistributed` wrapper:
    ```python
        model.add(TimeDistributed(Dense(32)))
    ```

    # Input shape
        3D tensor with shape `(nb_sample, time_dimension, input_dim)`.
    # Output shape
        3D tensor with shape `(nb_sample, time_dimension, output_dim)`.
    # Arguments
        output_dim: int > 0.
        init: name of initialization function for the weights of the layer
            (see [initializations](../initializations.md)),
            or alternatively, Theano function to use for weights
            initialization. This parameter is only relevant
            if you don't pass a `weights` argument.
        activation: name of activation function to use
            (see [activations](../activations.md)),
            or alternatively, elementwise Theano function.
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: a(x) = x).
        weights: list of numpy arrays to set as initial weights.
            The list should have 2 elements, of shape `(input_dim, output_dim)`
            and (output_dim,) for weights and biases respectively.
        W_regularizer: instance of [WeightRegularizer](../regularizers.md)
            (eg. L1 or L2 regularization), applied to the main weights matrix.
        b_regularizer: instance of [WeightRegularizer](../regularizers.md),
            applied to the bias.
        activity_regularizer: instance of [ActivityRegularizer](../regularizers.md),
            applied to the network output.
        W_constraint: instance of the [constraints](../constraints.md) module
            (eg. maxnorm, nonneg), applied to the main weights matrix.
        b_constraint: instance of the [constraints](../constraints.md) module,
            applied to the bias.
        input_dim: dimensionality of the input (integer).
            This argument (or alternatively, the keyword argument `input_shape`)
            is required when using this layer as the first layer in a model.
    '''" code nil (reparse-symbol indented_block_body) [36518 38726])
                    ("__init__" function
                       (:suite 
                          ( ("warnings" code nil (reparse-symbol indented_block_body) [39049 39174])
                            ("self" variable nil (reparse-symbol indented_block_body) [39183 39211])
                            ("self" variable nil (reparse-symbol indented_block_body) [39220 39257])
                            ("self" variable nil (reparse-symbol indented_block_body) [39266 39311])
                            ("self" variable nil (reparse-symbol indented_block_body) [39321 39373])
                            ("self" variable nil (reparse-symbol indented_block_body) [39382 39434])
                            ("self" variable nil (reparse-symbol indented_block_body) [39443 39509])
                            ("self" variable nil (reparse-symbol indented_block_body) [39519 39568])
                            ("self" variable nil (reparse-symbol indented_block_body) [39577 39626])
                            ("self" variable nil (reparse-symbol indented_block_body) [39636 39666])
                            ("self" variable nil (reparse-symbol indented_block_body) [39675 39712])
                            ("self" variable nil (reparse-symbol indented_block_body) [39721 39749])
                            ("self" variable nil (reparse-symbol indented_block_body) [39759 39785])
                            ("self" variable nil (reparse-symbol indented_block_body) [39794 39826])
                            ("if" code nil (reparse-symbol indented_block_body) [39835 39926])
                            ("super" code nil (reparse-symbol indented_block_body) [39934 39986]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38745 38749])
                            ("output_dim" variable nil (reparse-symbol function_parameters) [38751 38761])
                            ("init" variable nil (reparse-symbol function_parameters) [38780 38784])
                            ("activation" variable nil (reparse-symbol function_parameters) [38803 38813])
                            ("weights" variable nil (reparse-symbol function_parameters) [38824 38831])
                            ("W_regularizer" variable nil (reparse-symbol function_parameters) [38855 38868])
                            ("b_regularizer" variable nil (reparse-symbol function_parameters) [38875 38888])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [38895 38915])
                            ("W_constraint" variable nil (reparse-symbol function_parameters) [38939 38951])
                            ("b_constraint" variable nil (reparse-symbol function_parameters) [38958 38970])
                            ("input_dim" variable nil (reparse-symbol function_parameters) [38994 39003])
                            ("input_length" variable nil (reparse-symbol function_parameters) [39010 39022])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39029 39037]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38732 39986])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40001 40005])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [40007 40018]))                          )
                        (reparse-symbol indented_block_body) [39991 41253])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41283 41287])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [41289 41300]))                          )
                        (reparse-symbol indented_block_body) [41258 41368])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41382 41386])
                            ("x" variable nil (reparse-symbol function_parameters) [41388 41389])
                            ("mask" variable nil (reparse-symbol function_parameters) [41391 41395]))                          )
                        (reparse-symbol indented_block_body) [41373 42645])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42665 42669]))                          )
                        (reparse-symbol indented_block_body) [42650 43579]))                  
                :type "class")
                nil [36479 43579]))          
      :file "core.py"
      :pointmax 43579
      :fsize 43578
      :lastmodtime '(22285 16886 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [1 39])
            ("InputSpec" include nil nil [54 110])
            ("merge" include nil nil [54 110])
            ("Merge" include nil nil [54 110])
            ("InputLayer" include nil nil [54 110])
            ("Input" include nil nil [54 110])
            ("Layer" include nil nil [54 110]))          
      :file "__init__.py"
      :pointmax 321
      :fsize 320
      :lastmodtime '(22285 16886 0 0)
      :unmatched-syntax '((IMPORT 312 . 318) (MULT 319 . 320) (FROM 297 . 301) (PERIOD 302 . 303) (IMPORT 288 . 294) (MULT 295 . 296) (FROM 261 . 265) (PERIOD 266 . 267) (IMPORT 252 . 258) (MULT 259 . 260) (FROM 240 . 244) (PERIOD 245 . 246) (IMPORT 231 . 237) (MULT 238 . 239) (FROM 214 . 218) (PERIOD 219 . 220) (IMPORT 205 . 211) (MULT 212 . 213) (FROM 185 . 189) (PERIOD 190 . 191) (IMPORT 176 . 182) (MULT 183 . 184) (FROM 160 . 164) (PERIOD 165 . 166) (IMPORT 151 . 157) (MULT 158 . 159) (FROM 131 . 135) (PERIOD 136 . 137) (IMPORT 122 . 128) (MULT 129 . 130) (FROM 111 . 115) (PERIOD 116 . 117) (PERIOD 46 . 47) (FROM 40 . 44) (PERIOD 45 . 46)))
    (semanticdb-table "advanced_activations.py"
      :major-mode 'python-mode
      :tags 
        '( ("initializations" include nil nil [9 31])
            ("Layer" include nil nil [46 58])
            ("backend" include nil nil [67 86])
            ("numpy" include nil nil [87 105])
            ("LeakyReLU" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Special version of a Rectified Linear Unit
    that allows a small gradient when the unit is not active:
    `f(x) = alpha * x for x < 0`,
    `f(x) = x for x >= 0`.

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same shape as the input.

    # Arguments
        alpha: float >= 0. Negative slope coefficient.
    '''" code nil (reparse-symbol indented_block_body) [136 638])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [692 720])
                            ("self" variable nil (reparse-symbol indented_block_body) [729 747])
                            ("super" code nil (reparse-symbol indented_block_body) [756 797]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [656 660])
                            ("alpha" variable nil (reparse-symbol function_parameters) [662 667])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [673 681]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [643 798])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [812 816])
                            ("x" variable nil (reparse-symbol function_parameters) [818 819])
                            ("mask" variable nil (reparse-symbol function_parameters) [821 825]))                          )
                        (reparse-symbol indented_block_body) [803 876])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [896 900]))                          )
                        (reparse-symbol indented_block_body) [881 1070]))                  
                :type "class")
                nil [108 1070])
            ("PReLU" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Parametric Rectified Linear Unit:
    `f(x) = alphas * x for x < 0`,
    `f(x) = x for x >= 0`,
    where `alphas` is a learned array with the same shape as x.

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same shape as the input.

    # Arguments
        init: initialization function for the weights.
        weights: initial weights, as a list of a single numpy array.

    # References
        - [Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification](http://arxiv.org/pdf/1502.01852v1.pdf)
    '''" code nil (reparse-symbol indented_block_body) [1096 1822])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1892 1920])
                            ("self" variable nil (reparse-symbol indented_block_body) [1929 1966])
                            ("self" variable nil (reparse-symbol indented_block_body) [1975 2005])
                            ("super" code nil (reparse-symbol indented_block_body) [2014 2051]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1840 1844])
                            ("init" variable nil (reparse-symbol function_parameters) [1846 1850])
                            ("weights" variable nil (reparse-symbol function_parameters) [1859 1866])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1873 1881]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1827 2052])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2067 2071])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [2073 2084]))                          )
                        (reparse-symbol indented_block_body) [2057 2385])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2399 2403])
                            ("x" variable nil (reparse-symbol function_parameters) [2405 2406])
                            ("mask" variable nil (reparse-symbol function_parameters) [2408 2412]))                          )
                        (reparse-symbol indented_block_body) [2390 2516])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2536 2540]))                          )
                        (reparse-symbol indented_block_body) [2521 2713]))                  
                :type "class")
                nil [1072 2713])
            ("ELU" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Exponential Linear Unit:
    `f(x) =  alpha * (exp(x) - 1.) for x < 0`,
    `f(x) = x for x >= 0`.

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same shape as the input.

    # Arguments
        alpha: scale for the negative factor.

    # References
        - [Fast and Accurate Deep Network Learning by Exponential Linear Units (ELUs)](http://arxiv.org/pdf/1511.07289v1.pdf)
    '''" code nil (reparse-symbol indented_block_body) [2737 3307])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3361 3389])
                            ("self" variable nil (reparse-symbol indented_block_body) [3398 3434])
                            ("super" code nil (reparse-symbol indented_block_body) [3443 3478]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3325 3329])
                            ("alpha" variable nil (reparse-symbol function_parameters) [3331 3336])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3342 3350]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3312 3479])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3493 3497])
                            ("x" variable nil (reparse-symbol function_parameters) [3499 3500])
                            ("mask" variable nil (reparse-symbol function_parameters) [3502 3506]))                          )
                        (reparse-symbol indented_block_body) [3484 3623])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3643 3647]))                          )
                        (reparse-symbol indented_block_body) [3628 3811]))                  
                :type "class")
                nil [2715 3811])
            ("ParametricSoftplus" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Parametric Softplus:
    `alpha * log(1 + exp(beta * x))`

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same shape as the input.

    # Arguments
        alpha_init: float. Initial value of the alpha weights.
        beta_init: float. Initial values of the beta weights.
        weights: initial weights, as a list of 2 numpy arrays.

    # References
        - [Inferring Nonlinear Neuronal Computation Based on Physiologically Plausible Inputs](http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003143)
    '''" code nil (reparse-symbol indented_block_body) [3850 4569])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4674 4702])
                            ("self" variable nil (reparse-symbol indented_block_body) [4711 4757])
                            ("self" variable nil (reparse-symbol indented_block_body) [4766 4810])
                            ("self" variable nil (reparse-symbol indented_block_body) [4819 4849])
                            ("super" code nil (reparse-symbol indented_block_body) [4858 4908]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4587 4591])
                            ("alpha_init" variable nil (reparse-symbol function_parameters) [4593 4603])
                            ("beta_init" variable nil (reparse-symbol function_parameters) [4609 4618])
                            ("weights" variable nil (reparse-symbol function_parameters) [4641 4648])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4655 4663]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4574 4909])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4924 4928])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [4930 4941]))                          )
                        (reparse-symbol indented_block_body) [4914 5455])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5469 5473])
                            ("x" variable nil (reparse-symbol function_parameters) [5475 5476])
                            ("mask" variable nil (reparse-symbol function_parameters) [5478 5482]))                          )
                        (reparse-symbol indented_block_body) [5460 5546])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5566 5570]))                          )
                        (reparse-symbol indented_block_body) [5551 5806]))                  
                :type "class")
                nil [3813 5806])
            ("ThresholdedReLU" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Thresholded Rectified Linear Unit:
    `f(x) = x for x > theta`
    `f(x) = 0 otherwise`.

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same shape as the input.

    # Arguments
        theta: float >= 0. Threshold location of activation.

    # References
        - [Zero-Bias Autoencoders and the Benefits of Co-Adapting Features](http://arxiv.org/pdf/1402.3337.pdf)
    '''" code nil (reparse-symbol indented_block_body) [5842 6404])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6458 6486])
                            ("self" variable nil (reparse-symbol indented_block_body) [6495 6531])
                            ("super" code nil (reparse-symbol indented_block_body) [6540 6587]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6422 6426])
                            ("theta" variable nil (reparse-symbol function_parameters) [6428 6433])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6439 6447]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6409 6588])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6602 6606])
                            ("x" variable nil (reparse-symbol function_parameters) [6608 6609])
                            ("mask" variable nil (reparse-symbol function_parameters) [6611 6615]))                          )
                        (reparse-symbol indented_block_body) [6593 6677])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6697 6701]))                          )
                        (reparse-symbol indented_block_body) [6682 6877]))                  
                :type "class")
                nil [5808 6877])
            ("SReLU" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''S-shaped Rectified Linear Unit.

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same shape as the input.

    # Arguments
        t_left_init: initialization function for the left part intercept
        a_left_init: initialization function for the left part slope
        t_right_init: initialization function for the right part intercept
        a_right_init: initialization function for the right part slope

    # References
        - [Deep Learning with S-shaped Rectified Linear Activation Units](http://arxiv.org/abs/1512.07030)
    '''" code nil (reparse-symbol indented_block_body) [6903 7629])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7790 7818])
                            ("self" variable nil (reparse-symbol indented_block_body) [7827 7857])
                            ("self" variable nil (reparse-symbol indented_block_body) [7866 7896])
                            ("self" variable nil (reparse-symbol indented_block_body) [7905 7937])
                            ("self" variable nil (reparse-symbol indented_block_body) [7946 7978])
                            ("super" code nil (reparse-symbol indented_block_body) [7987 8024]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7647 7651])
                            ("t_left_init" variable nil (reparse-symbol function_parameters) [7653 7664])
                            ("a_left_init" variable nil (reparse-symbol function_parameters) [7673 7684])
                            ("t_right_init" variable nil (reparse-symbol function_parameters) [7720 7732])
                            ("a_right_init" variable nil (reparse-symbol function_parameters) [7751 7763])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7771 7779]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7634 8025])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8040 8044])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [8046 8057]))                          )
                        (reparse-symbol indented_block_body) [8030 9077])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9091 9095])
                            ("x" variable nil (reparse-symbol function_parameters) [9097 9098])
                            ("mask" variable nil (reparse-symbol function_parameters) [9100 9104]))                          )
                        (reparse-symbol indented_block_body) [9082 9432])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9452 9456]))                          )
                        (reparse-symbol indented_block_body) [9437 9791]))                  
                :type "class")
                nil [6879 9791]))          
      :file "advanced_activations.py"
      :pointmax 9791
      :fsize 9790
      :lastmodtime '(22285 16886 0 0)
      :unmatched-syntax '((PERIOD 65 . 66) (FROM 59 . 63) (PERIOD 64 . 65) (PERIOD 38 . 39) (FROM 32 . 36) (PERIOD 37 . 38) (PERIOD 7 . 8) (PERIOD 6 . 7)))
    (semanticdb-table "normalization.py"
      :major-mode 'python-mode
      :tags 
        '( ("InputSpec" include nil nil [15 38])
            ("Layer" include nil nil [15 38])
            ("initializations" include nil nil [47 69])
            ("backend" include nil nil [78 97])
            ("BatchNormalization" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Normalize the activations of the previous layer at each batch,
    i.e. applies a transformation that maintains the mean activation
    close to 0 and the activation standard deviation close to 1.

    # Arguments
        epsilon: small float > 0. Fuzz parameter.
        mode: integer, 0 or 1.
            - 0: feature-wise normalization.
                Each feature map in the input will
                be normalized separately. The axis on which
                to normalize is specified by the `axis` argument.
                Note that if the input is a 4D image tensor
                using Theano conventions (samples, channels, rows, cols)
                then you should set `axis` to `1` to normalize along
                the channels axis.
            - 1: sample-wise normalization. This mode assumes a 2D input.
        axis: integer, axis along which to normalize in mode 0. For instance,
            if your input tensor has shape (samples, channels, rows, cols),
            set axis to 1 to normalize per feature map (channels axis).
        momentum: momentum in the computation of the
            exponential average of the mean and standard deviation
            of the data, for feature-wise normalization.
        weights: Initialization weights.
            List of 2 numpy arrays, with shapes:
            `[(input_shape,), (input_shape,)]`
        beta_init: name of initialization function for shift parameter
            (see [initializations](../initializations.md)), or alternatively,
            Theano/TensorFlow function to use for weights initialization.
            This parameter is only relevant if you don't pass a `weights` argument.
        gamma_init: name of initialization function for scale parameter (see
            [initializations](../initializations.md)), or alternatively,
            Theano/TensorFlow function to use for weights initialization.
            This parameter is only relevant if you don't pass a `weights` argument.

    # Input shape
        Arbitrary. Use the keyword argument `input_shape`
        (tuple of integers, does not include the samples axis)
        when using this layer as the first layer in a model.

    # Output shape
        Same shape as input.

    # References
        - [Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift](http://arxiv.org/pdf/1502.03167v3.pdf)
    '''" code nil (reparse-symbol indented_block_body) [137 2542])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2697 2744])
                            ("self" variable nil (reparse-symbol indented_block_body) [2753 2802])
                            ("self" variable nil (reparse-symbol indented_block_body) [2811 2833])
                            ("self" variable nil (reparse-symbol indented_block_body) [2842 2858])
                            ("self" variable nil (reparse-symbol indented_block_body) [2867 2883])
                            ("self" variable nil (reparse-symbol indented_block_body) [2892 2916])
                            ("self" variable nil (reparse-symbol indented_block_body) [2925 2955])
                            ("self" variable nil (reparse-symbol indented_block_body) [2964 2995])
                            ("super" code nil (reparse-symbol indented_block_body) [3004 3054]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2560 2564])
                            ("epsilon" variable nil (reparse-symbol function_parameters) [2566 2573])
                            ("mode" variable nil (reparse-symbol function_parameters) [2580 2584])
                            ("axis" variable nil (reparse-symbol function_parameters) [2588 2592])
                            ("momentum" variable nil (reparse-symbol function_parameters) [2597 2605])
                            ("weights" variable nil (reparse-symbol function_parameters) [2628 2635])
                            ("beta_init" variable nil (reparse-symbol function_parameters) [2642 2651])
                            ("gamma_init" variable nil (reparse-symbol function_parameters) [2660 2670])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2678 2686]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2547 3055])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3070 3074])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [3076 3087]))                          )
                        (reparse-symbol indented_block_body) [3060 3849])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3863 3867])
                            ("x" variable nil (reparse-symbol function_parameters) [3869 3870])
                            ("mask" variable nil (reparse-symbol function_parameters) [3872 3876]))                          )
                        (reparse-symbol indented_block_body) [3854 5776])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5796 5800]))                          )
                        (reparse-symbol indented_block_body) [5781 6102]))                  
                :type "class")
                nil [100 6102]))          
      :file "normalization.py"
      :pointmax 6102
      :fsize 6101
      :lastmodtime '(22285 16886 0 0)
      :unmatched-syntax '((PERIOD 76 . 77) (FROM 70 . 74) (PERIOD 75 . 76) (PERIOD 45 . 46) (FROM 39 . 43) (PERIOD 44 . 45) (PERIOD 7 . 8) (PERIOD 6 . 7)))
    (semanticdb-table "convolutional.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [25 63])
            ("backend" include nil nil [73 92])
            ("constraints" include nil nil [101 163])
            ("regularizers" include nil nil [101 163])
            ("initializations" include nil nil [101 163])
            ("activations" include nil nil [101 163])
            ("InputSpec" include nil nil [178 201])
            ("Layer" include nil nil [178 201])
            ("conv_output_length" function (:arguments 
              ( ("input_length" variable nil (reparse-symbol function_parameters) [227 239])
                ("filter_size" variable nil (reparse-symbol function_parameters) [241 252])
                ("border_mode" variable nil (reparse-symbol function_parameters) [254 265])
                ("stride" variable nil (reparse-symbol function_parameters) [267 273]))              ) nil [204 574])
            ("Convolution1D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Convolution operator for filtering neighborhoods of one-dimensional inputs.
    When using this layer as the first layer in a model,
    either provide the keyword argument `input_dim`
    (int, e.g. 128 for sequences of 128-dimensional vectors),
    or `input_shape` (tuple of integers, e.g. (10, 128) for sequences
    of 10 vectors of 128-dimensional vectors).

    # Example

    ```python
        # apply a convolution 1d of length 3 to a sequence with 10 timesteps,
        # with 64 output filters
        model = Sequential()
        model.add(Convolution1D(64, 3, border_mode='same', input_shape=(10, 32)))
        # now model.output_shape == (None, 10, 64)

        # add a new conv1d on top
        model.add(Convolution1D(32, 3, border_mode='same'))
        # now model.output_shape == (None, 10, 32)
    ```

    # Arguments
        nb_filter: Number of convolution kernels to use
            (dimensionality of the output).
        filter_length: The extension (spatial or temporal) of each filter.
        init: name of initialization function for the weights of the layer
            (see [initializations](../initializations.md)),
            or alternatively, Theano function to use for weights initialization.
            This parameter is only relevant if you don't pass a `weights` argument.
        activation: name of activation function to use
            (see [activations](../activations.md)),
            or alternatively, elementwise Theano function.
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: a(x) = x).
        weights: list of numpy arrays to set as initial weights.
        border_mode: 'valid' or 'same'.
        subsample_length: factor by which to subsample output.
        W_regularizer: instance of [WeightRegularizer](../regularizers.md)
            (eg. L1 or L2 regularization), applied to the main weights matrix.
        b_regularizer: instance of [WeightRegularizer](../regularizers.md),
            applied to the bias.
        activity_regularizer: instance of [ActivityRegularizer](../regularizers.md),
            applied to the network output.
        W_constraint: instance of the [constraints](../constraints.md) module
            (eg. maxnorm, nonneg), applied to the main weights matrix.
        b_constraint: instance of the [constraints](../constraints.md) module,
            applied to the bias.
        input_dim: Number of channels/dimensions in the input.
            Either this argument or the keyword argument `input_shape`must be
            provided when using this layer as the first layer in a model.
        input_length: Length of input sequences, when it is constant.
            This argument is required if you are going to connect
            `Flatten` then `Dense` layers upstream
            (without it, the shape of the dense outputs cannot be computed).

    # Input shape
        3D tensor with shape: `(samples, steps, input_dim)`.

    # Output shape
        3D tensor with shape: `(samples, new_steps, nb_filter)`.
        `steps` value might have changed due to padding.
    '''" code nil (reparse-symbol indented_block_body) [608 3735])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4122 4246])
                            ("self" variable nil (reparse-symbol indented_block_body) [4254 4280])
                            ("self" variable nil (reparse-symbol indented_block_body) [4289 4323])
                            ("self" variable nil (reparse-symbol indented_block_body) [4332 4388])
                            ("self" variable nil (reparse-symbol indented_block_body) [4397 4442])
                            ("assert" code nil (reparse-symbol indented_block_body) [4451 4530])
                            ("self" variable nil (reparse-symbol indented_block_body) [4539 4569])
                            ("self" variable nil (reparse-symbol indented_block_body) [4578 4618])
                            ("self" variable nil (reparse-symbol indented_block_body) [4628 4666])
                            ("self" variable nil (reparse-symbol indented_block_body) [4676 4728])
                            ("self" variable nil (reparse-symbol indented_block_body) [4737 4789])
                            ("self" variable nil (reparse-symbol indented_block_body) [4798 4864])
                            ("self" variable nil (reparse-symbol indented_block_body) [4874 4923])
                            ("self" variable nil (reparse-symbol indented_block_body) [4932 4981])
                            ("self" variable nil (reparse-symbol indented_block_body) [4991 5028])
                            ("self" variable nil (reparse-symbol indented_block_body) [5037 5067])
                            ("self" variable nil (reparse-symbol indented_block_body) [5076 5102])
                            ("self" variable nil (reparse-symbol indented_block_body) [5111 5143])
                            ("if" code nil (reparse-symbol indented_block_body) [5152 5243])
                            ("super" code nil (reparse-symbol indented_block_body) [5251 5296]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3753 3757])
                            ("nb_filter" variable nil (reparse-symbol function_parameters) [3759 3768])
                            ("filter_length" variable nil (reparse-symbol function_parameters) [3770 3783])
                            ("init" variable nil (reparse-symbol function_parameters) [3802 3806])
                            ("activation" variable nil (reparse-symbol function_parameters) [3818 3828])
                            ("weights" variable nil (reparse-symbol function_parameters) [3839 3846])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [3870 3881])
                            ("subsample_length" variable nil (reparse-symbol function_parameters) [3891 3907])
                            ("W_regularizer" variable nil (reparse-symbol function_parameters) [3928 3941])
                            ("b_regularizer" variable nil (reparse-symbol function_parameters) [3948 3961])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [3968 3988])
                            ("W_constraint" variable nil (reparse-symbol function_parameters) [4012 4024])
                            ("b_constraint" variable nil (reparse-symbol function_parameters) [4031 4043])
                            ("input_dim" variable nil (reparse-symbol function_parameters) [4067 4076])
                            ("input_length" variable nil (reparse-symbol function_parameters) [4083 4095])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4102 4110]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3740 5297])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5312 5316])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [5318 5329]))                          )
                        (reparse-symbol indented_block_body) [5302 6441])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6471 6475])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [6477 6488]))                          )
                        (reparse-symbol indented_block_body) [6446 6764])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6778 6782])
                            ("x" variable nil (reparse-symbol function_parameters) [6784 6785])
                            ("mask" variable nil (reparse-symbol function_parameters) [6787 6791]))                          )
                        (reparse-symbol indented_block_body) [6769 7348])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7368 7372]))                          )
                        (reparse-symbol indented_block_body) [7353 8440]))                  
                :type "class")
                nil [576 8440])
            ("Convolution2D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Convolution operator for filtering windows of two-dimensional inputs.
    When using this layer as the first layer in a model,
    provide the keyword argument `input_shape`
    (tuple of integers, does not include the sample axis),
    e.g. `input_shape=(3, 128, 128)` for 128x128 RGB pictures.

    # Examples

    ```python
        # apply a 3x3 convolution with 64 output filters on a 256x256 image:
        model = Sequential()
        model.add(Convolution2D(64, 3, 3, border_mode='same', input_shape=(3, 256, 256)))
        # now model.output_shape == (None, 64, 256, 256)

        # add a 3x3 convolution on top, with 32 output filters:
        model.add(Convolution2D(32, 3, 3, border_mode='same'))
        # now model.output_shape == (None, 32, 256, 256)
    ```

    # Arguments
        nb_filter: Number of convolution filters to use.
        nb_row: Number of rows in the convolution kernel.
        nb_col: Number of columns in the convolution kernel.
        init: name of initialization function for the weights of the layer
            (see [initializations](../initializations.md)), or alternatively,
            Theano function to use for weights initialization.
            This parameter is only relevant if you don't pass
            a `weights` argument.
        activation: name of activation function to use
            (see [activations](../activations.md)),
            or alternatively, elementwise Theano function.
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: a(x) = x).
        weights: list of numpy arrays to set as initial weights.
        border_mode: 'valid' or 'same'.
        subsample: tuple of length 2. Factor by which to subsample output.
            Also called strides elsewhere.
        W_regularizer: instance of [WeightRegularizer](../regularizers.md)
            (eg. L1 or L2 regularization), applied to the main weights matrix.
        b_regularizer: instance of [WeightRegularizer](../regularizers.md),
            applied to the bias.
        activity_regularizer: instance of [ActivityRegularizer](../regularizers.md),
            applied to the network output.
        W_constraint: instance of the [constraints](../constraints.md) module
            (eg. maxnorm, nonneg), applied to the main weights matrix.
        b_constraint: instance of the [constraints](../constraints.md) module,
            applied to the bias.
        dim_ordering: 'th' or 'tf'. In 'th' mode, the channels dimension
            (the depth) is at index 1, in 'tf' mode is it at index 3.

    # Input shape
        4D tensor with shape:
        `(samples, channels, rows, cols)` if dim_ordering='th'
        or 4D tensor with shape:
        `(samples, rows, cols, channels)` if dim_ordering='tf'.

    # Output shape
        4D tensor with shape:
        `(samples, nb_filter, new_rows, new_cols)` if dim_ordering='th'
        or 4D tensor with shape:
        `(samples, new_rows, new_cols, nb_filter)` if dim_ordering='tf'.
        `rows` and `cols` values might have changed due to padding.
    '''" code nil (reparse-symbol indented_block_body) [8474 11568])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [11928 12052])
                            ("self" variable nil (reparse-symbol indented_block_body) [12060 12086])
                            ("self" variable nil (reparse-symbol indented_block_body) [12095 12115])
                            ("self" variable nil (reparse-symbol indented_block_body) [12124 12144])
                            ("self" variable nil (reparse-symbol indented_block_body) [12153 12217])
                            ("self" variable nil (reparse-symbol indented_block_body) [12226 12271])
                            ("assert" code nil (reparse-symbol indented_block_body) [12280 12359])
                            ("self" variable nil (reparse-symbol indented_block_body) [12368 12398])
                            ("self" variable nil (reparse-symbol indented_block_body) [12407 12440])
                            ("assert" code nil (reparse-symbol indented_block_body) [12449 12520])
                            ("self" variable nil (reparse-symbol indented_block_body) [12529 12561])
                            ("self" variable nil (reparse-symbol indented_block_body) [12571 12623])
                            ("self" variable nil (reparse-symbol indented_block_body) [12632 12684])
                            ("self" variable nil (reparse-symbol indented_block_body) [12693 12759])
                            ("self" variable nil (reparse-symbol indented_block_body) [12769 12818])
                            ("self" variable nil (reparse-symbol indented_block_body) [12827 12876])
                            ("self" variable nil (reparse-symbol indented_block_body) [12886 12923])
                            ("self" variable nil (reparse-symbol indented_block_body) [12932 12962])
                            ("super" code nil (reparse-symbol indented_block_body) [12971 13016]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11586 11590])
                            ("nb_filter" variable nil (reparse-symbol function_parameters) [11592 11601])
                            ("nb_row" variable nil (reparse-symbol function_parameters) [11603 11609])
                            ("nb_col" variable nil (reparse-symbol function_parameters) [11611 11617])
                            ("init" variable nil (reparse-symbol function_parameters) [11636 11640])
                            ("activation" variable nil (reparse-symbol function_parameters) [11659 11669])
                            ("weights" variable nil (reparse-symbol function_parameters) [11680 11687])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [11711 11722])
                            ("subsample" variable nil (reparse-symbol function_parameters) [11732 11741])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [11750 11762])
                            ("W_regularizer" variable nil (reparse-symbol function_parameters) [11786 11799])
                            ("b_regularizer" variable nil (reparse-symbol function_parameters) [11806 11819])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [11826 11846])
                            ("W_constraint" variable nil (reparse-symbol function_parameters) [11870 11882])
                            ("b_constraint" variable nil (reparse-symbol function_parameters) [11889 11901])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11908 11916]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11573 13017])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13032 13036])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [13038 13049]))                          )
                        (reparse-symbol indented_block_body) [13022 14462])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14492 14496])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [14498 14509]))                          )
                        (reparse-symbol indented_block_body) [14467 15358])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15372 15376])
                            ("x" variable nil (reparse-symbol function_parameters) [15378 15379])
                            ("mask" variable nil (reparse-symbol function_parameters) [15381 15385]))                          )
                        (reparse-symbol indented_block_body) [15363 16012])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16032 16036]))                          )
                        (reparse-symbol indented_block_body) [16017 17070]))                  
                :type "class")
                nil [8442 17070])
            ("Convolution3D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Convolution operator for filtering windows of three-dimensional inputs.
    When using this layer as the first layer in a model,
    provide the keyword argument `input_shape`
    (tuple of integers, does not include the sample axis),
    e.g. `input_shape=(3, 10, 128, 128)` for 10 frames of 128x128 RGB pictures.

    Note: this layer will only work with Theano for the time being.

    # Arguments
        nb_filter: Number of convolution filters to use.
        kernel_dim1: Length of the first dimension in the covolution kernel.
        kernel_dim2: Length of the second dimension in the convolution kernel.
        kernel_dim3: Length of the third dimension in the convolution kernel.
        init: name of initialization function for the weights of the layer
            (see [initializations](../initializations.md)), or alternatively,
            Theano function to use for weights initialization.
            This parameter is only relevant if you don't pass
            a `weights` argument.
        activation: name of activation function to use
            (see [activations](../activations.md)),
            or alternatively, elementwise Theano function.
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: a(x) = x).
        weights: list of numpy arrays to set as initial weights.
        border_mode: 'valid' or 'same'.
        subsample: tuple of length 3. Factor by which to subsample output.
            Also called strides elsewhere.
            Note: 'subsample' is implemented by slicing the output of conv3d with strides=(1,1,1).
        W_regularizer: instance of [WeightRegularizer](../regularizers.md)
            (eg. L1 or L2 regularization), applied to the main weights matrix.
        b_regularizer: instance of [WeightRegularizer](../regularizers.md),
            applied to the bias.
        activity_regularizer: instance of [ActivityRegularizer](../regularizers.md),
            applied to the network output.
        W_constraint: instance of the [constraints](../constraints.md) module
            (eg. maxnorm, nonneg), applied to the main weights matrix.
        b_constraint: instance of the [constraints](../constraints.md) module,
            applied to the bias.
        dim_ordering: 'th' or 'tf'. In 'th' mode, the channels dimension
            (the depth) is at index 1, in 'tf' mode is it at index 4.

    # Input shape
        5D tensor with shape:
        `(samples, channels, conv_dim1, conv_dim2, conv_dim3)` if dim_ordering='th'
        or 5D tensor with shape:
        `(samples, conv_dim1, conv_dim2, conv_dim3, channels)` if dim_ordering='tf'.

    # Output shape
        5D tensor with shape:
        `(samples, nb_filter, new_conv_dim1, new_conv_dim2, new_conv_dim3)` if dim_ordering='th'
        or 5D tensor with shape:
        `(samples, new_conv_dim1, new_conv_dim2, new_conv_dim3, nb_filter)` if dim_ordering='tf'.
        `new_conv_dim1`, `new_conv_dim2` and `new_conv_dim3` values might have changed due to padding.
    '''" code nil (reparse-symbol indented_block_body) [17104 20150])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [20536 20696])
                            ("if" code nil (reparse-symbol indented_block_body) [20704 20828])
                            ("self" variable nil (reparse-symbol indented_block_body) [20836 20862])
                            ("self" variable nil (reparse-symbol indented_block_body) [20871 20901])
                            ("self" variable nil (reparse-symbol indented_block_body) [20910 20940])
                            ("self" variable nil (reparse-symbol indented_block_body) [20949 20979])
                            ("self" variable nil (reparse-symbol indented_block_body) [20988 21052])
                            ("self" variable nil (reparse-symbol indented_block_body) [21061 21106])
                            ("assert" code nil (reparse-symbol indented_block_body) [21115 21194])
                            ("self" variable nil (reparse-symbol indented_block_body) [21203 21233])
                            ("self" variable nil (reparse-symbol indented_block_body) [21242 21275])
                            ("assert" code nil (reparse-symbol indented_block_body) [21284 21355])
                            ("self" variable nil (reparse-symbol indented_block_body) [21364 21396])
                            ("self" variable nil (reparse-symbol indented_block_body) [21406 21458])
                            ("self" variable nil (reparse-symbol indented_block_body) [21467 21519])
                            ("self" variable nil (reparse-symbol indented_block_body) [21528 21594])
                            ("self" variable nil (reparse-symbol indented_block_body) [21604 21653])
                            ("self" variable nil (reparse-symbol indented_block_body) [21662 21711])
                            ("self" variable nil (reparse-symbol indented_block_body) [21721 21758])
                            ("self" variable nil (reparse-symbol indented_block_body) [21767 21797])
                            ("super" code nil (reparse-symbol indented_block_body) [21806 21851]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20169 20173])
                            ("nb_filter" variable nil (reparse-symbol function_parameters) [20175 20184])
                            ("kernel_dim1" variable nil (reparse-symbol function_parameters) [20186 20197])
                            ("kernel_dim2" variable nil (reparse-symbol function_parameters) [20199 20210])
                            ("kernel_dim3" variable nil (reparse-symbol function_parameters) [20212 20223])
                            ("init" variable nil (reparse-symbol function_parameters) [20242 20246])
                            ("activation" variable nil (reparse-symbol function_parameters) [20265 20275])
                            ("weights" variable nil (reparse-symbol function_parameters) [20286 20293])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [20317 20328])
                            ("subsample" variable nil (reparse-symbol function_parameters) [20338 20347])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [20359 20371])
                            ("W_regularizer" variable nil (reparse-symbol function_parameters) [20395 20408])
                            ("b_regularizer" variable nil (reparse-symbol function_parameters) [20415 20428])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [20435 20455])
                            ("W_constraint" variable nil (reparse-symbol function_parameters) [20479 20491])
                            ("b_constraint" variable nil (reparse-symbol function_parameters) [20498 20510])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20517 20525]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20156 21852])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21867 21871])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [21873 21884]))                          )
                        (reparse-symbol indented_block_body) [21857 23505])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23535 23539])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [23541 23552]))                          )
                        (reparse-symbol indented_block_body) [23510 24725])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24739 24743])
                            ("x" variable nil (reparse-symbol function_parameters) [24745 24746])
                            ("mask" variable nil (reparse-symbol function_parameters) [24748 24752]))                          )
                        (reparse-symbol indented_block_body) [24730 25487])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25507 25511]))                          )
                        (reparse-symbol indented_block_body) [25492 26616]))                  
                :type "class")
                nil [17072 26616])
            ("_Pooling1D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Abstract class for different pooling 1D layers.
    '''" code nil (reparse-symbol indented_block_body) [26647 26705])
                    ("input_dim" variable nil (reparse-symbol indented_block_body) [26710 26723])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [26833 26875])
                            ("if" code nil (reparse-symbol indented_block_body) [26884 26936])
                            ("self" variable nil (reparse-symbol indented_block_body) [26944 26974])
                            ("self" variable nil (reparse-symbol indented_block_body) [26983 27003])
                            ("self" variable nil (reparse-symbol indented_block_body) [27012 27038])
                            ("self" variable nil (reparse-symbol indented_block_body) [27047 27080])
                            ("assert" code nil (reparse-symbol indented_block_body) [27089 27168])
                            ("self" variable nil (reparse-symbol indented_block_body) [27177 27207])
                            ("self" variable nil (reparse-symbol indented_block_body) [27216 27253]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26742 26746])
                            ("pool_length" variable nil (reparse-symbol function_parameters) [26748 26759])
                            ("stride" variable nil (reparse-symbol function_parameters) [26763 26769])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [26793 26804])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26814 26822]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26729 27254])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27284 27288])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [27290 27301]))                          )
                        (reparse-symbol indented_block_body) [27259 27497])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27524 27528])
                            ("back_end" variable nil (reparse-symbol function_parameters) [27530 27538])
                            ("inputs" variable nil (reparse-symbol function_parameters) [27540 27546])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [27548 27557])
                            ("strides" variable nil (reparse-symbol function_parameters) [27559 27566])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [27594 27605])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [27607 27619]))                          )
                        (reparse-symbol indented_block_body) [27502 27656])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27670 27674])
                            ("x" variable nil (reparse-symbol function_parameters) [27676 27677])
                            ("mask" variable nil (reparse-symbol function_parameters) [27679 27683]))                          )
                        (reparse-symbol indented_block_body) [27661 28192])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28212 28216]))                          )
                        (reparse-symbol indented_block_body) [28197 28491]))                  
                :type "class")
                nil [26618 28491])
            ("MaxPooling1D" type
               (:superclasses ("_Pooling1D")
                :members 
                  ( ("'''Max pooling operation for temporal data.

    # Input shape
        3D tensor with shape: `(samples, steps, features)`.

    # Output shape
        3D tensor with shape: `(samples, downsampled_steps, features)`.

    # Arguments
        pool_length: factor by which to downscale. 2 will halve the input.
        stride: integer or None. Stride value.
        border_mode: 'valid' or 'same'.
            Note: 'same' will only work with TensorFlow for the time being.
    '''" code nil (reparse-symbol indented_block_body) [28529 29006])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [29116 29237]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29025 29029])
                            ("pool_length" variable nil (reparse-symbol function_parameters) [29031 29042])
                            ("stride" variable nil (reparse-symbol function_parameters) [29046 29052])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [29076 29087])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29097 29105]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29012 29238])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29265 29269])
                            ("inputs" variable nil (reparse-symbol function_parameters) [29271 29277])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [29279 29288])
                            ("strides" variable nil (reparse-symbol function_parameters) [29290 29297])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [29325 29336])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [29338 29350]))                          )
                        (reparse-symbol indented_block_body) [29243 29499]))                  
                :type "class")
                nil [28493 29499])
            ("AveragePooling1D" type
               (:superclasses ("_Pooling1D")
                :members 
                  ( ("'''Average pooling for temporal data.

    # Arguments
        pool_length: factor by which to downscale. 2 will halve the input.
        stride: integer or None. Stride value.
        border_mode: 'valid' or 'same'.
            Note: 'same' will only work with TensorFlow for the time being.

    # Input shape
        3D tensor with shape: `(samples, steps, features)`.

    # Output shape
        3D tensor with shape: `(samples, downsampled_steps, features)`.
    '''" code nil (reparse-symbol indented_block_body) [29541 30012])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [30122 30251]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30031 30035])
                            ("pool_length" variable nil (reparse-symbol function_parameters) [30037 30048])
                            ("stride" variable nil (reparse-symbol function_parameters) [30052 30058])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [30082 30093])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30103 30111]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30018 30252])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30279 30283])
                            ("inputs" variable nil (reparse-symbol function_parameters) [30285 30291])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [30293 30302])
                            ("strides" variable nil (reparse-symbol function_parameters) [30304 30311])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [30339 30350])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [30352 30364]))                          )
                        (reparse-symbol indented_block_body) [30257 30513]))                  
                :type "class")
                nil [29501 30513])
            ("_Pooling2D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Abstract class for different pooling 2D layers.
    '''" code nil (reparse-symbol indented_block_body) [30544 30602])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [30735 30777])
                            ("self" variable nil (reparse-symbol indented_block_body) [30786 30819])
                            ("if" code nil (reparse-symbol indented_block_body) [30828 30885])
                            ("self" variable nil (reparse-symbol indented_block_body) [30893 30922])
                            ("assert" code nil (reparse-symbol indented_block_body) [30931 31010])
                            ("self" variable nil (reparse-symbol indented_block_body) [31019 31049])
                            ("assert" code nil (reparse-symbol indented_block_body) [31058 31129])
                            ("self" variable nil (reparse-symbol indented_block_body) [31138 31170])
                            ("self" variable nil (reparse-symbol indented_block_body) [31179 31216]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30621 30625])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [30627 30636])
                            ("strides" variable nil (reparse-symbol function_parameters) [30645 30652])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [30659 30670])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [30697 30709])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30716 30724]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30608 31217])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31247 31251])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [31253 31264]))                          )
                        (reparse-symbol indented_block_body) [31222 32121])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32148 32152])
                            ("inputs" variable nil (reparse-symbol function_parameters) [32154 32160])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [32162 32171])
                            ("strides" variable nil (reparse-symbol function_parameters) [32173 32180])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [32208 32219])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [32221 32233]))                          )
                        (reparse-symbol indented_block_body) [32126 32270])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32284 32288])
                            ("x" variable nil (reparse-symbol function_parameters) [32290 32291])
                            ("mask" variable nil (reparse-symbol function_parameters) [32293 32297]))                          )
                        (reparse-symbol indented_block_body) [32275 32607])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32627 32631]))                          )
                        (reparse-symbol indented_block_body) [32612 32957]))                  
                :type "class")
                nil [30515 32957])
            ("MaxPooling2D" type
               (:superclasses ("_Pooling2D")
                :members 
                  ( ("'''Max pooling operation for spatial data.

    # Arguments
        pool_size: tuple of 2 integers,
            factors by which to downscale (vertical, horizontal).
            (2, 2) will halve the image in each dimension.
        strides: tuple of 2 integers, or None. Strides values.
        border_mode: 'valid' or 'same'.
            Note: 'same' will only work with TensorFlow for the time being.
        dim_ordering: 'th' or 'tf'. In 'th' mode, the channels dimension
            (the depth) is at index 1, in 'tf' mode is it at index 3.

    # Input shape
        4D tensor with shape:
        `(samples, channels, rows, cols)` if dim_ordering='th'
        or 4D tensor with shape:
        `(samples, rows, cols, channels)` if dim_ordering='tf'.

    # Output shape
        4D tensor with shape:
        `(nb_samples, channels, pooled_rows, pooled_cols)` if dim_ordering='th'
        or 4D tensor with shape:
        `(samples, pooled_rows, pooled_cols, channels)` if dim_ordering='tf'.
    '''" code nil (reparse-symbol indented_block_body) [32995 33999])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [34132 34266]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34018 34022])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [34024 34033])
                            ("strides" variable nil (reparse-symbol function_parameters) [34042 34049])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [34056 34067])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [34094 34106])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34113 34121]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34005 34267])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34294 34298])
                            ("inputs" variable nil (reparse-symbol function_parameters) [34300 34306])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [34308 34317])
                            ("strides" variable nil (reparse-symbol function_parameters) [34319 34326])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [34354 34365])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [34367 34379]))                          )
                        (reparse-symbol indented_block_body) [34272 34528]))                  
                :type "class")
                nil [32959 34528])
            ("AveragePooling2D" type
               (:superclasses ("_Pooling2D")
                :members 
                  ( ("'''Average pooling operation for spatial data.

    # Arguments
        pool_size: tuple of 2 integers,
            factors by which to downscale (vertical, horizontal).
            (2, 2) will halve the image in each dimension.
        strides: tuple of 2 integers, or None. Strides values.
        border_mode: 'valid' or 'same'.
            Note: 'same' will only work with TensorFlow for the time being.
        dim_ordering: 'th' or 'tf'. In 'th' mode, the channels dimension
            (the depth) is at index 1, in 'tf' mode is it at index 3.

    # Input shape
        4D tensor with shape:
        `(samples, channels, rows, cols)` if dim_ordering='th'
        or 4D tensor with shape:
        `(samples, rows, cols, channels)` if dim_ordering='tf'.

    # Output shape
        4D tensor with shape:
        `(nb_samples, channels, pooled_rows, pooled_cols)` if dim_ordering='th'
        or 4D tensor with shape:
        `(samples, pooled_rows, pooled_cols, channels)` if dim_ordering='tf'.
    '''" code nil (reparse-symbol indented_block_body) [34570 35578])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [35711 35853]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35597 35601])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [35603 35612])
                            ("strides" variable nil (reparse-symbol function_parameters) [35621 35628])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [35635 35646])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [35673 35685])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35692 35700]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35584 35854])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35881 35885])
                            ("inputs" variable nil (reparse-symbol function_parameters) [35887 35893])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [35895 35904])
                            ("strides" variable nil (reparse-symbol function_parameters) [35906 35913])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [35941 35952])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [35954 35966]))                          )
                        (reparse-symbol indented_block_body) [35859 36115]))                  
                :type "class")
                nil [34530 36115])
            ("_Pooling3D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Abstract class for different pooling 3D layers.
    '''" code nil (reparse-symbol indented_block_body) [36146 36204])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [36340 36382])
                            ("self" variable nil (reparse-symbol indented_block_body) [36391 36424])
                            ("if" code nil (reparse-symbol indented_block_body) [36433 36490])
                            ("self" variable nil (reparse-symbol indented_block_body) [36498 36527])
                            ("assert" code nil (reparse-symbol indented_block_body) [36536 36615])
                            ("self" variable nil (reparse-symbol indented_block_body) [36624 36654])
                            ("assert" code nil (reparse-symbol indented_block_body) [36663 36734])
                            ("self" variable nil (reparse-symbol indented_block_body) [36743 36775])
                            ("self" variable nil (reparse-symbol indented_block_body) [36784 36821]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36223 36227])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [36229 36238])
                            ("strides" variable nil (reparse-symbol function_parameters) [36250 36257])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [36264 36275])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [36302 36314])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36321 36329]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36210 36822])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36852 36856])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [36858 36869]))                          )
                        (reparse-symbol indented_block_body) [36827 38018])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38045 38049])
                            ("inputs" variable nil (reparse-symbol function_parameters) [38051 38057])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [38059 38068])
                            ("strides" variable nil (reparse-symbol function_parameters) [38070 38077])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [38105 38116])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [38118 38130]))                          )
                        (reparse-symbol indented_block_body) [38023 38167])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38181 38185])
                            ("x" variable nil (reparse-symbol function_parameters) [38187 38188])
                            ("mask" variable nil (reparse-symbol function_parameters) [38190 38194]))                          )
                        (reparse-symbol indented_block_body) [38172 38504])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38524 38528]))                          )
                        (reparse-symbol indented_block_body) [38509 38854]))                  
                :type "class")
                nil [36117 38854])
            ("MaxPooling3D" type
               (:superclasses ("_Pooling3D")
                :members 
                  ( ("'''Max pooling operation for 3D data (spatial or spatio-temporal).

    Note: this layer will only work with Theano for the time being.

    # Arguments
        pool_size: tuple of 3 integers,
            factors by which to downscale (dim1, dim2, dim3).
            (2, 2, 2) will halve the size of the 3D input in each dimension.
        strides: tuple of 3 integers, or None. Strides values.
        border_mode: 'valid' or 'same'.
        dim_ordering: 'th' or 'tf'. In 'th' mode, the channels dimension
            (the depth) is at index 1, in 'tf' mode is it at index 4.

    # Input shape
        5D tensor with shape:
        `(samples, channels, len_pool_dim1, len_pool_dim2, len_pool_dim3)` if dim_ordering='th'
        or 5D tensor with shape:
        `(samples, len_pool_dim1, len_pool_dim2, len_pool_dim3, channels)` if dim_ordering='tf'.

    # Output shape
        5D tensor with shape:
        `(nb_samples, channels, pooled_dim1, pooled_dim2, pooled_dim3)` if dim_ordering='th'
        or 5D tensor with shape:
        `(samples, pooled_dim1, pooled_dim2, pooled_dim3, channels)` if dim_ordering='tf'.
    '''" code nil (reparse-symbol indented_block_body) [38892 40019])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [40155 40315])
                            ("super" code nil (reparse-symbol indented_block_body) [40323 40457]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40038 40042])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [40044 40053])
                            ("strides" variable nil (reparse-symbol function_parameters) [40065 40072])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [40079 40090])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [40117 40129])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40136 40144]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40025 40458])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40485 40489])
                            ("inputs" variable nil (reparse-symbol function_parameters) [40491 40497])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [40499 40508])
                            ("strides" variable nil (reparse-symbol function_parameters) [40510 40517])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [40545 40556])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [40558 40570]))                          )
                        (reparse-symbol indented_block_body) [40463 40719]))                  
                :type "class")
                nil [38856 40719])
            ("AveragePooling3D" type
               (:superclasses ("_Pooling3D")
                :members 
                  ( ("'''Average pooling operation for 3D data (spatial or spatio-temporal).

    Note: this layer will only work with Theano for the time being.

    # Arguments
        pool_size: tuple of 3 integers,
            factors by which to downscale (dim1, dim2, dim3).
            (2, 2, 2) will halve the size of the 3D input in each dimension.
        strides: tuple of 3 integers, or None. Strides values.
        border_mode: 'valid' or 'same'.
        dim_ordering: 'th' or 'tf'. In 'th' mode, the channels dimension
            (the depth) is at index 1, in 'tf' mode is it at index 4.

    # Input shape
        5D tensor with shape:
        `(samples, channels, len_pool_dim1, len_pool_dim2, len_pool_dim3)` if dim_ordering='th'
        or 5D tensor with shape:
        `(samples, len_pool_dim1, len_pool_dim2, len_pool_dim3, channels)` if dim_ordering='tf'.

    # Output shape
        5D tensor with shape:
        `(nb_samples, channels, pooled_dim1, pooled_dim2, pooled_dim3)` if dim_ordering='th'
        or 5D tensor with shape:
        `(samples, pooled_dim1, pooled_dim2, pooled_dim3, channels)` if dim_ordering='tf'.
    '''" code nil (reparse-symbol indented_block_body) [40761 41892])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [42028 42188])
                            ("super" code nil (reparse-symbol indented_block_body) [42196 42338]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41911 41915])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [41917 41926])
                            ("strides" variable nil (reparse-symbol function_parameters) [41938 41945])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [41952 41963])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [41990 42002])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42009 42017]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41898 42339])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42366 42370])
                            ("inputs" variable nil (reparse-symbol function_parameters) [42372 42378])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [42380 42389])
                            ("strides" variable nil (reparse-symbol function_parameters) [42391 42398])
                            ("border_mode" variable nil (reparse-symbol function_parameters) [42426 42437])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [42439 42451]))                          )
                        (reparse-symbol indented_block_body) [42344 42600]))                  
                :type "class")
                nil [40721 42600])
            ("UpSampling1D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Repeat each temporal step `length` times along the time axis.

    # Arguments
        length: integer. Upsampling factor.

    # Input shape
        3D tensor with shape: `(samples, steps, features)`.

    # Output shape
        3D tensor with shape: `(samples, upsampled_steps, features)`.
    '''" code nil (reparse-symbol indented_block_body) [42633 42935])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [42989 43009])
                            ("self" variable nil (reparse-symbol indented_block_body) [43018 43055])
                            ("super" code nil (reparse-symbol indented_block_body) [43064 43108]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42954 42958])
                            ("length" variable nil (reparse-symbol function_parameters) [42960 42966])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42970 42978]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42941 43109])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43139 43143])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [43145 43156]))                          )
                        (reparse-symbol indented_block_body) [43114 43237])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43251 43255])
                            ("x" variable nil (reparse-symbol function_parameters) [43257 43258])
                            ("mask" variable nil (reparse-symbol function_parameters) [43260 43264]))                          )
                        (reparse-symbol indented_block_body) [43242 43353])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43373 43377]))                          )
                        (reparse-symbol indented_block_body) [43358 43552]))                  
                :type "class")
                nil [42602 43552])
            ("UpSampling2D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Repeat the rows and columns of the data
    by size[0] and size[1] respectively.

    # Arguments
        size: tuple of 2 integers. The upsampling factors for rows and columns.
        dim_ordering: 'th' or 'tf'.
            In 'th' mode, the channels dimension (the depth)
            is at index 1, in 'tf' mode is it at index 3.

    # Input shape
        4D tensor with shape:
        `(samples, channels, rows, cols)` if dim_ordering='th'
        or 4D tensor with shape:
        `(samples, rows, cols, channels)` if dim_ordering='tf'.

    # Output shape
        4D tensor with shape:
        `(samples, channels, upsampled_rows, upsampled_cols)` if dim_ordering='th'
        or 4D tensor with shape:
        `(samples, upsampled_rows, upsampled_cols, channels)` if dim_ordering='tf'.
    '''" code nil (reparse-symbol indented_block_body) [43585 44387])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [44463 44486])
                            ("assert" code nil (reparse-symbol indented_block_body) [44495 44566])
                            ("self" variable nil (reparse-symbol indented_block_body) [44575 44607])
                            ("self" variable nil (reparse-symbol indented_block_body) [44616 44653])
                            ("super" code nil (reparse-symbol indented_block_body) [44662 44706]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44406 44410])
                            ("size" variable nil (reparse-symbol function_parameters) [44412 44416])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [44425 44437])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44444 44452]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44393 44707])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44737 44741])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [44743 44754]))                          )
                        (reparse-symbol indented_block_body) [44712 45271])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45285 45289])
                            ("x" variable nil (reparse-symbol function_parameters) [45291 45292])
                            ("mask" variable nil (reparse-symbol function_parameters) [45294 45298]))                          )
                        (reparse-symbol indented_block_body) [45276 45418])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45438 45442]))                          )
                        (reparse-symbol indented_block_body) [45423 45613]))                  
                :type "class")
                nil [43554 45613])
            ("UpSampling3D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Repeat the first, second and third dimension of the data
    by size[0], size[1] and size[2] respectively.

    Note: this layer will only work with Theano for the time being.

    # Arguments
        size: tuple of 3 integers. The upsampling factors for dim1, dim2 and dim3.
        dim_ordering: 'th' or 'tf'.
            In 'th' mode, the channels dimension (the depth)
            is at index 1, in 'tf' mode is it at index 4.

    # Input shape
        5D tensor with shape:
        `(samples, channels, dim1, dim2, dim3)` if dim_ordering='th'
        or 5D tensor with shape:
        `(samples, dim1, dim2, dim3, channels)` if dim_ordering='tf'.

    # Output shape
        5D tensor with shape:
        `(samples, channels, upsampled_dim1, upsampled_dim2, upsampled_dim3)` if dim_ordering='th'
        or 5D tensor with shape:
        `(samples, upsampled_dim1, upsampled_dim2, upsampled_dim3, channels)` if dim_ordering='tf'.
    '''" code nil (reparse-symbol indented_block_body) [45646 46590])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [46669 46830])
                            ("self" variable nil (reparse-symbol indented_block_body) [46838 46861])
                            ("assert" code nil (reparse-symbol indented_block_body) [46870 46941])
                            ("self" variable nil (reparse-symbol indented_block_body) [46950 46982])
                            ("self" variable nil (reparse-symbol indented_block_body) [46991 47028])
                            ("super" code nil (reparse-symbol indented_block_body) [47037 47081]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46609 46613])
                            ("size" variable nil (reparse-symbol function_parameters) [46615 46619])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [46631 46643])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [46650 46658]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46596 47082])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47112 47116])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [47118 47129]))                          )
                        (reparse-symbol indented_block_body) [47087 47748])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47762 47766])
                            ("x" variable nil (reparse-symbol function_parameters) [47768 47769])
                            ("mask" variable nil (reparse-symbol function_parameters) [47771 47775]))                          )
                        (reparse-symbol indented_block_body) [47753 47911])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47931 47935]))                          )
                        (reparse-symbol indented_block_body) [47916 48106]))                  
                :type "class")
                nil [45615 48106])
            ("ZeroPadding1D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Zero-padding layer for 1D input (e.g. temporal sequence).

    # Arguments
        padding: int
            How many zeros to add at the beginning and end of
            the padding dimension (axis 1).

    # Input shape
        3D tensor with shape (samples, axis_to_pad, features)

    # Output shape
        3D tensor with shape (samples, padded_axis, features)
    '''" code nil (reparse-symbol indented_block_body) [48140 48515])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [48570 48615])
                            ("self" variable nil (reparse-symbol indented_block_body) [48624 48646])
                            ("self" variable nil (reparse-symbol indented_block_body) [48655 48692]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48534 48538])
                            ("padding" variable nil (reparse-symbol function_parameters) [48540 48547])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48551 48559]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48521 48693])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48723 48727])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [48729 48740]))                          )
                        (reparse-symbol indented_block_body) [48698 48922])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48936 48940])
                            ("x" variable nil (reparse-symbol function_parameters) [48942 48943])
                            ("mask" variable nil (reparse-symbol function_parameters) [48945 48949]))                          )
                        (reparse-symbol indented_block_body) [48927 49016])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49036 49040]))                          )
                        (reparse-symbol indented_block_body) [49021 49218]))                  
                :type "class")
                nil [48108 49218])
            ("ZeroPadding2D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Zero-padding layer for 2D input (e.g. picture).

    # Arguments
        padding: tuple of int (length 2)
            How many zeros to add at the beginning and end of
            the 2 padding dimensions (axis 3 and 4).

    # Input shape
        4D tensor with shape:
        (samples, depth, first_axis_to_pad, second_axis_to_pad)

    # Output shape
        4D tensor with shape:
        (samples, depth, first_padded_axis, second_padded_axis)
    '''" code nil (reparse-symbol indented_block_body) [49252 49710])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [49789 49834])
                            ("self" variable nil (reparse-symbol indented_block_body) [49843 49872])
                            ("assert" code nil (reparse-symbol indented_block_body) [49881 49952])
                            ("self" variable nil (reparse-symbol indented_block_body) [49961 49993])
                            ("self" variable nil (reparse-symbol indented_block_body) [50002 50039]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49729 49733])
                            ("padding" variable nil (reparse-symbol function_parameters) [49735 49742])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [49751 49763])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49770 49778]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49716 50040])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50070 50074])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [50076 50087]))                          )
                        (reparse-symbol indented_block_body) [50045 50900])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50914 50918])
                            ("x" variable nil (reparse-symbol function_parameters) [50920 50921])
                            ("mask" variable nil (reparse-symbol function_parameters) [50923 50927]))                          )
                        (reparse-symbol indented_block_body) [50905 51064])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51084 51088]))                          )
                        (reparse-symbol indented_block_body) [51069 51266]))                  
                :type "class")
                nil [49220 51266])
            ("ZeroPadding3D" type
               (:superclasses ("Layer")
                :members 
                  ( ("'''Zero-padding layer for 3D data (spatial or spatio-temporal).

    Note: this layer will only work with Theano for the time being.

    # Arguments
        padding: tuple of int (length 3)
            How many zeros to add at the beginning and end of
            the 3 padding dimensions (axis 3, 4 and 5).

    # Input shape
        5D tensor with shape:
        (samples, depth, first_axis_to_pad, second_axis_to_pad, third_axis_to_pad)

    # Output shape
        5D tensor with shape:
        (samples, depth, first_padded_axis, second_padded_axis, third_axis_to_pad)
    '''" code nil (reparse-symbol indented_block_body) [51300 51881])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [51963 52123])
                            ("super" code nil (reparse-symbol indented_block_body) [52131 52176])
                            ("self" variable nil (reparse-symbol indented_block_body) [52185 52214])
                            ("assert" code nil (reparse-symbol indented_block_body) [52223 52294])
                            ("self" variable nil (reparse-symbol indented_block_body) [52303 52335])
                            ("self" variable nil (reparse-symbol indented_block_body) [52344 52381]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51900 51904])
                            ("padding" variable nil (reparse-symbol function_parameters) [51906 51913])
                            ("dim_ordering" variable nil (reparse-symbol function_parameters) [51925 51937])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51944 51952]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51887 52382])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52412 52416])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [52418 52429]))                          )
                        (reparse-symbol indented_block_body) [52387 53474])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53488 53492])
                            ("x" variable nil (reparse-symbol function_parameters) [53494 53495])
                            ("mask" variable nil (reparse-symbol function_parameters) [53497 53501]))                          )
                        (reparse-symbol indented_block_body) [53479 53638])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53658 53662]))                          )
                        (reparse-symbol indented_block_body) [53643 53840]))                  
                :type "class")
                nil [51268 53840]))          
      :file "convolutional.py"
      :pointmax 53840
      :fsize 53839
      :lastmodtime '(22285 16886 0 0)
      :unmatched-syntax '((NAME 53152 . 53156) (IF 53196 . 53198) (ELSE 53226 . 53230) (NAME 53056 . 53060) (IF 53100 . 53102) (ELSE 53130 . 53134) (NAME 52960 . 52964) (IF 53004 . 53006) (ELSE 53034 . 53038) (NAME 52674 . 52678) (IF 52718 . 52720) (ELSE 52748 . 52752) (NAME 52578 . 52582) (IF 52622 . 52624) (ELSE 52652 . 52656) (NAME 52482 . 52486) (IF 52526 . 52528) (ELSE 52556 . 52560) (NAME 50599 . 50605) (IF 50645 . 50647) (ELSE 50675 . 50679) (NAME 50502 . 50507) (IF 50547 . 50549) (ELSE 50577 . 50581) (NAME 50237 . 50243) (IF 50283 . 50285) (ELSE 50313 . 50317) (NAME 50140 . 50145) (IF 50185 . 50187) (ELSE 50215 . 50219) (NAME 48751 . 48757) (IF 48794 . 48796) (ELSE 48824 . 48828) (PERIOD 170 . 171) (FROM 164 . 168) (PERIOD 169 . 170) (PERIOD 99 . 100) (FROM 93 . 97) (PERIOD 98 . 99) (PERIOD 71 . 72) (FROM 65 . 69) (PERIOD 70 . 71) (PERIOD 170 . 171) (FROM 164 . 168) (PERIOD 169 . 170) (PERIOD 99 . 100) (FROM 93 . 97) (PERIOD 98 . 99) (PERIOD 71 . 72) (FROM 65 . 69) (PERIOD 70 . 71))))
  :file "!Users!xiaoli!anaconda!lib!python2.7!site-packages!keras!layers!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
