;; Object robotics/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "robotics/"
  :tables
  (list
    (semanticdb-table "fetch_env.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("gym.envs.robotics" include nil nil [21 78])
            ("goal_distance" function (:arguments 
              ( ("goal_a" variable nil (reparse-symbol function_parameters) [99 105])
                ("goal_b" variable nil (reparse-symbol function_parameters) [107 113]))              ) nil [81 208])
            ("FetchEnv" type
               (:documentation "Superclass for all Fetch environments.
    "
                :superclasses ("robot_env.RobotEnv")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initializes a new Fetch environment.

        Args:
            model_path (string): path to the environments XML file
            n_substeps (int): number of substeps the simulation runs on every call to step
            gripper_extra_height (float): additional height above the table when positioning the gripper
            block_gripper (boolean): whether or not the gripper is blocked (i.e. not movable) or not
            has_object (boolean): whether or not the environment has an object
            target_in_the_air (boolean): whether or not the target should be in the air above the table or on the table surface
            target_offset (float or array with 3 elements): offset of the target
            obj_range (float): range of a uniform distribution for sampling initial object positions
            target_range (float): range of a uniform distribution for sampling a target
            distance_threshold (float): the threshold after which a goal is considered achieved
            initial_qpos (dict): a dictionary of joint names and values that define the initial configuration
            reward_type ('sparse' or 'dense'): the reward type, i.e. sparse or dense
        \"\"\"" code nil (reparse-symbol indented_block_body) [543 1741])
                            ("self" variable nil (reparse-symbol indented_block_body) [1750 1798])
                            ("self" variable nil (reparse-symbol indented_block_body) [1807 1841])
                            ("self" variable nil (reparse-symbol indented_block_body) [1850 1878])
                            ("self" variable nil (reparse-symbol indented_block_body) [1887 1929])
                            ("self" variable nil (reparse-symbol indented_block_body) [1938 1972])
                            ("self" variable nil (reparse-symbol indented_block_body) [1981 2007])
                            ("self" variable nil (reparse-symbol indented_block_body) [2016 2048])
                            ("self" variable nil (reparse-symbol indented_block_body) [2057 2101])
                            ("self" variable nil (reparse-symbol indented_block_body) [2110 2140])
                            ("super" code nil (reparse-symbol indented_block_body) [2150 2291]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [327 331])
                            ("model_path" variable nil (reparse-symbol function_parameters) [333 343])
                            ("n_substeps" variable nil (reparse-symbol function_parameters) [345 355])
                            ("gripper_extra_height" variable nil (reparse-symbol function_parameters) [357 377])
                            ("block_gripper" variable nil (reparse-symbol function_parameters) [379 392])
                            ("has_object" variable nil (reparse-symbol function_parameters) [402 412])
                            ("target_in_the_air" variable nil (reparse-symbol function_parameters) [414 431])
                            ("target_offset" variable nil (reparse-symbol function_parameters) [433 446])
                            ("obj_range" variable nil (reparse-symbol function_parameters) [448 457])
                            ("target_range" variable nil (reparse-symbol function_parameters) [459 471])
                            ("distance_threshold" variable nil (reparse-symbol function_parameters) [481 499])
                            ("initial_qpos" variable nil (reparse-symbol function_parameters) [501 513])
                            ("reward_type" variable nil (reparse-symbol function_parameters) [515 526]))                          
                        :documentation "Initializes a new Fetch environment.

        Args:
            model_path (string): path to the environments XML file
            n_substeps (int): number of substeps the simulation runs on every call to step
            gripper_extra_height (float): additional height above the table when positioning the gripper
            block_gripper (boolean): whether or not the gripper is blocked (i.e. not movable) or not
            has_object (boolean): whether or not the environment has an object
            target_in_the_air (boolean): whether or not the target should be in the air above the table or on the table surface
            target_offset (float or array with 3 elements): offset of the target
            obj_range (float): range of a uniform distribution for sampling initial object positions
            target_range (float): range of a uniform distribution for sampling a target
            distance_threshold (float): the threshold after which a goal is considered achieved
            initial_qpos (dict): a dictionary of joint names and values that define the initial configuration
            reward_type ('sparse' or 'dense'): the reward type, i.e. sparse or dense
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [305 2292])
                    ("compute_reward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2374 2378])
                            ("achieved_goal" variable nil (reparse-symbol function_parameters) [2380 2393])
                            ("goal" variable nil (reparse-symbol function_parameters) [2395 2399])
                            ("info" variable nil (reparse-symbol function_parameters) [2401 2405]))                          )
                        (reparse-symbol indented_block_body) [2355 2664])
                    ("_step_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2747 2751]))                          )
                        (reparse-symbol indented_block_body) [2728 2972])
                    ("_set_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2993 2997])
                            ("action" variable nil (reparse-symbol function_parameters) [2999 3005]))                          )
                        (reparse-symbol indented_block_body) [2977 3751])
                    ("_get_obs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3769 3773]))                          )
                        (reparse-symbol indented_block_body) [3756 5317])
                    ("_viewer_setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5340 5344]))                          )
                        (reparse-symbol indented_block_body) [5322 5678])
                    ("_render_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5704 5708]))                          )
                        (reparse-symbol indented_block_body) [5683 5976])
                    ("_reset_sim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5996 6000]))                          )
                        (reparse-symbol indented_block_body) [5981 6670])
                    ("_sample_goal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6692 6696]))                          )
                        (reparse-symbol indented_block_body) [6675 7197])
                    ("_is_success" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7218 7222])
                            ("achieved_goal" variable nil (reparse-symbol function_parameters) [7224 7237])
                            ("desired_goal" variable nil (reparse-symbol function_parameters) [7239 7251]))                          )
                        (reparse-symbol indented_block_body) [7202 7373])
                    ("_env_setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7393 7397])
                            ("initial_qpos" variable nil (reparse-symbol function_parameters) [7399 7411]))                          )
                        (reparse-symbol indented_block_body) [7378 8251]))                  
                :type "class")
                nil [210 8251]))          
      :file "fetch_env.py"
      :pointmax 8251
      :fsize 8250
      :lastmodtime '(23188 14174 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "utils.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("gym" include nil nil [21 42])
            ("robot_get_obs" function
               (:documentation "Returns all joint positions and velocities associated with
    a robot.
    "
                :arguments 
                  ( ("sim" variable nil (reparse-symbol function_parameters) [293 296]))                  )
                nil [275 731])
            ("ctrl_set_action" function
               (:documentation "For torque actuators it copies the action into mujoco ctrl field.
    For position actuators it sets the target relative to the current qpos.
    "
                :arguments 
                  ( ("sim" variable nil (reparse-symbol function_parameters) [753 756])
                    ("action" variable nil (reparse-symbol function_parameters) [758 764]))                  )
                nil [733 1348])
            ("mocap_set_action" function
               (:documentation "The action controls the robot using mocaps. Specifically, bodies
    on the robot (for example the gripper wrist) is controlled with
    mocap bodies. In this case the action is the desired difference
    in position and orientation (quaternion), in world coordinates,
    of the of the target body. The mocap is positioned relative to
    the target body according to the delta, and the MuJoCo equality
    constraint optimizer tries to center the welded body on the mocap.
    "
                :arguments 
                  ( ("sim" variable nil (reparse-symbol function_parameters) [1371 1374])
                    ("action" variable nil (reparse-symbol function_parameters) [1376 1382]))                  )
                nil [1350 2255])
            ("reset_mocap_welds" function
               (:documentation "Resets the mocap welds that we use for actuation.
    "
                :arguments 
                  ( ("sim" variable nil (reparse-symbol function_parameters) [2279 2282]))                  )
                nil [2257 2649])
            ("reset_mocap2body_xpos" function
               (:documentation "Resets the position and orientation of the mocap bodies to the same
    values as the bodies they're welded to.
    "
                :arguments 
                  ( ("sim" variable nil (reparse-symbol function_parameters) [2677 2680]))                  )
                nil [2651 3694]))          
      :file "utils.py"
      :pointmax 3694
      :fsize 3693
      :lastmodtime '(23188 14174 0 0)
      :unmatched-syntax '((INDENT_BLOCK 94 . 273) (COLON 92 . 93) (TRY 43 . 46) (AS 88 . 90)))
    (semanticdb-table "robot_env.py"
      :major-mode 'python-mode
      :tags 
        '( ("os" include nil nil [1 10])
            ("copy" include nil nil [11 22])
            ("numpy" include nil nil [23 41])
            ("gym" include nil nil [43 53])
            ("gym" include nil nil [54 83])
            ("gym.utils" include nil nil [84 113])
            ("RobotEnv" type
               (:superclasses ("gym.GoalEnv")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [457 621])
                            ("if" code nil (reparse-symbol indented_block_body) [629 731])
                            ("model" variable nil (reparse-symbol indented_block_body) [740 788])
                            ("self" variable nil (reparse-symbol indented_block_body) [797 852])
                            ("self" variable nil (reparse-symbol indented_block_body) [861 879])
                            ("self" variable nil (reparse-symbol indented_block_body) [889 1036])
                            ("self" code nil (reparse-symbol indented_block_body) [1046 1057])
                            ("self" code nil (reparse-symbol indented_block_body) [1066 1108])
                            ("self" variable nil (reparse-symbol indented_block_body) [1117 1173])
                            ("self" variable nil (reparse-symbol indented_block_body) [1183 1214])
                            ("obs" variable nil (reparse-symbol indented_block_body) [1223 1244])
                            ("self" variable nil (reparse-symbol indented_block_body) [1253 1329])
                            ("self" variable nil (reparse-symbol indented_block_body) [1338 1704]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [393 397])
                            ("model_path" variable nil (reparse-symbol function_parameters) [399 409])
                            ("initial_qpos" variable nil (reparse-symbol function_parameters) [411 423])
                            ("n_actions" variable nil (reparse-symbol function_parameters) [425 434])
                            ("n_substeps" variable nil (reparse-symbol function_parameters) [436 446]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [380 1705])
                    ("dt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1731 1735]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1710 1802])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1870 1874])
                            ("seed" variable nil (reparse-symbol function_parameters) [1876 1880]))                          )
                        (reparse-symbol indented_block_body) [1861 1965])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1979 1983])
                            ("action" variable nil (reparse-symbol function_parameters) [1985 1991]))                          )
                        (reparse-symbol indented_block_body) [1970 2432])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2447 2451]))                          )
                        (reparse-symbol indented_block_body) [2437 3056])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3071 3075]))                          )
                        (reparse-symbol indented_block_body) [3061 3178])
                    ("render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3194 3198])
                            ("mode" variable nil (reparse-symbol function_parameters) [3200 3204]))                          )
                        (reparse-symbol indented_block_body) [3183 3646])
                    ("_get_viewer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3667 3671]))                          )
                        (reparse-symbol indented_block_body) [3651 3821])
                    ("_reset_sim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3901 3905]))                          
                        :documentation "Resets a simulation and indicates whether or not it was successful.
        If a reset was unsuccessful (e.g. if a randomized state caused an error in the
        simulation), this method should indicate such a failure by returning False.
        In such a case, this method will be called again to attempt a the reset again.
        ")
                        (reparse-symbol indented_block_body) [3886 4351])
                    ("_get_obs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4369 4373]))                          
                        :documentation "Returns the observation.
        ")
                        (reparse-symbol indented_block_body) [4356 4460])
                    ("_set_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4481 4485])
                            ("action" variable nil (reparse-symbol function_parameters) [4487 4493]))                          
                        :documentation "Applies the given action to the simulation.
        ")
                        (reparse-symbol indented_block_body) [4465 4599])
                    ("_is_success" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4620 4624])
                            ("achieved_goal" variable nil (reparse-symbol function_parameters) [4626 4639])
                            ("desired_goal" variable nil (reparse-symbol function_parameters) [4641 4653]))                          
                        :documentation "Indicates whether or not the achieved goal successfully achieved the desired goal.
        ")
                        (reparse-symbol indented_block_body) [4604 4798])
                    ("_sample_goal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4820 4824]))                          
                        :documentation "Samples a new goal and returns it.
        ")
                        (reparse-symbol indented_block_body) [4803 4921])
                    ("_env_setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4941 4945])
                            ("initial_qpos" variable nil (reparse-symbol function_parameters) [4947 4959]))                          
                        :documentation "Initial configuration of the environment. Can be used to configure initial state
        and extract information from the simulation.
        ")
                        (reparse-symbol indented_block_body) [4926 5132])
                    ("_viewer_setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5155 5159]))                          
                        :documentation "Initial configuration of the viewer. Can be used to set the camera position,
        for example.
        ")
                        (reparse-symbol indented_block_body) [5137 5296])
                    ("_render_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5322 5326]))                          
                        :documentation "A custom callback that is called before rendering. Can be used
        to implement custom visualizations.
        ")
                        (reparse-symbol indented_block_body) [5301 5472])
                    ("_step_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5496 5500]))                          
                        :documentation "A custom callback that is called after stepping the simulation. Can be used
        to enforce additional constraints on the simulation state.
        ")
                        (reparse-symbol indented_block_body) [5477 5682]))                  
                :type "class")
                nil [347 5682]))          
      :file "robot_env.py"
      :pointmax 5682
      :fsize 5681
      :lastmodtime '(23188 14174 0 0)
      :unmatched-syntax '((INDENT_BLOCK 166 . 345) (COLON 164 . 165) (TRY 115 . 118) (AS 160 . 162)))
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("gym.envs.robotics.fetch_env" include nil nil [1 49])
            ("gym.envs.robotics.fetch.slide" include nil nil [50 105])
            ("gym.envs.robotics.fetch.pick_and_place" include nil nil [106 177])
            ("gym.envs.robotics.fetch.push" include nil nil [178 231])
            ("gym.envs.robotics.fetch.reach" include nil nil [232 287])
            ("gym.envs.robotics.hand.reach" include nil nil [289 342])
            ("gym.envs.robotics.hand.manipulate" include nil nil [343 401])
            ("gym.envs.robotics.hand.manipulate" include nil nil [402 458])
            ("gym.envs.robotics.hand.manipulate" include nil nil [459 515]))          
      :file "__init__.py"
      :pointmax 516
      :fsize 515
      :lastmodtime '(23188 14174 0 0)
      :unmatched-syntax nil))
  :file "!Users!xiaoli!anaconda!lib!python3.6!site-packages!gym!envs!robotics!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
