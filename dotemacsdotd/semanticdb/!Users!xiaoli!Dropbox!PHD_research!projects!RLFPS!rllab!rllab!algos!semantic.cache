;; Object algos/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "algos/"
  :tables
  (list
    (semanticdb-table "batch_polopt.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("rllab.algos.base" include nil nil [20 60])
            ("rllab.sampler" include nil nil [61 103])
            ("rllab.sampler.base" include nil nil [104 142])
            ("rllab.misc" include nil nil [143 173])
            ("rllab.misc" include nil nil [174 209])
            ("rllab.algos" include nil nil [210 238])
            ("rllab.misc.logger" include nil nil [239 273])
            ("rllab.plotter" include nil nil [274 305])
            ("rllab.policies.base" include nil nil [306 344])
            ("BatchSampler" type
               (:superclasses ("Sampler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :type algo: BatchPolopt
        \"\"\"" code nil (reparse-symbol indented_block_body) [414 461])
                            ("self" variable nil (reparse-symbol indented_block_body) [470 486]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [393 397])
                            ("algo" variable nil (reparse-symbol function_parameters) [399 403]))                          
                        :documentation "
        :type algo: BatchPolopt
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [380 487])
                    ("start_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [509 513]))                          )
                        (reparse-symbol indented_block_body) [492 611])
                    ("shutdown_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [636 640]))                          )
                        (reparse-symbol indented_block_body) [616 706])
                    ("obtain_samples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [730 734])
                            ("itr" variable nil (reparse-symbol function_parameters) [736 739]))                          )
                        (reparse-symbol indented_block_body) [711 1229])
                    ("process_samples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1254 1258])
                            ("itr" variable nil (reparse-symbol function_parameters) [1260 1263])
                            ("paths" variable nil (reparse-symbol function_parameters) [1265 1270]))                          )
                        (reparse-symbol indented_block_body) [1234 6681]))                  
                :type "class")
                nil [347 6681])
            ("BatchPolopt" type
               (:documentation "
    Base class for batch sampling-based policy optimization methods.
    This includes various policy gradient methods like vpg, npg, ppo, trpo, etc.
    "
                :superclasses ("RLAlgorithm")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :param env: Environment
        :param policy: Policy
        :type policy: Policy
        :param baseline: Baseline
        :param scope: Scope for identifying the algorithm. Must be specified if running multiple algorithms
        simultaneously, each using different environments and policies
        :param n_itr: Number of iterations.
        :param start_itr: Starting iteration.
        :param batch_size: Number of samples per iteration.
        :param max_path_length: Maximum length of a single rollout.
        :param discount: Discount.
        :param gae_lambda: Lambda used for generalized advantage estimation.
        :param plot: Plot evaluation run after each iteration.
        :param pause_for_plot: Whether to pause before contiuing when plotting.
        :param center_adv: Whether to rescale the advantages so that they have mean 0 and standard deviation 1.
        :param positive_adv: Whether to shift the advantages so that they are always positive. When used in
        conjunction with center_adv the advantages will be standardized before shifting.
        :param store_paths: Whether to save all paths data to the snapshot.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7441 8618])
                            ("self" variable nil (reparse-symbol indented_block_body) [8627 8641])
                            ("self" variable nil (reparse-symbol indented_block_body) [8650 8670])
                            ("self" variable nil (reparse-symbol indented_block_body) [8679 8703])
                            ("self" variable nil (reparse-symbol indented_block_body) [8712 8730])
                            ("self" variable nil (reparse-symbol indented_block_body) [8739 8757])
                            ("self" variable nil (reparse-symbol indented_block_body) [8766 8794])
                            ("self" variable nil (reparse-symbol indented_block_body) [8803 8831])
                            ("self" variable nil (reparse-symbol indented_block_body) [8840 8878])
                            ("self" variable nil (reparse-symbol indented_block_body) [8887 8911])
                            ("self" variable nil (reparse-symbol indented_block_body) [8920 8948])
                            ("self" variable nil (reparse-symbol indented_block_body) [8957 8973])
                            ("self" variable nil (reparse-symbol indented_block_body) [8982 9018])
                            ("self" variable nil (reparse-symbol indented_block_body) [9027 9055])
                            ("self" variable nil (reparse-symbol indented_block_body) [9064 9096])
                            ("self" variable nil (reparse-symbol indented_block_body) [9105 9135])
                            ("self" variable nil (reparse-symbol indented_block_body) [9144 9174])
                            ("if" code nil (reparse-symbol indented_block_body) [9183 9246])
                            ("if" code nil (reparse-symbol indented_block_body) [9254 9313])
                            ("self" variable nil (reparse-symbol indented_block_body) [9322 9370]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6912 6916])
                            ("env" variable nil (reparse-symbol function_parameters) [6930 6933])
                            ("policy" variable nil (reparse-symbol function_parameters) [6947 6953])
                            ("baseline" variable nil (reparse-symbol function_parameters) [6967 6975])
                            ("scope" variable nil (reparse-symbol function_parameters) [6989 6994])
                            ("n_itr" variable nil (reparse-symbol function_parameters) [7013 7018])
                            ("start_itr" variable nil (reparse-symbol function_parameters) [7036 7045])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [7061 7071])
                            ("max_path_length" variable nil (reparse-symbol function_parameters) [7090 7105])
                            ("discount" variable nil (reparse-symbol function_parameters) [7123 7131])
                            ("gae_lambda" variable nil (reparse-symbol function_parameters) [7150 7160])
                            ("plot" variable nil (reparse-symbol function_parameters) [7176 7180])
                            ("pause_for_plot" variable nil (reparse-symbol function_parameters) [7200 7214])
                            ("center_adv" variable nil (reparse-symbol function_parameters) [7234 7244])
                            ("positive_adv" variable nil (reparse-symbol function_parameters) [7263 7275])
                            ("store_paths" variable nil (reparse-symbol function_parameters) [7295 7306])
                            ("whole_paths" variable nil (reparse-symbol function_parameters) [7326 7337])
                            ("sampler_cls" variable nil (reparse-symbol function_parameters) [7356 7367])
                            ("sampler_args" variable nil (reparse-symbol function_parameters) [7386 7398])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7417 7425]))                          
                        :documentation "
        :param env: Environment
        :param policy: Policy
        :type policy: Policy
        :param baseline: Baseline
        :param scope: Scope for identifying the algorithm. Must be specified if running multiple algorithms
        simultaneously, each using different environments and policies
        :param n_itr: Number of iterations.
        :param start_itr: Starting iteration.
        :param batch_size: Number of samples per iteration.
        :param max_path_length: Maximum length of a single rollout.
        :param discount: Discount.
        :param gae_lambda: Lambda used for generalized advantage estimation.
        :param plot: Plot evaluation run after each iteration.
        :param pause_for_plot: Whether to pause before contiuing when plotting.
        :param center_adv: Whether to rescale the advantages so that they have mean 0 and standard deviation 1.
        :param positive_adv: Whether to shift the advantages so that they are always positive. When used in
        conjunction with center_adv the advantages will be standardized before shifting.
        :param store_paths: Whether to save all paths data to the snapshot.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6886 9371])
                    ("start_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9401 9405]))                          )
                        (reparse-symbol indented_block_body) [9384 9519])
                    ("shutdown_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9544 9548]))                          )
                        (reparse-symbol indented_block_body) [9524 9590])
                    ("train" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9605 9609]))                          )
                        (reparse-symbol indented_block_body) [9595 10709])
                    ("log_diagnostics" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10734 10738])
                            ("paths" variable nil (reparse-symbol function_parameters) [10740 10745]))                          )
                        (reparse-symbol indented_block_body) [10714 10876])
                    ("init_opt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10894 10898]))                          
                        :documentation "
        Initialize the optimization procedure. If using theano / cgt, this may
        include declaring all the variables and compiling functions
        ")
                        (reparse-symbol indented_block_body) [10881 11106])
                    ("get_itr_snapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11132 11136])
                            ("itr" variable nil (reparse-symbol function_parameters) [11138 11141])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [11143 11155]))                          
                        :documentation "
        Returns all the data that should be saved in the snapshot for this
        iteration.
        ")
                        (reparse-symbol indented_block_body) [11111 11310])
                    ("optimize_policy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11335 11339])
                            ("itr" variable nil (reparse-symbol function_parameters) [11341 11344])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [11346 11358]))                          )
                        (reparse-symbol indented_block_body) [11315 11395])
                    ("update_plot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11416 11420]))                          )
                        (reparse-symbol indented_block_body) [11400 11512]))                  
                :type "class")
                nil [6683 11512]))          
      :file "batch_polopt.py"
      :pointmax 11512
      :fsize 11511
      :lastmodtime '(22646 45959 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "base.py"
      :file "base.py"
      :fsize 122
      :lastmodtime '(22555 31253 0 0))
    (semanticdb-table "cem.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.algos.base" include nil nil [1 41])
            ("numpy" include nil nil [43 61])
            ("rllab.misc.special" include nil nil [63 109])
            ("rllab.sampler" include nil nil [110 167])
            ("rllab.sampler.utils" include nil nil [168 207])
            ("rllab.core.serializable" include nil nil [208 256])
            ("rllab.misc.logger" include nil nil [257 291])
            ("rllab.plotter" include nil nil [292 323])
            ("_worker_rollout_policy" function (:arguments 
              ( ("G" variable nil (reparse-symbol function_parameters) [353 354])
                ("args" variable nil (reparse-symbol function_parameters) [356 360]))              ) nil [326 970])
            ("CEM" type
               (:superclasses ("RLAlgorithm" "Serializable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :param n_itr: Number of iterations.
        :param max_path_length: Maximum length of a single rollout.
        :param batch_size: # of samples from trajs from param distribution, when this
        is set, n_samples is ignored
        :param discount: Discount.
        :param plot: Plot evaluation run after each iteration.
        :param init_std: Initial std for param distribution
        :param extra_std: Decaying std added to param distribution at each iteration
        :param extra_decay_time: Iterations that it takes to decay extra std
        :param n_samples: #of samples from param distribution
        :param best_frac: Best fraction of the sampled params
        :return:
        \"\"\"" code nil (reparse-symbol indented_block_body) [1395 2106])
                            ("Serializable" code nil (reparse-symbol indented_block_body) [2115 2154])
                            ("self" variable nil (reparse-symbol indented_block_body) [2163 2177])
                            ("self" variable nil (reparse-symbol indented_block_body) [2186 2206])
                            ("self" variable nil (reparse-symbol indented_block_body) [2215 2243])
                            ("self" variable nil (reparse-symbol indented_block_body) [2252 2268])
                            ("self" variable nil (reparse-symbol indented_block_body) [2277 2317])
                            ("self" variable nil (reparse-symbol indented_block_body) [2326 2352])
                            ("self" variable nil (reparse-symbol indented_block_body) [2361 2387])
                            ("self" variable nil (reparse-symbol indented_block_body) [2396 2422])
                            ("self" variable nil (reparse-symbol indented_block_body) [2431 2455])
                            ("self" variable nil (reparse-symbol indented_block_body) [2464 2488])
                            ("self" variable nil (reparse-symbol indented_block_body) [2497 2535])
                            ("self" variable nil (reparse-symbol indented_block_body) [2544 2562]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1040 1044])
                            ("env" variable nil (reparse-symbol function_parameters) [1058 1061])
                            ("policy" variable nil (reparse-symbol function_parameters) [1075 1081])
                            ("n_itr" variable nil (reparse-symbol function_parameters) [1095 1100])
                            ("max_path_length" variable nil (reparse-symbol function_parameters) [1118 1133])
                            ("discount" variable nil (reparse-symbol function_parameters) [1151 1159])
                            ("init_std" variable nil (reparse-symbol function_parameters) [1178 1186])
                            ("n_samples" variable nil (reparse-symbol function_parameters) [1203 1212])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [1230 1240])
                            ("best_frac" variable nil (reparse-symbol function_parameters) [1259 1268])
                            ("extra_std" variable nil (reparse-symbol function_parameters) [1287 1296])
                            ("extra_decay_time" variable nil (reparse-symbol function_parameters) [1313 1329])
                            ("plot" variable nil (reparse-symbol function_parameters) [1347 1351])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1371 1379]))                          
                        :documentation "
        :param n_itr: Number of iterations.
        :param max_path_length: Maximum length of a single rollout.
        :param batch_size: # of samples from trajs from param distribution, when this
        is set, n_samples is ignored
        :param discount: Discount.
        :param plot: Plot evaluation run after each iteration.
        :param init_std: Initial std for param distribution
        :param extra_std: Decaying std added to param distribution at each iteration
        :param extra_decay_time: Iterations that it takes to decay extra std
        :param n_samples: #of samples from param distribution
        :param best_frac: Best fraction of the sampled params
        :return:
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1014 2563])
                    ("train" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2578 2582]))                          )
                        (reparse-symbol indented_block_body) [2568 5826]))                  
                :type "class")
                nil [972 5826]))          
      :file "cem.py"
      :pointmax 5826
      :fsize 5825
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cma_es.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.algos.base" include nil nil [1 41])
            ("theano.tensor" include nil nil [43 69])
            ("numpy" include nil nil [70 88])
            ("rllab.misc" include nil nil [90 116])
            ("rllab.misc.special" include nil nil [117 163])
            ("rllab.sampler" include nil nil [164 221])
            ("rllab.sampler.utils" include nil nil [222 261])
            ("rllab.core.serializable" include nil nil [262 310])
            ("rllab.misc.logger" include nil nil [311 345])
            ("rllab.plotter" include nil nil [346 377])
            ("cma_es_lib" include nil nil [378 395])
            ("sample_return" function (:arguments 
              ( ("G" variable nil (reparse-symbol function_parameters) [416 417])
                ("params" variable nil (reparse-symbol function_parameters) [419 425])
                ("max_path_length" variable nil (reparse-symbol function_parameters) [427 442])
                ("discount" variable nil (reparse-symbol function_parameters) [444 452]))              ) nil [398 851])
            ("CMAES" type
               (:superclasses ("RLAlgorithm" "Serializable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :param n_itr: Number of iterations.
        :param max_path_length: Maximum length of a single rollout.
        :param batch_size: # of samples from trajs from param distribution, when this
        is set, n_samples is ignored
        :param discount: Discount.
        :param plot: Plot evaluation run after each iteration.
        :param sigma0: Initial std for param dist
        :return:
        \"\"\"" code nil (reparse-symbol indented_block_body) [1162 1577])
                            ("Serializable" code nil (reparse-symbol indented_block_body) [1586 1625])
                            ("self" variable nil (reparse-symbol indented_block_body) [1634 1648])
                            ("self" variable nil (reparse-symbol indented_block_body) [1657 1677])
                            ("self" variable nil (reparse-symbol indented_block_body) [1686 1702])
                            ("self" variable nil (reparse-symbol indented_block_body) [1711 1731])
                            ("self" variable nil (reparse-symbol indented_block_body) [1740 1764])
                            ("self" variable nil (reparse-symbol indented_block_body) [1773 1811])
                            ("self" variable nil (reparse-symbol indented_block_body) [1820 1838])
                            ("self" variable nil (reparse-symbol indented_block_body) [1847 1875]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [924 928])
                            ("env" variable nil (reparse-symbol function_parameters) [942 945])
                            ("policy" variable nil (reparse-symbol function_parameters) [959 965])
                            ("n_itr" variable nil (reparse-symbol function_parameters) [979 984])
                            ("max_path_length" variable nil (reparse-symbol function_parameters) [1002 1017])
                            ("discount" variable nil (reparse-symbol function_parameters) [1035 1043])
                            ("sigma0" variable nil (reparse-symbol function_parameters) [1062 1068])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [1085 1095])
                            ("plot" variable nil (reparse-symbol function_parameters) [1114 1118])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1138 1146]))                          
                        :documentation "
        :param n_itr: Number of iterations.
        :param max_path_length: Maximum length of a single rollout.
        :param batch_size: # of samples from trajs from param distribution, when this
        is set, n_samples is ignored
        :param discount: Discount.
        :param plot: Plot evaluation run after each iteration.
        :param sigma0: Initial std for param dist
        :return:
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [898 1876])
                    ("train" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1891 1895]))                          )
                        (reparse-symbol indented_block_body) [1881 5753]))                  
                :type "class")
                nil [853 5753]))          
      :file "cma_es.py"
      :pointmax 5753
      :fsize 5752
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cma_es_lib.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Module cma implements the CMA-ES (Covariance Matrix Adaptation
Evolution Strategy).

CMA-ES is a stochastic optimizer for robust non-linear non-convex
derivative- and function-value-free numerical optimization.

This implementation can be used with Python versions >= 2.6, namely
2.6, 2.7, 3.3, 3.4.

CMA-ES searches for a minimizer (a solution x in :math:`R^n`) of an
objective function f (cost function), such that f(x) is minimal.
Regarding f, only a passably reliable ranking of the candidate
solutions in each iteration is necessary. Neither the function values
itself, nor the gradient of f need to be available or do matter (like
in the downhill simplex Nelder-Mead algorithm). Some termination
criteria however depend on actual f-values.

Two interfaces are provided:

  - function `fmin(func, x0, sigma0,...)`
        runs a complete minimization
        of the objective function func with CMA-ES.

  - class `CMAEvolutionStrategy`
      allows for minimization such that the control of the iteration
      loop remains with the user.


Used packages:

    - unavoidable: `numpy` (see `barecmaes2.py` if `numpy` is not
      available),
    - avoidable with small changes: `time`, `sys`
    - optional: `matplotlib.pyplot` (for `plot` etc., highly
      recommended), `pprint` (pretty print), `pickle` (in class
      `Sections`), `doctest`, `inspect`, `pygsl` (never by default)

Install
-------
The file ``cma.py`` only needs to be visible in the python path (e.g. in
the current working directory).

The preferred way of (system-wide) installation is calling

    pip install cma

from the command line.

The ``cma.py`` file can also be installed from the
system shell terminal command line by::

    python cma.py --install

which solely calls the ``setup`` function from the standard
``distutils.core`` package for installation. If the ``setup.py``
file is been provided with ``cma.py``, the standard call is

    python setup.py cma

Both calls need to see ``cma.py`` in the current working directory and
might need to be preceded with ``sudo``.

To upgrade the currently installed version from the Python Package Index,
and also for first time installation, type in the system shell::

    pip install --upgrade cma

Testing
-------
From the system shell::

    python cma.py --test

or from the Python shell ``ipython``::

    run cma.py --test

or from any python shell

    import cma
    cma.main('--test')

runs ``doctest.testmod(cma)`` showing only exceptions (and not the
tests that fail due to small differences in the output) and should
run without complaints in about between 20 and 100 seconds.

Example
-------
From a python shell::

    import cma
    help(cma)  # \"this\" help message, use cma? in ipython
    help(cma.fmin)
    help(cma.CMAEvolutionStrategy)
    help(cma.CMAOptions)
    cma.CMAOptions('tol')  # display 'tolerance' termination options
    cma.CMAOptions('verb') # display verbosity options
    res = cma.fmin(cma.Fcts.tablet, 15 * [1], 1)
    res[0]  # best evaluated solution
    res[5]  # mean solution, presumably better with noise

:See: `fmin()`, `CMAOptions`, `CMAEvolutionStrategy`

:Author: Nikolaus Hansen, 2008-2015
:Contributor: Petr Baudis, 2014

:License: BSD 3-Clause, see below.

\"\"\"" code nil nil [1 3251])
            ("__future__" include nil nil [14475 14506])
            ("__future__" include nil nil [14573 14610])
            ("__future__" include nil nil [14664 14701])
            ("__future__" include nil nil [14761 14799])
            ("__future__" include nil nil [14800 14839])
            ("sys" include nil nil [14968 14978])
            ("if" code nil nil [14979 15162])
            ("time" include nil nil [15163 15174])
            ("collections" include nil nil [15199 15217])
            ("numpy" include nil nil [15218 15236])
            ("numpy" include nil nil [15341 15415])
            ("try" code nil nil [15549 16189])
            ("__author__" variable nil nil [16190 16220])
            ("__version__" variable nil nil [16221 16316])
            ("__docformat__" variable nil nil [16500 16534])
            ("__all__" variable nil nil [16573 17701])
            ("use_archives" variable nil nil [17702 17721])
            ("\"\"\"speed up for very large population size. `use_archives` prevents the
need for an inverse gp-transformation, relies on collections module,
not sure what happens if set to ``False``. \"\"\"" code nil nil [17755 17942])
            ("MetaParameters" type
               (:documentation "meta parameters are either \"modifiable constants\" or refer to
    options from ``CMAOptions`` or are arguments to ``fmin`` or to the
    ``NoiseHandler`` class constructor.

    Details
    -------
    This code contains a single class instance `meta_parameters`

    Some interfaces rely on parameters being either `int` or
    `float` only. More sophisticated choices are implemented via
    ``choice_value = {1: 'this', 2: 'or that'}[int_param_value]`` here.

    CAVEAT
    ------
    ``meta_parameters`` should not be used to determine default
    arguments, because these are assigned only once and for all during
    module import.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [18661 18679])
                            ("self" variable nil (reparse-symbol indented_block_body) [18783 18803])
                            ("self" variable nil (reparse-symbol indented_block_body) [18831 18855])
                            ("self" variable nil (reparse-symbol indented_block_body) [18883 18908])
                            ("self" variable nil (reparse-symbol indented_block_body) [18954 18975])
                            ("self" variable nil (reparse-symbol indented_block_body) [19037 19061])
                            ("self" variable nil (reparse-symbol indented_block_body) [19089 19113])
                            ("self" variable nil (reparse-symbol indented_block_body) [19164 19186])
                            ("self" variable nil (reparse-symbol indented_block_body) [19212 19240])
                            ("self" variable nil (reparse-symbol indented_block_body) [19331 19359])
                            ("self" variable nil (reparse-symbol indented_block_body) [19420 19442])
                            ("self" variable nil (reparse-symbol indented_block_body) [19466 19489])
                            ("self" variable nil (reparse-symbol indented_block_body) [19513 19537])
                            ("self" variable nil (reparse-symbol indented_block_body) [19561 19583])
                            ("self" variable nil (reparse-symbol indented_block_body) [19611 19633])
                            ("self" variable nil (reparse-symbol indented_block_body) [19749 19775])
                            ("self" variable nil (reparse-symbol indented_block_body) [19862 19888])
                            ("self" variable nil (reparse-symbol indented_block_body) [19945 19965])
                            ("self" variable nil (reparse-symbol indented_block_body) [20008 20030])
                            ("self" variable nil (reparse-symbol indented_block_body) [20190 20227])
                            ("self" variable nil (reparse-symbol indented_block_body) [20260 20292])
                            ("self" variable nil (reparse-symbol indented_block_body) [20325 20349])
                            ("self" variable nil (reparse-symbol indented_block_body) [20432 20466])
                            ("self" variable nil (reparse-symbol indented_block_body) [20589 20618])
                            ("self" variable nil (reparse-symbol indented_block_body) [20640 20660])
                            ("self" variable nil (reparse-symbol indented_block_body) [20682 20715])
                            ("self" variable nil (reparse-symbol indented_block_body) [20784 20818])
                            ("self" variable nil (reparse-symbol indented_block_body) [20879 20907])
                            ("self" variable nil (reparse-symbol indented_block_body) [20957 20979])
                            ("self" variable nil (reparse-symbol indented_block_body) [21006 21033])
                            ("self" variable nil (reparse-symbol indented_block_body) [21054 21081])
                            ("self" code nil (reparse-symbol indented_block_body) [21102 21144])
                            ("self" variable nil (reparse-symbol indented_block_body) [21167 21194])
                            ("self" variable nil (reparse-symbol indented_block_body) [21367 21384])
                            ("self" variable nil (reparse-symbol indented_block_body) [21436 21462])
                            ("self" variable nil (reparse-symbol indented_block_body) [21492 21513])
                            ("self" variable nil (reparse-symbol indented_block_body) [21584 21613])
                            ("self" variable nil (reparse-symbol indented_block_body) [21642 21658])
                            ("self" variable nil (reparse-symbol indented_block_body) [21752 21769])
                            ("self" variable nil (reparse-symbol indented_block_body) [21874 21892])
                            ("self" variable nil (reparse-symbol indented_block_body) [21980 22000])
                            ("self" variable nil (reparse-symbol indented_block_body) [22221 22243])
                            ("self" variable nil (reparse-symbol indented_block_body) [22392 22409])
                            ("self" variable nil (reparse-symbol indented_block_body) [22491 22510])
                            ("self" variable nil (reparse-symbol indented_block_body) [22611 22634])
                            ("self" variable nil (reparse-symbol indented_block_body) [22729 22764]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18646 18650]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18633 22889]))                  
                :type "class")
                nil [17944 22889])
            ("meta_parameters" variable nil nil [23280 23314])
            ("rglen" function
               (:documentation "shortcut for the iterator ``xrange(len(ar))``"
                :arguments 
                  ( ("ar" variable nil (reparse-symbol function_parameters) [23972 23974]))                  )
                nil [23962 24060])
            ("is_feasible" function
               (:documentation "default to check feasibility, see also ``cma_default_options``"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [24077 24078])
                    ("f" variable nil (reparse-symbol function_parameters) [24080 24081]))                  )
                nil [24061 24202])
            ("global_verbosity" variable nil nil [24203 24223])
            ("_print_warning" function (:arguments 
              ( ("msg" variable nil (reparse-symbol function_parameters) [24243 24246])
                ("method_name" variable nil (reparse-symbol function_parameters) [24248 24259])
                ("class_name" variable nil (reparse-symbol function_parameters) [24266 24276])
                ("iteration" variable nil (reparse-symbol function_parameters) [24283 24292])
                ("verbose" variable nil (reparse-symbol function_parameters) [24318 24325]))              ) nil [24224 24696])
            ("unitdoctest" function (:documentation "is used to describe test cases and might in future become helpful
    as an experimental tutorial as well. The main testing feature at the
    moment is by doctest with ``cma._test()`` or conveniently by
    ``python cma.py --test``. With the ``--verbose`` option added, the
    results will always slightly differ and many \"failed\" test cases
    might be reported.

    A simple first overall test:
        >>> import cma
        >>> res = cma.fmin(cma.fcts.elli, 3*[1], 1,
        ...                {'CMA_diagonal':2, 'seed':1, 'verb_time':0})
        (3_w,7)-CMA-ES (mu_w=2.3,w_1=58%) in dimension 3 (seed=1)
           Covariance matrix is diagonal for 2 iterations (1/ccov=7.0)
        Iterat #Fevals   function value     axis ratio  sigma   minstd maxstd min:sec
            1       7 1.453161670768570e+04 1.2e+00 1.08e+00  1e+00  1e+00
            2      14 3.281197961927601e+04 1.3e+00 1.22e+00  1e+00  2e+00
            3      21 1.082851071704020e+04 1.3e+00 1.24e+00  1e+00  2e+00
          100     700 8.544042012075362e+00 1.4e+02 3.18e-01  1e-03  2e-01
          200    1400 5.691152415221861e-12 1.0e+03 3.82e-05  1e-09  1e-06
          220    1540 3.890107746209078e-15 9.5e+02 4.56e-06  8e-11  7e-08
        termination on tolfun : 1e-11
        final/bestever f-value = 3.89010774621e-15 2.52273602735e-15
        mean solution:  [ -4.63614606e-08  -3.42761465e-10   1.59957987e-11]
        std deviation: [  6.96066282e-08   2.28704425e-09   7.63875911e-11]

    Test on the Rosenbrock function with 3 restarts. The first trial only
    finds the local optimum, which happens in about 20% of the cases.

        >>> import cma
        >>> res = cma.fmin(cma.fcts.rosen, 4*[-1], 1,
        ...                options={'ftarget':1e-6, 'verb_time':0,
        ...                    'verb_disp':500, 'seed':3},
        ...                restarts=3)
        (4_w,8)-CMA-ES (mu_w=2.6,w_1=52%) in dimension 4 (seed=3)
        Iterat #Fevals   function value     axis ratio  sigma   minstd maxstd min:sec
            1       8 4.875315645656848e+01 1.0e+00 8.43e-01  8e-01  8e-01
            2      16 1.662319948123120e+02 1.1e+00 7.67e-01  7e-01  8e-01
            3      24 6.747063604799602e+01 1.2e+00 7.08e-01  6e-01  7e-01
          184    1472 3.701428610430019e+00 4.3e+01 9.41e-07  3e-08  5e-08
        termination on tolfun : 1e-11
        final/bestever f-value = 3.70142861043 3.70142861043
        mean solution:  [-0.77565922  0.61309336  0.38206284  0.14597202]
        std deviation: [  2.54211502e-08   3.88803698e-08   4.74481641e-08   3.64398108e-08]
        (8_w,16)-CMA-ES (mu_w=4.8,w_1=32%) in dimension 4 (seed=4)
        Iterat #Fevals   function value     axis ratio  sigma   minstd maxstd min:sec
            1    1489 2.011376859371495e+02 1.0e+00 8.90e-01  8e-01  9e-01
            2    1505 4.157106647905128e+01 1.1e+00 8.02e-01  7e-01  7e-01
            3    1521 3.548184889359060e+01 1.1e+00 1.02e+00  8e-01  1e+00
          111    3249 6.831867555502181e-07 5.1e+01 2.62e-02  2e-04  2e-03
        termination on ftarget : 1e-06
        final/bestever f-value = 6.8318675555e-07 1.18576673231e-07
        mean solution:  [ 0.99997004  0.99993938  0.99984868  0.99969505]
        std deviation: [ 0.00018973  0.00038006  0.00076479  0.00151402]
        >>> assert res[1] <= 1e-6

    Notice the different termination conditions. Termination on the target
    function value ftarget prevents further restarts.

    Test of scaling_of_variables option

        >>> import cma
        >>> opts = cma.CMAOptions()
        >>> opts['seed'] = 456
        >>> opts['verb_disp'] = 0
        >>> opts['CMA_active'] = 1
        >>> # rescaling of third variable: for searching in  roughly
        >>> #   x0 plus/minus 1e3*sigma0 (instead of plus/minus sigma0)
        >>> opts['scaling_of_variables'] = [1, 1, 1e3, 1]
        >>> res = cma.fmin(cma.fcts.rosen, 4 * [0.1], 0.1, opts)
        termination on tolfun : 1e-11
        final/bestever f-value = 2.68096173031e-14 1.09714829146e-14
        mean solution:  [ 1.00000001  1.00000002  1.00000004  1.00000007]
        std deviation: [  3.00466854e-08   5.88400826e-08   1.18482371e-07   2.34837383e-07]

    The printed std deviations reflect the actual value in the parameters
    of the function (not the one in the internal representation which 
    can be different).

    Test of CMA_stds scaling option.

        >>> import cma
        >>> opts = cma.CMAOptions()
        >>> s = 5 * [1]
        >>> s[0] = 1e3
        >>> opts.set('CMA_stds', s)
        >>> opts.set('verb_disp', 0)
        >>> res = cma.fmin(cma.fcts.cigar, 5 * [0.1], 0.1, opts)
        >>> assert res[1] < 1800

    :See: cma.main(), cma._test()

    ") nil [24825 29587])
            ("_BlancClass" type
               (:documentation "blanc container class for having a collection of attributes,
    that might/should at some point become a more tailored class"
                :superclasses ("object")
                :type "class")
                nil [29588 29751])
            ("if" code nil nil [29752 35557])
            ("if" code nil nil [35558 35899])
            ("BestSolution" type
               (:documentation "container to keep track of the best solution seen"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"initialize the best solution with `x`, `f`, and `evals`.
        Better solutions have smaller `f`-values.

        \"\"\"" code nil (reparse-symbol indented_block_body) [36050 36172])
                            ("self" variable nil (reparse-symbol indented_block_body) [36181 36191])
                            ("self" variable nil (reparse-symbol indented_block_body) [36200 36218])
                            ("np" code nil (reparse-symbol indented_block_body) [36280 36286])
                            ("self" variable nil (reparse-symbol indented_block_body) [36295 36313])
                            ("self" variable nil (reparse-symbol indented_block_body) [36322 36343])
                            ("self" variable nil (reparse-symbol indented_block_body) [36352 36377])
                            ("self" variable nil (reparse-symbol indented_block_body) [36386 36401])
                            ("self" variable nil (reparse-symbol indented_block_body) [36410 36425]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36005 36009])
                            ("x" variable nil (reparse-symbol function_parameters) [36011 36012])
                            ("f" variable nil (reparse-symbol function_parameters) [36019 36020])
                            ("evals" variable nil (reparse-symbol function_parameters) [36029 36034]))                          
                        :documentation "initialize the best solution with `x`, `f`, and `evals`.
        Better solutions have smaller `f`-values.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35992 36426])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36441 36445])
                            ("arx" variable nil (reparse-symbol function_parameters) [36447 36450])
                            ("xarchive" variable nil (reparse-symbol function_parameters) [36452 36460])
                            ("arf" variable nil (reparse-symbol function_parameters) [36467 36470])
                            ("evals" variable nil (reparse-symbol function_parameters) [36477 36482]))                          
                        :documentation "checks for better solutions in list `arx`.

        Based on the smallest corresponding value in `arf`,
        alternatively, `update` may be called with a `BestSolution`
        instance like ``update(another_best_solution)`` in which case
        the better solution becomes the current best.

        `xarchive` is used to retrieve the genotype of a solution.

        ")
                        (reparse-symbol indented_block_body) [36430 38094])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38106 38110]))                          
                        :documentation "return ``(x, f, evals)`` ")
                        (reparse-symbol indented_block_body) [38098 38212]))                  
                :type "class")
                nil [35900 38212])
            ("BoundaryHandlerBase" type
               (:documentation "hacked base class "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"bounds are not copied, but possibly modified and
        put into a normalized form: ``bounds`` can be ``None``
        or ``[lb, ub]`` where ``lb`` and ``ub`` are
        either None or a vector (which can have ``None`` entries).

        Generally, the last entry is recycled to compute bounds
        for any dimension.

        \"\"\"" code nil (reparse-symbol indented_block_body) [38446 38784])
                            ("if" code nil (reparse-symbol indented_block_body) [38793 39624]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38423 38427])
                            ("bounds" variable nil (reparse-symbol function_parameters) [38429 38435]))                          
                        :documentation "bounds are not copied, but possibly modified and
        put into a normalized form: ``bounds`` can be ``None``
        or ``[lb, ub]`` where ``lb`` and ``ub`` are
        either None or a vector (which can have ``None`` entries).

        Generally, the last entry is recycled to compute bounds
        for any dimension.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38410 39624])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39642 39646])
                            ("solutions" variable nil (reparse-symbol function_parameters) [39648 39657])
                            ("args" variable nil (reparse-symbol function_parameters) [39659 39664])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39666 39674]))                          
                        :documentation "return penalty or list of penalties, by default zero(s).

        This interface seems too specifically tailored to the derived
        BoundPenalty class, it should maybe change.

        ")
                        (reparse-symbol indented_block_body) [39629 39995])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40011 40015])
                            ("args" variable nil (reparse-symbol function_parameters) [40017 40022])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40024 40032]))                          )
                        (reparse-symbol indented_block_body) [40000 40055])
                    ("repair" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40071 40075])
                            ("x" variable nil (reparse-symbol function_parameters) [40077 40078])
                            ("copy_if_changed" variable nil (reparse-symbol function_parameters) [40080 40095])
                            ("copy_always" variable nil (reparse-symbol function_parameters) [40102 40113]))                          
                        :documentation "projects infeasible values on the domain bound, might be
        overwritten by derived class ")
                        (reparse-symbol indented_block_body) [40060 40892])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40909 40913])
                            ("y" variable nil (reparse-symbol function_parameters) [40915 40916])
                            ("copy_if_changed" variable nil (reparse-symbol function_parameters) [40918 40933])
                            ("copy_always" variable nil (reparse-symbol function_parameters) [40940 40951]))                          )
                        (reparse-symbol indented_block_body) [40897 41021])
                    ("get_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41041 41045])
                            ("which" variable nil (reparse-symbol function_parameters) [41047 41052])
                            ("dimension" variable nil (reparse-symbol function_parameters) [41054 41063]))                          
                        :documentation "``get_bounds('lower', 8)`` returns the lower bounds in 8-D")
                        (reparse-symbol indented_block_body) [41026 41415])
                    ("_get_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41436 41440])
                            ("ib" variable nil (reparse-symbol function_parameters) [41442 41444])
                            ("dimension" variable nil (reparse-symbol function_parameters) [41446 41455]))                          
                        :documentation "ib == 0/1 means lower/upper bound, return a vector of length
        `dimension` ")
                        (reparse-symbol indented_block_body) [41420 41952])
                    ("has_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41972 41976]))                          
                        :documentation "return True, if any variable is bounded")
                        (reparse-symbol indented_block_body) [41957 42411])
                    ("is_in_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42433 42437])
                            ("x" variable nil (reparse-symbol function_parameters) [42439 42440]))                          
                        :documentation "not yet tested")
                        (reparse-symbol indented_block_body) [42416 42893])
                    ("to_dim_times_two" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42919 42923])
                            ("bounds" variable nil (reparse-symbol function_parameters) [42925 42931]))                          
                        :documentation "return boundaries in format ``[[lb0, ub0], [lb1, ub1], ...]``,
        as used by ``BoxConstraints...`` class.

        ")
                        (reparse-symbol indented_block_body) [42898 43838]))                  
                :type "class")
                nil [38342 43838])
            ("BoundNone" type
               (:superclasses ("BoundaryHandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [44050 44104])
                            ("super" code nil (reparse-symbol indented_block_body) [44163 44200]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44022 44026])
                            ("bounds" variable nil (reparse-symbol function_parameters) [44028 44034]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44009 44201])
                    ("is_in_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44222 44226])
                            ("x" variable nil (reparse-symbol function_parameters) [44228 44229]))                          )
                        (reparse-symbol indented_block_body) [44205 44252]))                  
                :type "class")
                nil [43967 44252])
            ("BoundTransform" type
               (:documentation "Handles boundary by a smooth, piecewise linear and quadratic
    transformation into the feasible domain.

    >>> import cma
    >>> veq = cma.Mh.vequals_approximately
    >>> b = cma.BoundTransform([None, 1])
    >>> assert b.bounds == [[None], [1]]
    >>> assert veq(b.repair([0, 1, 1.2]), array([ 0., 0.975, 0.975]))
    >>> assert b.is_in_bounds([0, 0.5, 1])
    >>> assert veq(b.transform([0, 1, 2]), [ 0.   ,  0.975,  0.2  ])
    >>> o=cma.fmin(cma.fcts.sphere, 6 * [-2], 0.5, options={
    ...    'boundary_handling': 'BoundTransform ',
    ...    'bounds': [[], 5 * [-1] + [inf]] })
    >>> assert o[1] < 5 + 1e-8
    >>> import numpy as np
    >>> b = cma.BoundTransform([-np.random.rand(120), np.random.rand(120)])
    >>> for i in range(100):
    ...     x = (-i-1) * np.random.rand(120) + i * np.random.randn(120)
    ...     x_to_b = b.repair(x)
    ...     x2 = b.inverse(x_to_b)
    ...     x2_to_b = b.repair(x2)
    ...     x3 = b.inverse(x2_to_b)
    ...     x3_to_b = b.repair(x3)
    ...     assert veq(x_to_b, x2_to_b)
    ...     assert veq(x2, x3)
    ...     assert veq(x2_to_b, x3_to_b)

    Details: this class uses ``class BoxConstraintsLinQuadTransformation``

    "
                :superclasses ("BoundaryHandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Argument bounds can be `None` or ``bounds[0]`` and ``bounds[1]``
        are lower and upper domain boundaries, each is either `None` or
        a scalar or a list or array of appropriate size.

        \"\"\"" code nil (reparse-symbol indented_block_body) [45675 45884])
                            ("super" code nil (reparse-symbol indented_block_body) [45946 45990])
                            ("self" variable nil (reparse-symbol indented_block_body) [45999 46082]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45647 45651])
                            ("bounds" variable nil (reparse-symbol function_parameters) [45653 45659]))                          
                        :documentation "Argument bounds can be `None` or ``bounds[0]`` and ``bounds[1]``
        are lower and upper domain boundaries, each is either `None` or
        a scalar or a list or array of appropriate size.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45634 46083])
                    ("repair" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46099 46103])
                            ("x" variable nil (reparse-symbol function_parameters) [46105 46106])
                            ("copy_if_changed" variable nil (reparse-symbol function_parameters) [46108 46123])
                            ("copy_always" variable nil (reparse-symbol function_parameters) [46130 46141]))                          
                        :documentation "transforms ``x`` into the bounded domain.

        ``copy_always`` option might disappear.

        ")
                        (reparse-symbol indented_block_body) [46088 46563])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46582 46586])
                            ("x" variable nil (reparse-symbol function_parameters) [46588 46589]))                          )
                        (reparse-symbol indented_block_body) [46568 46622])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46639 46643])
                            ("x" variable nil (reparse-symbol function_parameters) [46645 46646])
                            ("copy_if_changed" variable nil (reparse-symbol function_parameters) [46648 46663])
                            ("copy_always" variable nil (reparse-symbol function_parameters) [46670 46681]))                          
                        :documentation "inverse transform of ``x`` from the bounded domain.

        ")
                        (reparse-symbol indented_block_body) [46627 47094]))                  
                :type "class")
                nil [44381 47094])
            ("BoundPenalty" type
               (:documentation "Computes the boundary penalty. Must be updated each iteration,
    using the `update` method.

    Details
    -------
    The penalty computes like ``sum(w[i] * (x[i]-xfeas[i])**2)``,
    where `xfeas` is the closest feasible (in-bounds) solution from `x`.
    The weight `w[i]` should be updated during each iteration using
    the update method.

    Example:

    >>> import cma
    >>> cma.fmin(cma.felli, 6 * [1], 1,
    ...          {
    ...              'boundary_handling': 'BoundPenalty',
    ...              'bounds': [-1, 1],
    ...              'fixed_variables': {0: 0.012, 2:0.234}
    ...          })

    Reference: Hansen et al 2009, A Method for Handling Uncertainty...
    IEEE TEC, with addendum, see
    http://www.lri.fr/~hansen/TEC2009online.pdf

    "
                :superclasses ("BoundaryHandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Argument bounds can be `None` or ``bounds[0]`` and ``bounds[1]``
        are lower  and upper domain boundaries, each is either `None` or
        a scalar or a list or array of appropriate size.
        \"\"\"" code nil (reparse-symbol indented_block_body) [48098 48307])
                            ("super" code nil (reparse-symbol indented_block_body) [48443 48485])
                            ("self" variable nil (reparse-symbol indented_block_body) [48495 48509])
                            ("self" variable nil (reparse-symbol indented_block_body) [48545 48577])
                            ("self" variable nil (reparse-symbol indented_block_body) [48633 48647]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48070 48074])
                            ("bounds" variable nil (reparse-symbol function_parameters) [48076 48082]))                          
                        :documentation "Argument bounds can be `None` or ``bounds[0]`` and ``bounds[1]``
        are lower  and upper domain boundaries, each is either `None` or
        a scalar or a list or array of appropriate size.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48057 48667])
                    ("repair" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48683 48687])
                            ("x" variable nil (reparse-symbol function_parameters) [48689 48690])
                            ("copy_if_changed" variable nil (reparse-symbol function_parameters) [48692 48707])
                            ("copy_always" variable nil (reparse-symbol function_parameters) [48714 48725]))                          
                        :documentation "sets out-of-bounds components of ``x`` on the bounds.

        ")
                        (reparse-symbol indented_block_body) [48672 50110])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50201 50205])
                            ("x" variable nil (reparse-symbol function_parameters) [50207 50208])
                            ("archive" variable nil (reparse-symbol function_parameters) [50210 50217])
                            ("gp" variable nil (reparse-symbol function_parameters) [50219 50221]))                          
                        :documentation "returns the boundary violation penalty for `x` ,where `x` is a
        single solution or a list or array of solutions.

        ")
                        (reparse-symbol indented_block_body) [50188 51694])
                    ("feasible_ratio" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51791 51795])
                            ("solutions" variable nil (reparse-symbol function_parameters) [51797 51806]))                          
                        :documentation "counts for each coordinate the number of feasible values in
        ``solutions`` and returns an array of length ``len(solutions[0])``
        with the ratios.

        `solutions` is a list or array of repaired ``Solution``
        instances,

        ")
                        (reparse-symbol indented_block_body) [51772 52297])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52386 52390])
                            ("function_values" variable nil (reparse-symbol function_parameters) [52392 52407])
                            ("es" variable nil (reparse-symbol function_parameters) [52409 52411]))                          
                        :documentation "updates the weights for computing a boundary penalty.

        Arguments
        ---------
        `function_values`
            all function values of recent population of solutions
        `es`
            `CMAEvolutionStrategy` object instance, in particular
            mean and variances and the methods from the attribute
            `gp` of type `GenoPheno` are used.

        ")
                        (reparse-symbol indented_block_body) [52375 56011]))                  
                :type "class")
                nil [47223 56011])
            ("BoxConstraintsTransformationBase" type
               (:documentation "Implements a transformation into boundaries and is used for
    boundary handling::

        tf = BoxConstraintsTransformationAnyDerivedClass([[1, 4]])
        x = [3, 2, 4.4]
        y = tf(x)  # \"repaired\" solution
        print(tf([2.5]))  # middle value is never changed
        [2.5]

    :See: ``BoundaryHandler``

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("try" code nil (reparse-symbol indented_block_body) [56564 56832])
                            ("self" variable nil (reparse-symbol indented_block_body) [56840 56860])
                            ("self" code nil (reparse-symbol indented_block_body) [56869 56886]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56541 56545])
                            ("bounds" variable nil (reparse-symbol function_parameters) [56547 56553]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56528 56887])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56907 56911]))                          
                        :documentation "initialize in base class")
                        (reparse-symbol indented_block_body) [56892 57080])
                    ("_lowerupperval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57104 57108])
                            ("a" variable nil (reparse-symbol function_parameters) [57110 57111])
                            ("b" variable nil (reparse-symbol function_parameters) [57113 57114])
                            ("c" variable nil (reparse-symbol function_parameters) [57116 57117]))                          )
                        (reparse-symbol indented_block_body) [57085 57179])
                    ("bounds_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57196 57200])
                            ("i" variable nil (reparse-symbol function_parameters) [57202 57203]))                          
                        :documentation "return ``[ith_lower_bound, ith_upper_bound]``")
                        (reparse-symbol indented_block_body) [57183 57309])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57326 57330])
                            ("solution_in_genotype" variable nil (reparse-symbol function_parameters) [57332 57352]))                          )
                        (reparse-symbol indented_block_body) [57313 57458])
                    ("transform" variable nil (reparse-symbol indented_block_body) [57462 57482])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57499 57503])
                            ("solution_in_phenotype" variable nil (reparse-symbol function_parameters) [57505 57526])
                            ("copy_if_changed" variable nil (reparse-symbol function_parameters) [57528 57543])
                            ("copy_always" variable nil (reparse-symbol function_parameters) [57550 57561]))                          )
                        (reparse-symbol indented_block_body) [57487 57653])
                    ("_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57668 57672])
                            ("i" variable nil (reparse-symbol function_parameters) [57674 57675]))                          )
                        (reparse-symbol indented_block_body) [57657 57724])
                    ("_transform_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57745 57749])
                            ("x" variable nil (reparse-symbol function_parameters) [57751 57752])
                            ("i" variable nil (reparse-symbol function_parameters) [57754 57755]))                          )
                        (reparse-symbol indented_block_body) [57728 57870])
                    ("_inverse_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57889 57893])
                            ("y" variable nil (reparse-symbol function_parameters) [57895 57896])
                            ("i" variable nil (reparse-symbol function_parameters) [57898 57899]))                          )
                        (reparse-symbol indented_block_body) [57874 58014])
                    ("shift_or_mirror_into_invertible_domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58061 58065])
                            ("solution_genotype" variable nil (reparse-symbol function_parameters) [58067 58084]))                          
                        :documentation "return the reference solution that has the same ``box_constraints_transformation(solution)``
        value, i.e. ``tf.shift_or_mirror_into_invertible_domain(x) = tf.inverse(tf.transform(x))``.
        This is an idempotent mapping (leading to the same result independent how often it is
        repeatedly applied).

        ")
                        (reparse-symbol indented_block_body) [58018 58592]))                  
                :type "class")
                nil [56140 58592])
            ("_BoxConstraintsTransformationTemplate" type
               (:documentation "copy/paste this template to implement a new boundary handling transformation"
                :superclasses ("BoxConstraintsTransformationBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [58865 58932]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58776 58780])
                            ("bounds" variable nil (reparse-symbol function_parameters) [58782 58788]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58763 58933])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58952 58956]))                          )
                        (reparse-symbol indented_block_body) [58937 59041])
                    ("_transform_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59062 59066])
                            ("x" variable nil (reparse-symbol function_parameters) [59068 59069])
                            ("i" variable nil (reparse-symbol function_parameters) [59071 59072]))                          )
                        (reparse-symbol indented_block_body) [59045 59187])
                    ("_inverse_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59206 59210])
                            ("y" variable nil (reparse-symbol function_parameters) [59212 59213])
                            ("i" variable nil (reparse-symbol function_parameters) [59215 59216]))                          )
                        (reparse-symbol indented_block_body) [59191 59331])
                    ("__doc__" code nil (reparse-symbol indented_block_body) [59335 59395]))                  
                :type "class")
                nil [58593 59396])
            ("BoxConstraintsLinQuadTransformation" type
               (:documentation "implements a bijective, monotonous transformation between [lb - al, ub + au]
    and [lb, ub] which is the identity (and therefore linear) in [lb + al, ub - au]
    (typically about 90% of the interval) and quadratic in [lb - 3*al, lb + al]
    and in [ub - au, ub + 3*au]. The transformation is periodically
    expanded beyond the limits (somewhat resembling the shape sin(x-pi/2))
    with a period of ``2 * (ub - lb + al + au)``.

    Details
    =======
    Partly due to numerical considerations depend the values ``al`` and ``au``
    on ``abs(lb)`` and ``abs(ub)`` which makes the transformation non-translation
    invariant. In contrast to sin(.), the transformation is robust to \"arbitrary\"
    values for boundaries, e.g. a lower bound of ``-1e99`` or ``np.Inf`` or
    ``None``.

    Examples
    ========
    Example to use with cma:

    >>> import cma
    >>> # only the first variable has an upper bound
    >>> tf = cma.BoxConstraintsLinQuadTransformation([[1,2], [1,None]]) # second==last pair is re-cycled
    >>> cma.fmin(cma.felli, 9 * [2], 1, {'transformation': [tf.transform, tf.inverse], 'verb_disp': 0})
    >>> # ...or...
    >>> es = cma.CMAEvolutionStrategy(9 * [2], 1)
    >>> while not es.stop():
    ...     X = es.ask()
    ...     f = [cma.felli(tf(x)) for x in X]  # tf(x) == tf.transform(x)
    ...     es.tell(X, f)

    Example of the internal workings:

    >>> import cma
    >>> tf = cma.BoxConstraintsLinQuadTransformation([[1,2], [1,11], [1,11]])
    >>> tf.bounds
    [[1, 2], [1, 11], [1, 11]]
    >>> tf([1.5, 1.5, 1.5])
    [1.5, 1.5, 1.5]
    >>> tf([1.52, -2.2, -0.2, 2, 4, 10.4])
    [1.52, 4.0, 2.0, 2.0, 4.0, 10.4]
    >>> res = np.round(tf._au, 2)
    >>> assert list(res[:4]) == [ 0.15, 0.6, 0.6, 0.6]
    >>> res = [round(x, 2) for x in tf.shift_or_mirror_into_invertible_domain([1.52, -12.2, -0.2, 2, 4, 10.4])]
    >>> assert res == [1.52, 9.2, 2.0, 2.0, 4.0, 10.4]
    >>> tmp = tf([1])  # call with lower dimension

    "
                :superclasses ("BoxConstraintsTransformationBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"``x`` is defined in ``[lb - 3*al, ub + au + r - 2*al]`` with ``r = ub - lb + al + au``,
        and ``x == transformation(x)`` in ``[lb + al, ub - au]``.
        ``beta*x - alphal = beta*x - alphau`` is then defined in ``[lb, ub]``,

        ``alphal`` and ``alphau`` represent the same value, but respectively numerically
        better suited for values close to lb and ub.

        \"\"\"" code nil (reparse-symbol indented_block_body) [61504 61895])
                            ("super" code nil (reparse-symbol indented_block_body) [61970 62035]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61481 61485])
                            ("bounds" variable nil (reparse-symbol function_parameters) [61487 61493]))                          
                        :documentation "``x`` is defined in ``[lb - 3*al, ub + au + r - 2*al]`` with ``r = ub - lb + al + au``,
        and ``x == transformation(x)`` in ``[lb + al, ub - au]``.
        ``beta*x - alphal = beta*x - alphau`` is then defined in ``[lb, ub]``,

        ``alphal`` and ``alphau`` represent the same value, but respectively numerically
        better suited for values close to lb and ub.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61468 62036])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62201 62205])
                            ("length" variable nil (reparse-symbol function_parameters) [62207 62213]))                          
                        :documentation "see ``__init__``")
                        (reparse-symbol indented_block_body) [62186 63274])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63292 63296])
                            ("solution_genotype" variable nil (reparse-symbol function_parameters) [63298 63315])
                            ("copy_if_changed" variable nil (reparse-symbol function_parameters) [63317 63332])
                            ("copy_always" variable nil (reparse-symbol function_parameters) [63339 63350]))                          )
                        (reparse-symbol indented_block_body) [63279 65577])
                    ("__call__" variable nil (reparse-symbol indented_block_body) [65581 65636])
                    ("transform" variable nil (reparse-symbol indented_block_body) [65641 65661])
                    ("idx_infeasible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65685 65689])
                            ("solution_genotype" variable nil (reparse-symbol function_parameters) [65691 65708]))                          
                        :documentation "return indices of \"infeasible\" variables, that is,
        variables that do not directly map into the feasible domain such that
        ``tf.inverse(tf(x)) == x``.

        ")
                        (reparse-symbol indented_block_body) [65666 66042])
                    ("is_feasible_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66064 66068])
                            ("x" variable nil (reparse-symbol function_parameters) [66070 66071])
                            ("i" variable nil (reparse-symbol function_parameters) [66073 66074]))                          
                        :documentation "return True if value ``x`` is in the invertible domain of
        variable ``i``

        ")
                        (reparse-symbol indented_block_body) [66046 66371])
                    ("is_loosely_feasible_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66401 66405])
                            ("x" variable nil (reparse-symbol function_parameters) [66407 66408])
                            ("i" variable nil (reparse-symbol function_parameters) [66410 66411]))                          
                        :documentation "never used")
                        (reparse-symbol indented_block_body) [66375 66674])
                    ("shift_or_mirror_into_invertible_domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66722 66726])
                            ("solution_genotype" variable nil (reparse-symbol function_parameters) [66728 66745])
                            ("copy" variable nil (reparse-symbol function_parameters) [66794 66798]))                          
                        :documentation "Details: input ``solution_genotype`` is changed. The domain is
        [lb - al, ub + au] and in [lb - 2*al - (ub - lb) / 2, lb - al]
        mirroring is applied.

        ")
                        (reparse-symbol indented_block_body) [66679 67951])
                    ("shift_or_mirror_into_invertible_domain" code nil (reparse-symbol indented_block_body) [67955 68132])
                    ("_shift_or_mirror_into_invertible_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68177 68181])
                            ("x" variable nil (reparse-symbol function_parameters) [68183 68184])
                            ("i" variable nil (reparse-symbol function_parameters) [68186 68187]))                          
                        :documentation "shift into the invertible domain [lb - ab, ub + au], mirror close to
        boundaries in order to get a smooth transformation everywhere

        ")
                        (reparse-symbol indented_block_body) [68138 68960])
                    ("_transform_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68981 68985])
                            ("x" variable nil (reparse-symbol function_parameters) [68987 68988])
                            ("i" variable nil (reparse-symbol function_parameters) [68990 68991]))                          
                        :documentation "return transform of x in component i")
                        (reparse-symbol indented_block_body) [68964 69571])
                    ("_inverse_i" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69590 69594])
                            ("y" variable nil (reparse-symbol function_parameters) [69596 69597])
                            ("i" variable nil (reparse-symbol function_parameters) [69599 69600]))                          
                        :documentation "return inverse of y in component i")
                        (reparse-symbol indented_block_body) [69575 70141]))                  
                :type "class")
                nil [59397 70141])
            ("GenoPheno" type
               (:documentation "Genotype-phenotype transformation.

    Method `pheno` provides the transformation from geno- to phenotype,
    that is from the internal representation to the representation used
    in the objective function. Method `geno` provides the \"inverse\" pheno-
    to genotype transformation. The geno-phenotype transformation comprises,
    in this order:

       - insert fixed variables (with the phenotypic and therefore quite
         possibly \"wrong\" values)
       - affine linear transformation (first scaling then shift)
       - user-defined transformation
       - repair (e.g. into feasible domain due to boundaries)
       - assign fixed variables their original phenotypic value

    By default all transformations are the identity. The repair is only applied,
    if the transformation is given as argument to the method `pheno`.

    ``geno`` is only necessary, if solutions have been injected.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"return `GenoPheno` instance with phenotypic dimension `dim`.

        Keyword Arguments
        -----------------
            `scaling`
                the diagonal of a scaling transformation matrix, multipliers
                in the genotyp-phenotyp transformation, see `typical_x`
            `typical_x`
                ``pheno = scaling*geno + typical_x``
            `fixed_values`
                a dictionary of variable indices and values, like ``{0:2.0, 2:1.1}``,
                that are not subject to change, negative indices are ignored
                (they act like incommenting the index), values are phenotypic
                values.
            `tf`
                list of two user-defined transformation functions, or `None`.

                ``tf[0]`` is a function that transforms the internal representation
                as used by the optimizer into a solution as used by the
                objective function. ``tf[1]`` does the back-transformation.
                For example::

                    tf_0 = lambda x: [xi**2 for xi in x]
                    tf_1 = lambda x: [abs(xi)**0.5 fox xi in x]

                or \"equivalently\" without the `lambda` construct::

                    def tf_0(x):
                        return [xi**2 for xi in x]
                    def tf_1(x):
                        return [abs(xi)**0.5 fox xi in x]

                ``tf=[tf_0, tf_1]`` is a reasonable way to guaranty that only positive
                values are used in the objective function.

        Details
        -------
        If ``tf_0`` is not the identity and ``tf_1`` is ommitted,
        the genotype of ``x0`` cannot be computed consistently and
        \"injection\" of phenotypic solutions is likely to lead to
        unexpected results.

        \"\"\"" code nil (reparse-symbol indented_block_body) [71200 72999])
                            ("self" variable nil (reparse-symbol indented_block_body) [73008 73020])
                            ("self" variable nil (reparse-symbol indented_block_body) [73029 73061])
                            ("if" code nil (reparse-symbol indented_block_body) [73070 73573])
                            ("if" code nil (reparse-symbol indented_block_body) [73582 74134])
                            ("vec_is_default" function
                               (:documentation "return True if `vec` has the value `default_val`,
            None or [None] are also recognized as default

            "
                                :arguments 
                                  ( ("vec" variable nil (reparse-symbol function_parameters) [74162 74165])
                                    ("default_val" variable nil (reparse-symbol function_parameters) [74167 74178]))                                  )
                                (reparse-symbol indented_block_body) [74143 74849])
                            ("None" code nil (reparse-symbol indented_block_body) [74915 74919])
                            ("if" code nil (reparse-symbol indented_block_body) [74928 75234])
                            ("None" code nil (reparse-symbol indented_block_body) [75307 75311])
                            ("if" code nil (reparse-symbol indented_block_body) [75320 75617])
                            ("if" code nil (reparse-symbol indented_block_body) [75626 75862])
                            ("if" code nil (reparse-symbol indented_block_body) [75870 75977]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71105 71109])
                            ("dim" variable nil (reparse-symbol function_parameters) [71111 71114])
                            ("scaling" variable nil (reparse-symbol function_parameters) [71116 71123])
                            ("typical_x" variable nil (reparse-symbol function_parameters) [71130 71139])
                            ("fixed_values" variable nil (reparse-symbol function_parameters) [71163 71175])
                            ("tf" variable nil (reparse-symbol function_parameters) [71182 71184]))                          
                        :documentation "return `GenoPheno` instance with phenotypic dimension `dim`.

        Keyword Arguments
        -----------------
            `scaling`
                the diagonal of a scaling transformation matrix, multipliers
                in the genotyp-phenotyp transformation, see `typical_x`
            `typical_x`
                ``pheno = scaling*geno + typical_x``
            `fixed_values`
                a dictionary of variable indices and values, like ``{0:2.0, 2:1.1}``,
                that are not subject to change, negative indices are ignored
                (they act like incommenting the index), values are phenotypic
                values.
            `tf`
                list of two user-defined transformation functions, or `None`.

                ``tf[0]`` is a function that transforms the internal representation
                as used by the optimizer into a solution as used by the
                objective function. ``tf[1]`` does the back-transformation.
                For example::

                    tf_0 = lambda x: [xi**2 for xi in x]
                    tf_1 = lambda x: [abs(xi)**0.5 fox xi in x]

                or \"equivalently\" without the `lambda` construct::

                    def tf_0(x):
                        return [xi**2 for xi in x]
                    def tf_1(x):
                        return [abs(xi)**0.5 fox xi in x]

                ``tf=[tf_0, tf_1]`` is a reasonable way to guaranty that only positive
                values are used in the objective function.

        Details
        -------
        If ``tf_0`` is not the identity and ``tf_1`` is ommitted,
        the genotype of ``x0`` cannot be computed consistently and
        \"injection\" of phenotypic solutions is likely to lead to
        unexpected results.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [71092 75977])
                    ("pheno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75992 75996])
                            ("x" variable nil (reparse-symbol function_parameters) [75998 75999])
                            ("into_bounds" variable nil (reparse-symbol function_parameters) [76001 76012])
                            ("copy" variable nil (reparse-symbol function_parameters) [76019 76023])
                            ("copy_always" variable nil (reparse-symbol function_parameters) [76030 76041])
                            ("archive" variable nil (reparse-symbol function_parameters) [76063 76070])
                            ("iteration" variable nil (reparse-symbol function_parameters) [76077 76086]))                          
                        :documentation "maps the genotypic input argument into the phenotypic space,
        see help for class `GenoPheno`

        Details
        -------
        If ``copy``, values from ``x`` are copied if changed under the transformation.

        ")
                        (reparse-symbol indented_block_body) [75982 78037])
                    ("geno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78051 78055])
                            ("y" variable nil (reparse-symbol function_parameters) [78057 78058])
                            ("from_bounds" variable nil (reparse-symbol function_parameters) [78060 78071])
                            ("copy_if_changed" variable nil (reparse-symbol function_parameters) [78091 78106])
                            ("copy_always" variable nil (reparse-symbol function_parameters) [78113 78124])
                            ("repair" variable nil (reparse-symbol function_parameters) [78145 78151])
                            ("archive" variable nil (reparse-symbol function_parameters) [78158 78165]))                          
                        :documentation "maps the phenotypic input argument into the genotypic space,
        that is, computes essentially the inverse of ``pheno``.

        By default a copy is made only to prevent to modify ``y``.

        The inverse of the user-defined transformation (if any)
        is only needed if external solutions are injected, it is not
        applied to the initial solution x0.

        Details
        =======
        ``geno`` searches first in ``archive`` for the genotype of
        ``y`` and returns the found value, typically unrepaired.
        Otherwise, first ``from_bounds`` is applied, to revert a
        projection into the bound domain (if necessary) and ``pheno``
        is reverted. ``repair`` is applied last, and is usually the
        method ``CMAEvolutionStrategy.repair_genotype`` that limits the
        Mahalanobis norm of ``geno(y) - mean``.

        ")
                        (reparse-symbol indented_block_body) [78042 81042]))                  
                :type "class")
                nil [70142 81042])
            ("OOOptimizer" type
               (:documentation "\"abstract\" base class for an Object Oriented Optimizer interface.

     Relevant methods are `__init__`, `ask`, `tell`, `stop`, `result`,
     and `optimize`. Only `optimize` is fully implemented in this base
     class.

    Examples
    --------
    All examples minimize the function `elli`, the output is not shown.
    (A preferred environment to execute all examples is ``ipython`` in
    ``%pylab`` mode.)

    First we need::

        from cma import CMAEvolutionStrategy
        # CMAEvolutionStrategy derives from the OOOptimizer class
        felli = lambda x: sum(1e3**((i-1.)/(len(x)-1.)*x[i])**2 for i in range(len(x)))

    The shortest example uses the inherited method
    `OOOptimizer.optimize()`::

        es = CMAEvolutionStrategy(8 * [0.1], 0.5).optimize(felli)

    The input parameters to `CMAEvolutionStrategy` are specific to this
    inherited class. The remaining functionality is based on interface
    defined by `OOOptimizer`. We might have a look at the result::

        print(es.result()[0])  # best solution and
        print(es.result()[1])  # its function value

    In order to display more exciting output we do::

        es.logger.plot()  # if matplotlib is available

    Virtually the same example can be written with an explicit loop
    instead of using `optimize()`. This gives the necessary insight into
    the `OOOptimizer` class interface and entire control over the
    iteration loop::

        optim = CMAEvolutionStrategy(9 * [0.5], 0.3)
        # a new CMAEvolutionStrategy instance

        # this loop resembles optimize()
        while not optim.stop():  # iterate
            X = optim.ask()      # get candidate solutions
            f = [felli(x) for x in X]  # evaluate solutions
            #  in case do something else that needs to be done
            optim.tell(X, f)     # do all the real \"update\" work
            optim.disp(20)       # display info every 20th iteration
            optim.logger.add()   # log another \"data line\"

        # final output
        print('termination by', optim.stop())
        print('best f-value =', optim.result()[1])
        print('best solution =', optim.result()[0])
        optim.logger.plot()  # if matplotlib is available

    Details
    -------
    Most of the work is done in the method `tell(...)`. The method
    `result()` returns more useful output.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"``xstart`` is a mandatory argument\"\"\"" code nil (reparse-symbol indented_block_body) [83794 83834])
                            ("self" variable nil (reparse-symbol indented_block_body) [83843 83863])
                            ("self" variable nil (reparse-symbol indented_block_body) [83872 83898])
                            ("self" code nil (reparse-symbol indented_block_body) [83907 83924]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83758 83762])
                            ("xstart" variable nil (reparse-symbol function_parameters) [83764 83770])
                            ("more_args" variable nil (reparse-symbol function_parameters) [83772 83783]))                          
                        :documentation "``xstart`` is a mandatory argument"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [83745 83925])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83944 83948]))                          
                        :documentation "(re-)set to the initial state")
                        (reparse-symbol indented_block_body) [83929 84155])
                    ("ask" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84167 84171])
                            ("gradf" variable nil (reparse-symbol function_parameters) [84173 84178])
                            ("more_args" variable nil (reparse-symbol function_parameters) [84185 84196]))                          
                        :documentation "abstract method, AKA \"get\" or \"sample_distribution\", deliver
        new candidate solution(s), a list of \"vectors\"

        ")
                        (reparse-symbol indented_block_body) [84159 84426])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84439 84443])
                            ("solutions" variable nil (reparse-symbol function_parameters) [84445 84454])
                            ("function_values" variable nil (reparse-symbol function_parameters) [84456 84471]))                          
                        :documentation "abstract method, AKA \"update\", pass f-values and prepare for
        next iteration

        ")
                        (reparse-symbol indented_block_body) [84430 84698])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84711 84715]))                          
                        :documentation "abstract method, return satisfied termination conditions in
        a dictionary like ``{'termination reason': value, ...}``,
        for example ``{'tolfun': 1e-12}``, or the empty dictionary ``{}``.
        The implementation of `stop()` should prevent an infinite
        loop.

        ")
                        (reparse-symbol indented_block_body) [84702 85093])
                    ("disp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85106 85110])
                            ("modulo" variable nil (reparse-symbol function_parameters) [85112 85118]))                          
                        :documentation "abstract method, display some iteration infos if
        ``self.iteration_counter % modulo == 0``

        ")
                        (reparse-symbol indented_block_body) [85097 85326])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85341 85345]))                          
                        :documentation "abstract method, return ``(x, f(x), ...)``, that is, the
        minimizer, its function value, ...

        ")
                        (reparse-symbol indented_block_body) [85330 85544])
                    ("optimize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85774 85778])
                            ("objective_fct" variable nil (reparse-symbol function_parameters) [85780 85793])
                            ("iterations" variable nil (reparse-symbol function_parameters) [85795 85805])
                            ("min_iterations" variable nil (reparse-symbol function_parameters) [85812 85826])
                            ("args" variable nil (reparse-symbol function_parameters) [85847 85851])
                            ("verb_disp" variable nil (reparse-symbol function_parameters) [85856 85865])
                            ("logger" variable nil (reparse-symbol function_parameters) [85872 85878])
                            ("call_back" variable nil (reparse-symbol function_parameters) [85885 85894]))                          
                        :documentation "find minimizer of `objective_fct`.

        CAVEAT: the return value for `optimize` has changed to ``self``.

        Arguments
        ---------

            `objective_fct`
                function be to minimized
            `iterations`
                number of (maximal) iterations, while ``not self.stop()``
            `min_iterations`
                minimal number of iterations, even if ``not self.stop()``
            `args`
                arguments passed to `objective_fct`
            `verb_disp`
                print to screen every `verb_disp` iteration, if ``None``
                the value from ``self.logger`` is \"inherited\", if
                available.
            ``logger``
                a `BaseDataLogger` instance, which must be compatible
                with the type of ``self``.
            ``call_back``
                call back function called like ``call_back(self)`` or
                a list of call back functions.

        ``return self``, that is, the `OOOptimizer` instance.

        Example
        -------
        >>> import cma
        >>> es = cma.CMAEvolutionStrategy(7 * [0.1], 0.5
        ...              ).optimize(cma.fcts.rosen, verb_disp=100)
        (4_w,9)-CMA-ES (mu_w=2.8,w_1=49%) in dimension 7 (seed=630721393)
        Iterat #Fevals   function value    axis ratio  sigma   minstd maxstd min:sec
            1       9 3.163954777181882e+01 1.0e+00 4.12e-01  4e-01  4e-01 0:0.0
            2      18 3.299006223906629e+01 1.0e+00 3.60e-01  3e-01  4e-01 0:0.0
            3      27 1.389129389866704e+01 1.1e+00 3.18e-01  3e-01  3e-01 0:0.0
          100     900 2.494847340045985e+00 8.6e+00 5.03e-02  2e-02  5e-02 0:0.3
          200    1800 3.428234862999135e-01 1.7e+01 3.77e-02  6e-03  3e-02 0:0.5
          300    2700 3.216640032470860e-04 5.6e+01 6.62e-03  4e-04  9e-03 0:0.8
          400    3600 6.155215286199821e-12 6.6e+01 7.44e-06  1e-07  4e-06 0:1.1
          438    3942 1.187372505161762e-14 6.0e+01 3.27e-07  4e-09  9e-08 0:1.2
          438    3942 1.187372505161762e-14 6.0e+01 3.27e-07  4e-09  9e-08 0:1.2
        ('termination by', {'tolfun': 1e-11})
        ('best f-value =', 1.1189867885201275e-14)
        ('solution =', array([ 1.        ,  1.        ,  1.        ,  0.99999999,  0.99999998,
                0.99999996,  0.99999992]))
        >>> print(es.result()[0])
        array([ 1.          1.          1.          0.99999999  0.99999998  0.99999996
          0.99999992])

        ")
                        (reparse-symbol indented_block_body) [85761 90122]))                  
                :type "class")
                nil [81334 90122])
            ("_experimental" variable nil nil [90189 90210])
            ("CMAAdaptSigmaBase" type
               (:documentation "step-size adaptation base class, implementing hsig functionality
    via an isotropic evolution path.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [90412 90444])
                            ("self" code nil (reparse-symbol indented_block_body) [90453 90484]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90380 90384])
                            ("args" variable nil (reparse-symbol function_parameters) [90386 90391])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [90393 90401]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [90367 90485])
                    ("initialize_base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90509 90513])
                            ("es" variable nil (reparse-symbol function_parameters) [90515 90517]))                          
                        :documentation "set parameters and state variable based on dimension,
        mueff and possibly further options.

        ")
                        (reparse-symbol indented_block_body) [90489 90925])
                    ("_update_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90944 90948])
                            ("es" variable nil (reparse-symbol function_parameters) [90950 90952]))                          
                        :documentation "update the isotropic evolution path

        :type es: CMAEvolutionStrategy
        ")
                        (reparse-symbol indented_block_body) [90929 91829])
                    ("hsig" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91842 91846])
                            ("es" variable nil (reparse-symbol function_parameters) [91848 91850]))                          
                        :documentation "return \"OK-signal\" for rank-one update, `True` (OK) or `False`
        (stall rank-one update), based on the length of an evolution path

        ")
                        (reparse-symbol indented_block_body) [91833 92334])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92349 92353])
                            ("es" variable nil (reparse-symbol function_parameters) [92355 92357])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [92359 92367]))                          
                        :documentation "update ``es.sigma``")
                        (reparse-symbol indented_block_body) [92338 92508]))                  
                :type "class")
                nil [90212 92508])
            ("CMAAdaptSigmaNone" type
               (:superclasses ("CMAAdaptSigmaBase")
                :members 
                  ( ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92569 92573])
                            ("es" variable nil (reparse-symbol function_parameters) [92575 92577])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [92579 92587]))                          
                        :documentation "no update, ``es.sigma`` remains constant.

        :param es: ``CMAEvolutionStrategy`` class instance
        :param kwargs: whatever else is needed to update ``es.sigma``

        ")
                        (reparse-symbol indented_block_body) [92558 92799]))                  
                :type "class")
                nil [92510 92799])
            ("CMAAdaptSigmaDistanceProportional" type
               (:documentation "artificial setting of ``sigma`` for test purposes, e.g.
    to simulate optimal progress rates.

    "
                :superclasses ("CMAAdaptSigmaBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [93022 93079])
                            ("self" variable nil (reparse-symbol indented_block_body) [93124 93154])
                            ("self" variable nil (reparse-symbol indented_block_body) [93163 93189]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92990 92994])
                            ("coefficient" variable nil (reparse-symbol function_parameters) [92996 93007]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92977 93190])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93205 93209])
                            ("es" variable nil (reparse-symbol function_parameters) [93211 93213])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [93215 93223]))                          )
                        (reparse-symbol indented_block_body) [93194 93351]))                  
                :type "class")
                nil [92801 93351])
            ("CMAAdaptSigmaCSA" type
               (:superclasses ("CMAAdaptSigmaBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"postpone initialization to a method call where dimension and mueff should be known.

        \"\"\"" code nil (reparse-symbol indented_block_body) [93428 93527])
                            ("self" variable nil (reparse-symbol indented_block_body) [93536 93563]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93413 93417]))                          
                        :documentation "postpone initialization to a method call where dimension and mueff should be known.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [93400 93564])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93583 93587])
                            ("es" variable nil (reparse-symbol function_parameters) [93589 93591]))                          
                        :documentation "set parameters and state variable based on dimension,
        mueff and possibly further options.

        ")
                        (reparse-symbol indented_block_body) [93568 96317])
                    ("_update_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96337 96341])
                            ("es" variable nil (reparse-symbol function_parameters) [96343 96345]))                          )
                        (reparse-symbol indented_block_body) [96322 97336])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97351 97355])
                            ("es" variable nil (reparse-symbol function_parameters) [97357 97359])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [97361 97369]))                          )
                        (reparse-symbol indented_block_body) [97340 98537]))                  
                :type "class")
                nil [93353 98537])
            ("CMAAdaptSigmaMedianImprovement" type
               (:documentation "Compares median fitness against a fitness percentile of the previous iteration,
    see Ait ElHara et al, GECCO 2013.

    "
                :superclasses ("CMAAdaptSigmaBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [98803 98857]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98745 98749]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [98732 98894])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98913 98917])
                            ("es" variable nil (reparse-symbol function_parameters) [98919 98921]))                          )
                        (reparse-symbol indented_block_body) [98898 99369])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99384 99388])
                            ("es" variable nil (reparse-symbol function_parameters) [99390 99392])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [99394 99402]))                          )
                        (reparse-symbol indented_block_body) [99373 100755]))                  
                :type "class")
                nil [98537 100755])
            ("CMAAdaptSigmaTPA" type
               (:documentation "two point adaptation for step-size sigma. Relies on a specific
    sampling of the first two offspring, whose objective function
    value ranks are used to decide on the step-size change.

    Example
    =======

    >>> import cma
    >>> cma.CMAOptions('adapt').pprint()
    >>> es = cma.CMAEvolutionStrategy(10 * [0.2], 0.1, {'AdaptSigma': cma.CMAAdaptSigmaTPA, 'ftarget': 1e-8})
    >>> es.optimize(cma.fcts.rosen)
    >>> assert 'ftarget' in es.stop()
    >>> assert es.result()[1] <= 1e-8
    >>> assert es.result()[2] < 6500  # typically < 5500

    References: loosely based on Hansen 2008, CMA-ES with Two-Point
    Step-Size Adaptation, more tightly based on an upcoming paper by
    Hansen et al.

    "
                :superclasses ("CMAAdaptSigmaBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [101583 101623])
                            ("self" variable nil (reparse-symbol indented_block_body) [101711 101735])
                            ("self" variable nil (reparse-symbol indented_block_body) [101744 101770])
                            ("self" variable nil (reparse-symbol indented_block_body) [101779 101795]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101541 101545])
                            ("dimension" variable nil (reparse-symbol function_parameters) [101547 101556])
                            ("opts" variable nil (reparse-symbol function_parameters) [101563 101567]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [101528 101796])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101815 101819])
                            ("N" variable nil (reparse-symbol function_parameters) [101821 101822])
                            ("opts" variable nil (reparse-symbol function_parameters) [101829 101833]))                          )
                        (reparse-symbol indented_block_body) [101800 103605])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103620 103624])
                            ("es" variable nil (reparse-symbol function_parameters) [103626 103628])
                            ("function_values" variable nil (reparse-symbol function_parameters) [103630 103645])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [103647 103655]))                          
                        :documentation "the first and second value in ``function_values``
        must reflect two mirrored solutions sampled
        in direction / in opposite direction of
        the previous mean shift, respectively.

        ")
                        (reparse-symbol indented_block_body) [103609 104767]))                  
                :type "class")
                nil [100755 104767])
            ("new_injections" variable nil nil [104808 104829])
            ("CMAEvolutionStrategy" type
               (:documentation "CMA-ES stochastic optimizer class with ask-and-tell interface.

    Calling Sequences
    =================

        es = CMAEvolutionStrategy(x0, sigma0)

        es = CMAEvolutionStrategy(x0, sigma0, opts)

        es = CMAEvolutionStrategy(x0, sigma0).optimize(objective_fct)

        res = CMAEvolutionStrategy(x0, sigma0,
                                opts).optimize(objective_fct).result()

    Arguments
    =========
        `x0`
            initial solution, starting point. `x0` is given as \"phenotype\"
            which means, if::

                opts = {'transformation': [transform, inverse]}

            is given and ``inverse is None``, the initial mean is not
            consistent with `x0` in that ``transform(mean)`` does not
            equal to `x0` unless ``transform(mean)`` equals ``mean``.
        `sigma0`
            initial standard deviation.  The problem variables should
            have been scaled, such that a single standard deviation
            on all variables is useful and the optimum is expected to
            lie within about `x0` +- ``3*sigma0``. See also options
            `scaling_of_variables`. Often one wants to check for
            solutions close to the initial point. This allows,
            for example, for an easier check of consistency of the
            objective function and its interfacing with the optimizer.
            In this case, a much smaller `sigma0` is advisable.
        `opts`
            options, a dictionary with optional settings,
            see class `CMAOptions`.

    Main interface / usage
    ======================
    The interface is inherited from the generic `OOOptimizer`
    class (see also there). An object instance is generated from

        es = cma.CMAEvolutionStrategy(8 * [0.5], 0.2)

    The least verbose interface is via the optimize method::

        es.optimize(objective_func)
        res = es.result()

    More verbosely, the optimization is done using the
    methods ``stop``, ``ask``, and ``tell``::

        while not es.stop():
            solutions = es.ask()
            es.tell(solutions, [cma.fcts.rosen(s) for s in solutions])
            es.disp()
        es.result_pretty()


    where ``ask`` delivers new candidate solutions and ``tell`` updates
    the ``optim`` instance by passing the respective function values
    (the objective function ``cma.fcts.rosen`` can be replaced by any
    properly defined objective function, see ``cma.fcts`` for more
    examples).

    To change an option, for example a termination condition to
    continue the optimization, call

        es.opts.set({'tolfacupx': 1e4})

    The class `CMAEvolutionStrategy` also provides::

        (solutions, func_values) = es.ask_and_eval(objective_func)

    and an entire optimization can also be written like::

        while not es.stop():
            es.tell(*es.ask_and_eval(objective_func))

    Besides for termination criteria, in CMA-ES only the ranks of the
    `func_values` are relevant.

    Attributes and Properties
    =========================
        - `inputargs` -- passed input arguments
        - `inopts` -- passed options
        - `opts` -- actually used options, some of them can be changed any
          time via ``opts.set``, see class `CMAOptions`
        - `popsize` -- population size lambda, number of candidate
           solutions returned by `ask()`
        - `logger` -- a `CMADataLogger` instance utilized by `optimize`

    Examples
    ========
    Super-short example, with output shown:

    >>> import cma
    >>> # construct an object instance in 4-D, sigma0=1:
    >>> es = cma.CMAEvolutionStrategy(4 * [1], 1, {'seed':234})
    (4_w,8)-CMA-ES (mu_w=2.6,w_1=52%) in dimension 4 (seed=234)
    >>>
    >>> # optimize the ellipsoid function
    >>> es.optimize(cma.fcts.elli, verb_disp=1)
    Iterat #Fevals   function value     axis ratio  sigma   minstd maxstd min:sec
        1       8 2.093015112685775e+04 1.0e+00 9.27e-01  9e-01  9e-01 0:0.0
        2      16 4.964814235917688e+04 1.1e+00 9.54e-01  9e-01  1e+00 0:0.0
        3      24 2.876682459926845e+05 1.2e+00 1.02e+00  9e-01  1e+00 0:0.0
      100     800 6.809045875281943e-01 1.3e+02 1.41e-02  1e-04  1e-02 0:0.2
      200    1600 2.473662150861846e-10 8.0e+02 3.08e-05  1e-08  8e-06 0:0.5
      233    1864 2.766344961865341e-14 8.6e+02 7.99e-07  8e-11  7e-08 0:0.6
    >>>
    >>> cma.pprint(es.result())
    (array([ -1.98546755e-09,  -1.10214235e-09,   6.43822409e-11,
            -1.68621326e-11]),
     4.5119610261406537e-16,
     1666,
     1672,
     209,
     array([ -9.13545269e-09,  -1.45520541e-09,  -6.47755631e-11,
            -1.00643523e-11]),
     array([  3.20258681e-08,   3.15614974e-09,   2.75282215e-10,
             3.27482983e-11]))
    >>> assert es.result()[1] < 1e-9
    >>> help(es.result)
    Help on method result in module cma:

    result(self) method of cma.CMAEvolutionStrategy instance
        return ``(xbest, f(xbest), evaluations_xbest, evaluations, iterations, pheno(xmean), effective_stds)``


    The optimization loop can also be written explicitly.

    >>> import cma
    >>> es = cma.CMAEvolutionStrategy(4 * [1], 1)
    >>> while not es.stop():
    ...    X = es.ask()
    ...    es.tell(X, [cma.fcts.elli(x) for x in X])
    ...    es.disp()
    <output omitted>

    achieving the same result as above.

    An example with lower bounds (at zero) and handling infeasible
    solutions:

    >>> import cma
    >>> import numpy as np
    >>> es = cma.CMAEvolutionStrategy(10 * [0.2], 0.5, {'bounds': [0, np.inf]})
    >>> while not es.stop():
    ...     fit, X = [], []
    ...     while len(X) < es.popsize:
    ...         curr_fit = None
    ...         while curr_fit in (None, np.NaN):
    ...             x = es.ask(1)[0]
    ...             curr_fit = cma.fcts.somenan(x, cma.fcts.elli) # might return np.NaN
    ...         X.append(x)
    ...         fit.append(curr_fit)
    ...     es.tell(X, fit)
    ...     es.logger.add()
    ...     es.disp()
    <output omitted>
    >>>
    >>> assert es.result()[1] < 1e-9
    >>> assert es.result()[2] < 9000  # by internal termination
    >>> # es.logger.plot()  # will plot data
    >>> # cma.show()  # display plot window

    An example with user-defined transformation, in this case to realize
    a lower bound of 2.

    >>> es = cma.CMAEvolutionStrategy(5 * [3], 1,
    ...                 {\"transformation\": [lambda x: x**2+2, None]})
    >>> es.optimize(cma.fcts.rosen)
    <output omitted>
    >>> assert cma.fcts.rosen(es.result()[0]) < 1e-6 + 5.530760944396627e+02
    >>> assert es.result()[2] < 3300

    The inverse transformation is (only) necessary if the `BoundPenalty`
    boundary handler is used at the same time.

    The ``CMAEvolutionStrategy`` class also provides a default logger
    (cave: files are overwritten when the logger is used with the same
    filename prefix):

    >>> import cma
    >>> es = cma.CMAEvolutionStrategy(4 * [0.2], 0.5, {'verb_disp': 0})
    >>> es.logger.disp_header()  # to understand the print of disp
    Iterat Nfevals  function value    axis ratio maxstd   minstd
    >>> while not es.stop():
    ...     X = es.ask()
    ...     es.tell(X, [cma.fcts.sphere(x) for x in X])
    ...     es.logger.add()  # log current iteration
    ...     es.logger.disp([-1])  # display info for last iteration
    1      8 2.72769793021748e+03 1.0e+00 4.05e-01 3.99e-01
    2     16 6.58755537926063e+03 1.1e+00 4.00e-01 3.39e-01
    <output ommitted>
    193   1544 3.15195320957214e-15 1.2e+03 3.70e-08 3.45e-11
    >>> es.logger.disp_header()
    Iterat Nfevals  function value    axis ratio maxstd   minstd
    >>> # es.logger.plot() # will make a plot

    Example implementing restarts with increasing popsize (IPOP), output
    is not displayed:

    >>> import cma, numpy as np
    >>>
    >>> # restart with increasing population size (IPOP)
    >>> bestever = cma.BestSolution()
    >>> for lam in 10 * 2**np.arange(8):  # 10, 20, 40, 80, ..., 10 * 2**7
    ...     es = cma.CMAEvolutionStrategy('6 - 8 * np.random.rand(9)',  # 9-D
    ...                                   5,  # initial std sigma0
    ...                                   {'popsize': lam,  # options
    ...                                    'verb_append': bestever.evalsall})
    ...     logger = cma.CMADataLogger().register(es, append=bestever.evalsall)
    ...     while not es.stop():
    ...         X = es.ask()    # get list of new solutions
    ...         fit = [cma.fcts.rastrigin(x) for x in X]  # evaluate each solution
    ...         es.tell(X, fit) # besides for termination only the ranking in fit is used
    ...
    ...         # display some output
    ...         logger.add()  # add a \"data point\" to the log, writing in files
    ...         es.disp()  # uses option verb_disp with default 100
    ...
    ...     print('termination:', es.stop())
    ...     cma.pprint(es.best.__dict__)
    ...
    ...     bestever.update(es.best)
    ...
    ...     # show a plot
    ...     # logger.plot();
    ...     if bestever.f < 1e-8:  # global optimum was hit
    ...         break
    <output omitted>
    >>> assert es.result()[1] < 1e-8

    On the Rastrigin function, usually after five restarts the global
    optimum is located.

    Using the ``multiprocessing`` module, we can evaluate the function in
    parallel with a simple modification of the example (however
    multiprocessing seems not always reliable)::

        try:
            import multiprocessing as mp
            import cma
            es = cma.CMAEvolutionStrategy(22 * [0.0], 1.0, {'maxiter':10})
            pool = mp.Pool(es.popsize)
            while not es.stop():
                X = es.ask()
                f_values = pool.map_async(cma.felli, X).get()
                # use chunksize parameter as es.popsize/len(pool)?
                es.tell(X, f_values)
                es.disp()
                es.logger.add()
        except ImportError:
            pass

    The final example shows how to resume:

    >>> import cma, pickle
    >>>
    >>> es = cma.CMAEvolutionStrategy(12 * [0.1],  # a new instance, 12-D
    ...                               0.5)         # initial std sigma0
    >>> es.optimize(cma.fcts.rosen, iterations=100)
    >>> pickle.dump(es, open('saved-cma-object.pkl', 'wb'))
    >>> print('saved')
    >>> del es  # let's start fresh
    >>>
    >>> es = pickle.load(open('saved-cma-object.pkl', 'rb'))
    >>> print('resumed')
    >>> es.optimize(cma.fcts.rosen, verb_disp=200)
    >>> assert es.result()[2] < 15000
    >>> cma.pprint(es.result())

    Details
    =======
    The following two enhancements are implemented, the latter is turned
    on by default only for very small population size.

    *Active CMA* is implemented with option ``CMA_active`` and
    conducts an update of the covariance matrix with negative weights.
    The negative update is implemented, such that positive definiteness
    is guarantied. The update is applied after the default update and
    only before the covariance matrix is decomposed, which limits the
    additional computational burden to be at most a factor of three
    (typically smaller). A typical speed up factor (number of
    f-evaluations) is between 1.1 and two.

    References: Jastrebski and Arnold, CEC 2006, Glasmachers et al, GECCO 2010.

    *Selective mirroring* is implemented with option ``CMA_mirrors``
    in the method ``get_mirror()``. Only the method `ask_and_eval()`
    (used by `fmin`) will then sample selectively mirrored vectors. In
    selective mirroring, only the worst solutions are mirrored. With
    the default small number of mirrors, *pairwise selection* (where at
    most one of the two mirrors contribute to the update of the
    distribution mean) is implicitly guarantied under selective
    mirroring and therefore not explicitly implemented.

    References: Brockhoff et al, PPSN 2010, Auger et al, GECCO 2011.

    :See: `fmin()`, `OOOptimizer`, `CMAOptions`, `plot()`, `ask()`,
        `tell()`, `ask_and_eval()`

    "
                :superclasses ("OOOptimizer")
                :members 
                  ( ("popsize" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117173 117177]))                          
                        :documentation "number of samples by default returned by` ask()`
        ")
                        (reparse-symbol indented_block_body) [117101 117283])
                    ("popsize" function
                       (:parent "dummy"
                        :decorators 
                          ( ("popsize.setter" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117320 117324])
                            ("p" variable nil (reparse-symbol function_parameters) [117326 117327]))                          
                        :documentation "popsize cannot be set (this might change in future)
        ")
                        (reparse-symbol indented_block_body) [117288 117455])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117469 117473])
                            ("check" variable nil (reparse-symbol function_parameters) [117475 117480]))                          
                        :documentation "return a dictionary with the termination status.
        With ``check==False``, the termination conditions are not checked
        and the status might not reflect the current situation.

        ")
                        (reparse-symbol indented_block_body) [117460 118033])
                    ("copy_constructor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118059 118063])
                            ("es" variable nil (reparse-symbol function_parameters) [118065 118067]))                          )
                        (reparse-symbol indented_block_body) [118038 118108])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"see class `CMAEvolutionStrategy`

        \"\"\"" code nil (reparse-symbol indented_block_body) [118164 118212])
                            ("if" code nil (reparse-symbol indented_block_body) [118221 118319])
                            ("self" variable nil (reparse-symbol indented_block_body) [118327 118358])
                            ("del" code nil (reparse-symbol indented_block_body) [118385 118411])
                            ("self" variable nil (reparse-symbol indented_block_body) [118474 118494])
                            ("opts" variable nil (reparse-symbol indented_block_body) [118503 118541])
                            ("global_verbosity" variable nil (reparse-symbol indented_block_body) [118601 118640])
                            ("if" code nil (reparse-symbol indented_block_body) [118649 118776])
                            ("if" code nil (reparse-symbol indented_block_body) [118785 118958])
                            ("if" code nil (reparse-symbol indented_block_body) [118966 119121])
                            ("self" code nil (reparse-symbol indented_block_body) [119130 119146])
                            ("self" variable nil (reparse-symbol indented_block_body) [119191 119218])
                            ("self" variable nil (reparse-symbol indented_block_body) [119228 119248])
                            ("if" code nil (reparse-symbol indented_block_body) [119257 119431])
                            ("if" code nil (reparse-symbol indented_block_body) [119439 119578])
                            ("self" variable nil (reparse-symbol indented_block_body) [119586 119610])
                            ("N" variable nil (reparse-symbol indented_block_body) [119673 119689])
                            ("assert" code nil (reparse-symbol indented_block_body) [119698 119809])
                            ("if" code nil (reparse-symbol indented_block_body) [119890 119996])
                            ("opts" code nil (reparse-symbol indented_block_body) [120004 120026])
                            ("self" variable nil (reparse-symbol indented_block_body) [120051 120067])
                            ("self" variable nil (reparse-symbol indented_block_body) [120077 120103])
                            ("self" variable nil (reparse-symbol indented_block_body) [120112 120255])
                            ("self" variable nil (reparse-symbol indented_block_body) [120264 120339])
                            ("if" code nil (reparse-symbol indented_block_body) [120348 120876])
                            ("tf_geno_backup" variable nil (reparse-symbol indented_block_body) [120921 120953])
                            ("if" code nil (reparse-symbol indented_block_body) [120962 121285])
                            ("self" variable nil (reparse-symbol indented_block_body) [121293 121443])
                            ("self" variable nil (reparse-symbol indented_block_body) [121452 121484])
                            ("self" variable nil (reparse-symbol indented_block_body) [121619 121642])
                            ("assert" code nil (reparse-symbol indented_block_body) [121651 121669])
                            ("self" variable nil (reparse-symbol indented_block_body) [121678 121697])
                            ("self" variable nil (reparse-symbol indented_block_body) [121785 121811])
                            ("self" variable nil (reparse-symbol indented_block_body) [121840 121877])
                            ("if" code nil (reparse-symbol indented_block_body) [121886 121965])
                            ("self" variable nil (reparse-symbol indented_block_body) [121973 122010])
                            ("self" variable nil (reparse-symbol indented_block_body) [122038 122071])
                            ("self" variable nil (reparse-symbol indented_block_body) [122080 122098])
                            ("self" variable nil (reparse-symbol indented_block_body) [122190 122208])
                            ("0" code nil (reparse-symbol indented_block_body) [122329 122330])
                            ("self" variable nil (reparse-symbol indented_block_body) [122339 122360])
                            ("self" variable nil (reparse-symbol indented_block_body) [122369 122394])
                            ("eval_scaling_vector" function (:arguments 
                              ( ("in_" variable nil (reparse-symbol function_parameters) [122427 122430]))                              ) (reparse-symbol indented_block_body) [122403 122785])
                            ("self" variable nil (reparse-symbol indented_block_body) [122793 122852])
                            ("if" code nil (reparse-symbol indented_block_body) [122861 122975])
                            ("self" code nil (reparse-symbol indented_block_body) [123091 123112])
                            ("stds" variable nil (reparse-symbol indented_block_body) [123121 123174])
                            ("if" code nil (reparse-symbol indented_block_body) [123183 123794])
                            ("self" variable nil (reparse-symbol indented_block_body) [123803 123824])
                            ("relative_stds" variable nil (reparse-symbol indented_block_body) [123911 124263])
                            ("if" code nil (reparse-symbol indented_block_body) [124272 124475])
                            ("self" variable nil (reparse-symbol indented_block_body) [124483 124507])
                            ("self" variable nil (reparse-symbol indented_block_body) [124516 124554])
                            ("self" variable nil (reparse-symbol indented_block_body) [124563 124583])
                            ("self" variable nil (reparse-symbol indented_block_body) [124592 124607])
                            ("self" variable nil (reparse-symbol indented_block_body) [124634 124652])
                            ("if" code nil (reparse-symbol indented_block_body) [124662 124873])
                            ("opts" variable nil (reparse-symbol indented_block_body) [124881 124913])
                            ("np" code nil (reparse-symbol indented_block_body) [124922 124950])
                            ("self" variable nil (reparse-symbol indented_block_body) [124997 125036])
                            ("self" variable nil (reparse-symbol indented_block_body) [125045 125077])
                            ("self" variable nil (reparse-symbol indented_block_body) [125086 125112])
                            ("self" variable nil (reparse-symbol indented_block_body) [125122 125148])
                            ("self" code nil (reparse-symbol indented_block_body) [125157 125219])
                            ("self" variable nil (reparse-symbol indented_block_body) [125264 125360])
                            ("self" variable nil (reparse-symbol indented_block_body) [125429 125460])
                            ("self" variable nil (reparse-symbol indented_block_body) [125469 125490])
                            ("self" variable nil (reparse-symbol indented_block_body) [125500 125524])
                            ("self" variable nil (reparse-symbol indented_block_body) [125533 125550])
                            ("self" variable nil (reparse-symbol indented_block_body) [125583 125601])
                            ("self" variable nil (reparse-symbol indented_block_body) [125635 125657])
                            ("self" variable nil (reparse-symbol indented_block_body) [125690 125714])
                            ("self" variable nil (reparse-symbol indented_block_body) [125750 125773])
                            ("if" code nil (reparse-symbol indented_block_body) [125879 126986]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118126 118130])
                            ("x0" variable nil (reparse-symbol function_parameters) [118132 118134])
                            ("sigma0" variable nil (reparse-symbol function_parameters) [118136 118142])
                            ("inopts" variable nil (reparse-symbol function_parameters) [118144 118150]))                          
                        :documentation "see class `CMAEvolutionStrategy`

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [118113 126986])
                    ("_set_x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127003 127007])
                            ("x0" variable nil (reparse-symbol function_parameters) [127009 127011]))                          )
                        (reparse-symbol indented_block_body) [126991 127814])
                    ("ask" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127961 127965])
                            ("number" variable nil (reparse-symbol function_parameters) [127967 127973])
                            ("xmean" variable nil (reparse-symbol function_parameters) [127980 127985])
                            ("sigma_fac" variable nil (reparse-symbol function_parameters) [127992 128001])
                            ("gradf" variable nil (reparse-symbol function_parameters) [128017 128022])
                            ("args" variable nil (reparse-symbol function_parameters) [128029 128033]))                          
                        :documentation "get new candidate solutions, sampled from a multi-variate
        normal distribution and transformed to f-representation
        (phenotype) to be evaluated.

        Arguments
        ---------
            `number`
                number of returned solutions, by default the
                population size ``popsize`` (AKA ``lambda``).
            `xmean`
                distribution mean, phenotyp?
            `sigma_fac`
                multiplier for internal sample width (standard
                deviation)
            `gradf`
                gradient, ``len(gradf(x)) == len(x)``, if
                ``gradf is not None`` the third solution in the
                returned list is \"sampled\" in supposedly Newton
                direction ``dot(C, gradf(xmean, *args))``.
            `args`
                additional arguments passed to gradf

        Return
        ------
        A list of N-dimensional candidate solutions to be evaluated

        Example
        -------
        >>> import cma
        >>> es = cma.CMAEvolutionStrategy([0,0,0,0], 0.3)
        >>> while not es.stop() and es.best.f > 1e-6:  # my_desired_target_f_value
        ...     X = es.ask()  # get list of new solutions
        ...     fit = [cma.fcts.rosen(x) for x in X]  # call function rosen with each solution
        ...     es.tell(X, fit)  # feed values

        :See: `ask_and_eval`, `ask_geno`, `tell`

        ")
                        (reparse-symbol indented_block_body) [127953 134746])
                    ("ask_geno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134898 134902])
                            ("number" variable nil (reparse-symbol function_parameters) [134904 134910])
                            ("xmean" variable nil (reparse-symbol function_parameters) [134917 134922])
                            ("sigma_fac" variable nil (reparse-symbol function_parameters) [134929 134938]))                          
                        :documentation "get new candidate solutions in genotyp, sampled from a
        multi-variate normal distribution.

        Arguments are
            `number`
                number of returned solutions, by default the
                population size `popsize` (AKA lambda).
            `xmean`
                distribution mean
            `sigma_fac`
                multiplier for internal sample width (standard
                deviation)

        `ask_geno` returns a list of N-dimensional candidate solutions
        in genotyp representation and is called by `ask`.

        Details: updates the sample distribution and might change
        the geno-pheno transformation during this update.

        :See: `ask`, `ask_and_eval`

        ")
                        (reparse-symbol indented_block_body) [134885 141900])
                    ("random_rescale_to_mahalanobis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141939 141943])
                            ("x" variable nil (reparse-symbol function_parameters) [141945 141946]))                          
                        :documentation "change `x` like for injection, all on genotypic level")
                        (reparse-symbol indented_block_body) [141905 142175])
                    ("random_rescaling_factor_to_mahalanobis_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142227 142231])
                            ("y" variable nil (reparse-symbol function_parameters) [142233 142234]))                          
                        :documentation "``self.mean + self.random_rescaling_factor_to_mahalanobis_size(y)``
        is guarantied to appear like from the sample distribution.
        ")
                        (reparse-symbol indented_block_body) [142179 142823])
                    ("get_mirror" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142844 142848])
                            ("x" variable nil (reparse-symbol function_parameters) [142850 142851])
                            ("preserve_length" variable nil (reparse-symbol function_parameters) [142853 142868]))                          
                        :documentation "return ``pheno(self.mean - (geno(x) - self.mean))``.

        >>> import cma
        >>> es = cma.CMAEvolutionStrategy(cma.np.random.randn(3), 1)
        >>> x = cma.np.random.randn(3)
        >>> assert cma.Mh.vequals_approximately(es.mean - (x - es.mean), es.get_mirror(x, preserve_length=True))
        >>> x = es.ask(1)[0]
        >>> vals = (es.get_mirror(x) - es.mean) / (x - es.mean)
        >>> assert cma.Mh.equals_approximately(sum(vals), len(vals) * vals[0])

        TODO: this implementation is yet experimental.

        TODO: this implementation includes geno-pheno transformation,
        however in general GP-transformation should be separated from
        specific code.

        Selectively mirrored sampling improves to a moderate extend but
        overadditively with active CMA for quite understandable reasons.

        Optimal number of mirrors are suprisingly small: 1,2,3 for
        maxlam=7,13,20 where 3,6,10 are the respective maximal possible
        mirrors that must be clearly suboptimal.

        ")
                        (reparse-symbol indented_block_body) [142829 144644])
                    ("_mirror_penalized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144671 144675])
                            ("f_values" variable nil (reparse-symbol function_parameters) [144677 144685])
                            ("idx" variable nil (reparse-symbol function_parameters) [144687 144690]))                          
                        :documentation "obsolete and subject to removal (TODO),
        return modified f-values such that for each mirror one becomes worst.

        This function is useless when selective mirroring is applied with no
        more than (lambda-mu)/2 solutions.

        Mirrors are leading and trailing values in ``f_values``.

        ")
                        (reparse-symbol indented_block_body) [144649 145301])
                    ("_mirror_idx_cov" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145326 145330])
                            ("f_values" variable nil (reparse-symbol function_parameters) [145332 145340])
                            ("idx1" variable nil (reparse-symbol function_parameters) [145342 145346]))                          
                        :documentation "obsolete and subject to removal (TODO),
        return indices for negative (\"active\") update of the covariance matrix
        assuming that ``f_values[idx1[i]]`` and ``f_values[-1-i]`` are
        the corresponding mirrored values

        computes the index of the worse solution sorted by the f-value of the
        better solution.

        TODO: when the actual mirror was rejected, it is better
        to return idx1 instead of idx2.

        Remark: this function might not be necessary at all: if the worst solution
        is the best mirrored, the covariance matrix updates cancel (cave: weights
        and learning rates), which seems what is desirable. If the mirror is bad,
        as strong negative update is made, again what is desirable.
        And the fitness--step-length correlation is in part addressed by
        using flat weights.

        ")
                        (reparse-symbol indented_block_body) [145306 146585])
                    ("eval_mean" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146604 146608])
                            ("func" variable nil (reparse-symbol function_parameters) [146610 146614])
                            ("args" variable nil (reparse-symbol function_parameters) [146616 146620]))                          
                        :documentation "evaluate the distribution mean, this is not (yet) effective
        in terms of termination or display")
                        (reparse-symbol indented_block_body) [146590 146813])
                    ("ask_and_eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146975 146979])
                            ("func" variable nil (reparse-symbol function_parameters) [146981 146985])
                            ("args" variable nil (reparse-symbol function_parameters) [146987 146991])
                            ("gradf" variable nil (reparse-symbol function_parameters) [146996 147001])
                            ("number" variable nil (reparse-symbol function_parameters) [147008 147014])
                            ("xmean" variable nil (reparse-symbol function_parameters) [147021 147026])
                            ("sigma_fac" variable nil (reparse-symbol function_parameters) [147033 147042])
                            ("evaluations" variable nil (reparse-symbol function_parameters) [147067 147078])
                            ("aggregation" variable nil (reparse-symbol function_parameters) [147082 147093])
                            ("kappa" variable nil (reparse-symbol function_parameters) [147105 147110]))                          
                        :documentation "samples `number` solutions and evaluates them on `func`, where
        each solution `s` is resampled until ``self.is_feasible(s, func(s)) is True``.

        Arguments
        ---------
            `func`
                objective function, ``func(x)`` returns a scalar
            `args`
                additional parameters for `func`
            `gradf`
                gradient of objective function, ``g = gradf(x, *args)``
                must satisfy ``len(g) == len(x)``
            `number`
                number of solutions to be sampled, by default
                population size ``popsize`` (AKA lambda)
            `xmean`
                mean for sampling the solutions, by default ``self.mean``.
            `sigma_fac`
                multiplier for sampling width, standard deviation, for example
                to get a small perturbation of solution `xmean`
            `evaluations`
                number of evaluations for each sampled solution
            `aggregation`
                function that aggregates `evaluations` values to
                as single value.
            `kappa`
                multiplier used for the evaluation of the solutions, in
                that ``func(m + kappa*(x - m))`` is the f-value for x.

        Return
        ------
        ``(X, fit)``, where
            X -- list of solutions
            fit -- list of respective function values

        Details
        -------
        While ``not self.is_feasible(x, func(x))``new solutions are sampled. By
        default ``self.is_feasible == cma.feasible == lambda x, f: f not in (None, np.NaN)``.
        The argument to `func` can be freely modified within `func`.

        Depending on the ``CMA_mirrors`` option, some solutions are not sampled
        independently but as mirrors of other bad solutions. This is a simple
        derandomization that can save 10-30% of the evaluations in particular
        with small populations, for example on the cigar function.

        Example
        -------
        >>> import cma
        >>> x0, sigma0 = 8*[10], 1  # 8-D
        >>> es = cma.CMAEvolutionStrategy(x0, sigma0)
        >>> while not es.stop():
        ...     X, fit = es.ask_and_eval(cma.fcts.elli)  # handles NaN with resampling
        ...     es.tell(X, fit)  # pass on fitness values
        ...     es.disp(20) # print every 20-th iteration
        >>> print('terminated on ' + str(es.stop()))
        <output omitted>

        A single iteration step can be expressed in one line, such that
        an entire optimization after initialization becomes
        ::

            while not es.stop():
                es.tell(*es.ask_and_eval(cma.fcts.elli))

        ")
                        (reparse-symbol indented_block_body) [146958 152571])
                    ("prepare_injection_directions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152609 152613]))                          
                        :documentation "provide genotypic directions for TPA and selective mirroring,
        with no specific length normalization, to be used in the
        coming iteration.

        Details:
        This method is called in the end of `tell`. The result is
        assigned to ``self.pop_injection_directions`` and used in
        `ask_geno`.

        TODO: should be rather appended?

        ")
                        (reparse-symbol indented_block_body) [152576 154281])
                    ("get_selective_mirrors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154312 154316])
                            ("number" variable nil (reparse-symbol function_parameters) [154318 154324])
                            ("pop_sorted" variable nil (reparse-symbol function_parameters) [154331 154341]))                          
                        :documentation "get mirror genotypic directions of the `number` worst
        solution, based on ``pop_sorted`` attribute (from last
        iteration).

        Details:
        Takes the last ``number=sp.lam_mirr`` entries in
        ``pop_sorted=self.pop_sorted`` as solutions to be mirrored.

        ")
                        (reparse-symbol indented_block_body) [154286 155015])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155096 155100])
                            ("solutions" variable nil (reparse-symbol function_parameters) [155102 155111])
                            ("function_values" variable nil (reparse-symbol function_parameters) [155113 155128])
                            ("check_points" variable nil (reparse-symbol function_parameters) [155130 155142])
                            ("copy" variable nil (reparse-symbol function_parameters) [155162 155166]))                          
                        :documentation "pass objective function values to prepare for next
        iteration. This core procedure of the CMA-ES algorithm updates
        all state variables, in particular the two evolution paths, the
        distribution mean, the covariance matrix and a step-size.

        Arguments
        ---------
            `solutions`
                list or array of candidate solution points (of
                type `numpy.ndarray`), most presumably before
                delivered by method `ask()` or `ask_and_eval()`.
            `function_values`
                list or array of objective function values
                corresponding to the respective points. Beside for termination
                decisions, only the ranking of values in `function_values`
                is used.
            `check_points`
                If ``check_points is None``, only solutions that are not generated
                by `ask()` are possibly clipped (recommended). ``False`` does not clip
                any solution (not recommended).
                If ``True``, clips solutions that realize long steps (i.e. also
                those that are unlikely to be generated with `ask()`). `check_points`
                can be a list of indices to be checked in solutions.
            `copy`
                ``solutions`` can be modified in this routine, if ``copy is False``

        Details
        -------
        `tell()` updates the parameters of the multivariate
        normal search distribution, namely covariance matrix and
        step-size and updates also the attributes ``countiter`` and
        ``countevals``. To check the points for consistency is quadratic
        in the dimension (like sampling points).

        Bugs
        ----
        The effect of changing the solutions delivered by `ask()`
        depends on whether boundary handling is applied. With boundary
        handling, modifications are disregarded. This is necessary to
        apply the default boundary handling that uses unrepaired
        solutions but might change in future.

        Example
        -------
        ::

            import cma
            func = cma.fcts.elli  # choose objective function
            es = cma.CMAEvolutionStrategy(cma.np.random.rand(10), 1)
            while not es.stop():
               X = es.ask()
               es.tell(X, [func(x) for x in X])
            es.result()  # where the result can be found

        :See: class `CMAEvolutionStrategy`, `ask()`, `ask_and_eval()`, `fmin()`

        ")
                        (reparse-symbol indented_block_body) [155087 170123])
                    ("inject" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170156 170160])
                            ("solutions" variable nil (reparse-symbol function_parameters) [170162 170171]))                          
                        :documentation "inject a genotypic solution. The solution is used as direction
        relative to the distribution mean to compute a new candidate
        solution returned in method `ask_geno` which in turn is used in
        method `ask`.

        >>> import cma
        >>> es = cma.CMAEvolutionStrategy(4 * [1], 2)
        >>> while not es.stop():
        ...     es.inject([4 * [0.0]])
        ...     X = es.ask()
        ...     break
        >>> assert X[0][0] == X[0][1]

        ")
                        (reparse-symbol indented_block_body) [170145 171107])
                    ("result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171123 171127]))                          
                        :documentation "return::

             (xbest, f(xbest), evaluations_xbest, evaluations, iterations,
                 pheno(xmean), effective_stds)

        ")
                        (reparse-symbol indented_block_body) [171112 171501])
                    ("result_pretty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171523 171527])
                            ("number_of_runs" variable nil (reparse-symbol function_parameters) [171529 171543])
                            ("time_str" variable nil (reparse-symbol function_parameters) [171547 171555])
                            ("fbestever" variable nil (reparse-symbol function_parameters) [171584 171593]))                          
                        :documentation "pretty print result.

        Returns ``self.result()``

        ")
                        (reparse-symbol indented_block_body) [171505 172729])
                    ("clip_or_fit_solutions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [172760 172764])
                            ("pop" variable nil (reparse-symbol function_parameters) [172766 172769])
                            ("idx" variable nil (reparse-symbol function_parameters) [172771 172774]))                          
                        :documentation "make sure that solutions fit to sample distribution, this interface will probably change.

        In particular the frequency of long vectors appearing in pop[idx] - self.mean is limited.

        ")
                        (reparse-symbol indented_block_body) [172734 173053])
                    ("repair_genotype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [173078 173082])
                            ("x" variable nil (reparse-symbol function_parameters) [173084 173085])
                            ("copy_if_changed" variable nil (reparse-symbol function_parameters) [173087 173102]))                          
                        :documentation "make sure that solutions fit to the sample distribution, this interface will probably change.

        In particular the frequency of x - self.mean being long is limited.

        ")
                        (reparse-symbol indented_block_body) [173058 174510])
                    ("decompose_C" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [174531 174535]))                          
                        :documentation "eigen-decompose self.C and update self.dC, self.C, self.B.

        Known bugs: this might give a runtime error with
        CMA_diagonal / separable option on.

        ")
                        (reparse-symbol indented_block_body) [174515 175864])
                    ("updateBD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175881 175885]))                          
                        :documentation "update internal variables for sampling the distribution with the
        current covariance matrix C. This method is O(N^3), if C is not diagonal.

        ")
                        (reparse-symbol indented_block_body) [175868 182749])
                    ("multiplyC" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [182768 182772])
                            ("alpha" variable nil (reparse-symbol function_parameters) [182774 182779]))                          
                        :documentation "multiply C with a scalar and update all related internal variables (dC, D,...)")
                        (reparse-symbol indented_block_body) [182754 182991])
                    ("update_exponential" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [183018 183022])
                            ("Z" variable nil (reparse-symbol function_parameters) [183024 183025])
                            ("eta" variable nil (reparse-symbol function_parameters) [183027 183030])
                            ("BDpair" variable nil (reparse-symbol function_parameters) [183032 183038]))                          
                        :documentation "exponential update of C that guarantees positive definiteness, that is,
        instead of the assignment ``C = C + eta * Z``,
        we have ``C = C**.5 * exp(eta * C**-.5 * Z * C**-.5) * C**.5``.

        Parameter `Z` should have expectation zero, e.g. sum(w[i] * z[i] * z[i].T) - C
        if E z z.T = C.

        Parameter `eta` is the learning rate, for ``eta == 0`` nothing is updated.

        This function conducts two eigendecompositions, assuming that
        B and D are not up to date, unless `BDpair` is given. Given BDpair,
        B is the eigensystem and D is the vector of sqrt(eigenvalues), one
        eigendecomposition is omitted.

        Reference: Glasmachers et al 2010, Exponential Natural Evolution Strategies

        ")
                        (reparse-symbol indented_block_body) [182995 184308])
                    ("feedForResume" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [184465 184469])
                            ("X" variable nil (reparse-symbol function_parameters) [184471 184472])
                            ("function_values" variable nil (reparse-symbol function_parameters) [184474 184489]))                          
                        :documentation "Given all \"previous\" candidate solutions and their respective
        function values, the state of a `CMAEvolutionStrategy` object
        can be reconstructed from this history. This is the purpose of
        function `feedForResume`.

        Arguments
        ---------
            `X`
              (all) solution points in chronological order, phenotypic
              representation. The number of points must be a multiple
              of popsize.
            `function_values`
              respective objective function values

        Details
        -------
        `feedForResume` can be called repeatedly with only parts of
        the history. The part must have the length of a multiple
        of the population size.
        `feedForResume` feeds the history in popsize-chunks into `tell`.
        The state of the random number generator might not be
        reconstructed, but this would be only relevant for the future.

        Example
        -------
        ::

            import cma

            # prepare
            (x0, sigma0) = ... # initial values from previous trial
            X = ... # list of generated solutions from a previous trial
            f = ... # respective list of f-values

            # resume
            es = cma.CMAEvolutionStrategy(x0, sigma0)
            es.feedForResume(X, f)

            # continue with func as objective function
            while not es.stop():
               X = es.ask()
               es.tell(X, [func(x) for x in X])

        Credits to Dirk Bueche and Fabrice Marchal for the feeding idea.

        :See: class `CMAEvolutionStrategy` for a simple dump/load to resume

        ")
                        (reparse-symbol indented_block_body) [184447 187086])
                    ("readProperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187244 187248]))                          
                        :documentation "reads dynamic parameters from property file (not implemented)
        ")
                        (reparse-symbol indented_block_body) [187225 187373])
                    ("correlation_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187535 187539]))                          )
                        (reparse-symbol indented_block_body) [187512 187794])
                    ("mahalanobis_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187819 187823])
                            ("dx" variable nil (reparse-symbol function_parameters) [187825 187827]))                          
                        :documentation "compute the Mahalanobis norm that is induced by the adapted
        sample distribution, covariance matrix ``C`` times ``sigma**2``,
        including ``sigma_vec``. The expected Mahalanobis distance to
        the sample mean is about ``sqrt(dimension)``.

        Argument
        --------
        A *genotype* difference `dx`.

        Example
        -------
        >>> import cma, numpy
        >>> es = cma.CMAEvolutionStrategy(numpy.ones(10), 1)
        >>> xx = numpy.random.randn(2, 10)
        >>> d = es.mahalanobis_norm(es.gp.geno(xx[0]-xx[1]))

        `d` is the distance \"in\" the true sample distribution,
        sampled points have a typical distance of ``sqrt(2*es.N)``,
        where ``es.N`` is the dimension, and an expected distance of
        close to ``sqrt(N)`` to the sample mean. In the example,
        `d` is the Euclidean distance, because C = I and sigma = 1.

        ")
                        (reparse-symbol indented_block_body) [187798 188842])
                    ("_metric_when_multiplied_with_sig_vec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [188888 188892])
                            ("sig" variable nil (reparse-symbol function_parameters) [188894 188897]))                          
                        :documentation "return D^-1 B^T diag(sig) B D as a measure for
        C^-1/2 diag(sig) C^1/2

        :param sig: a vector \"used\" as diagonal matrix
        :return:

        ")
                        (reparse-symbol indented_block_body) [188847 189143])
                    ("disp_annotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [189168 189172]))                          
                        :documentation "print annotation for `disp()`")
                        (reparse-symbol indented_block_body) [189148 189335])
                    ("disp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [189349 189353])
                            ("modulo" variable nil (reparse-symbol function_parameters) [189355 189361]))                          
                        :documentation "prints some single-line infos according to `disp_annotation()`,
        if ``iteration_counter % modulo == 0``

        ")
                        (reparse-symbol indented_block_body) [189340 190769])
                    ("plot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [190782 190786]))                          )
                        (reparse-symbol indented_block_body) [190773 191105]))                  
                :type "class")
                nil [104959 191105])
            ("cma_default_options" variable nil nil [191106 197558])
            ("CMAOptions" type
               (:documentation "``CMAOptions()`` returns a dictionary with the available options
    and their default values for class ``CMAEvolutionStrategy``.

    ``CMAOptions('pop')`` returns a subset of recognized options that
    contain 'pop' in there keyword name or (default) value or description.

    ``CMAOptions(opts)`` returns the subset of recognized options in
    ``dict(opts)``.

    Option values can be \"written\" in a string and, when passed to fmin
    or CMAEvolutionStrategy, are evaluated using \"N\" and \"popsize\" as
    known values for dimension and population size (sample size, number
    of new solutions per iteration). All default option values are such
    a string.

    Details
    -------
    ``CMAOptions`` entries starting with ``tol`` are termination
    \"tolerances\".

    For `tolstagnation`, the median over the first and the second half
    of at least `tolstagnation` iterations are compared for both, the
    per-iteration best and per-iteration median function value.

    Example
    -------
    ::

        import cma
        cma.CMAOptions('tol')

    is a shortcut for cma.CMAOptions().match('tol') that returns all options
    that contain 'tol' in their name or description.

    To set an option

        import cma
        opts = cma.CMAOptions()
        opts.set('tolfun', 1e-12)
        opts['tolx'] = 1e-11

    :See: `fmin`(), `CMAEvolutionStrategy`, `_CMAParameters`

    "
                :superclasses ("dict")
                :members 
                  ( ("defaults" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "return a dictionary with default option values and description")
                        (reparse-symbol indented_block_body) [199175 199364])
                    ("versatile_options" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "return list of options that can be changed at any time (not
        only be initialized), however the list might not be entirely up
        to date.

        The string ' #v ' in the default value indicates a 'versatile'
        option that can be changed any time.

        ")
                        (reparse-symbol indented_block_body) [199470 199908])
                    ("check" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [199922 199926])
                            ("options" variable nil (reparse-symbol function_parameters) [199928 199935]))                          
                        :documentation "check for ambiguous keys and move attributes into dict")
                        (reparse-symbol indented_block_body) [199912 200141])
                    ("check_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [200162 200166])
                            ("options" variable nil (reparse-symbol function_parameters) [200168 200175]))                          )
                        (reparse-symbol indented_block_body) [200145 200929])
                    ("check_attributes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [200954 200958])
                            ("opts" variable nil (reparse-symbol function_parameters) [200960 200964]))                          
                        :documentation "check for attributes and moves them into the dictionary")
                        (reparse-symbol indented_block_body) [200933 202322])
                    ("merge" function
                       (:typemodifiers ("static")
                        :documentation "not is use so far, see check()"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [202355 202359])
                            ("dict_" variable nil (reparse-symbol function_parameters) [202361 202366]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :parent "dummy")
                        (reparse-symbol indented_block_body) [202327 202670])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"return an `CMAOptions` instance, either with the default
        options, if ``s is None``, or with all options whose name or
        description contains `s`, if `s` is a string (case is
        disregarded), or with entries from dictionary `s` as options,
        not complemented with default options or settings

        Returns: see above.

        \"\"\"" code nil (reparse-symbol indented_block_body) [202728 203088])
                            ("if" code nil (reparse-symbol indented_block_body) [203226 203621])
                            ("if" code nil (reparse-symbol indented_block_body) [203630 204147])
                            ("self" variable nil (reparse-symbol indented_block_body) [204220 204246])
                            ("self" variable nil (reparse-symbol indented_block_body) [204255 204294])
                            ("self" variable nil (reparse-symbol indented_block_body) [204325 204380]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [202688 202692])
                            ("s" variable nil (reparse-symbol function_parameters) [202694 202695])
                            ("unchecked" variable nil (reparse-symbol function_parameters) [202702 202711]))                          
                        :documentation "return an `CMAOptions` instance, either with the default
        options, if ``s is None``, or with all options whose name or
        description contains `s`, if `s` is a string (case is
        disregarded), or with entries from dictionary `s` as options,
        not complemented with default options or settings

        Returns: see above.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [202675 204381])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [204395 204399])
                            ("dict_or_str" variable nil (reparse-symbol function_parameters) [204401 204412])
                            ("val" variable nil (reparse-symbol function_parameters) [204414 204417])
                            ("warn" variable nil (reparse-symbol function_parameters) [204424 204428]))                          
                        :documentation "initialize one or several options.

        Arguments
        ---------
            `dict_or_str`
                a dictionary if ``val is None``, otherwise a key.
                If `val` is provided `dict_or_str` must be a valid key.
            `val`
                value for key

        Details
        -------
        Only known keys are accepted. Known keys are in `CMAOptions.defaults()`

        ")
                        (reparse-symbol indented_block_body) [204386 205434])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [205447 205451])
                            ("dic" variable nil (reparse-symbol function_parameters) [205453 205456])
                            ("val" variable nil (reparse-symbol function_parameters) [205458 205461])
                            ("force" variable nil (reparse-symbol function_parameters) [205468 205473]))                          
                        :documentation "set can assign versatile options from
        `CMAOptions.versatile_options()` with a new value, use `init()`
        for the others.

        Arguments
        ---------
            `dic`
                either a dictionary or a key. In the latter
                case, `val` must be provided
            `val`
                value for `key`, approximate match is sufficient
            `force`
                force setting of non-versatile options, use with caution

        This method will be most probably used with the ``opts`` attribute of
        a `CMAEvolutionStrategy` instance.

        ")
                        (reparse-symbol indented_block_body) [205439 206711])
                    ("complement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [206731 206735]))                          
                        :documentation "add all missing options with their default values")
                        (reparse-symbol indented_block_body) [206716 207032])
                    ("settable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [207050 207054]))                          
                        :documentation "return the subset of those options that are settable at any
        time.

        Settable options are in `versatile_options()`, but the
        list might be incomplete.

        ")
                        (reparse-symbol indented_block_body) [207037 207386])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [207404 207408])
                            ("key" variable nil (reparse-symbol function_parameters) [207410 207413])
                            ("default" variable nil (reparse-symbol function_parameters) [207415 207422])
                            ("loc" variable nil (reparse-symbol function_parameters) [207429 207432]))                          
                        :documentation "evaluate and return the value of option `key` on the fly, or
        returns those options whose name or description contains `key`,
        case disregarded.

        Details
        -------
        Keys that contain `filename` are not evaluated.
        For ``loc==None``, `self` is used as environment
        but this does not define ``N``.

        :See: `eval()`, `evalall()`

        ")
                        (reparse-symbol indented_block_body) [207391 208793])
                    ("corrected_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [208816 208820])
                            ("key" variable nil (reparse-symbol function_parameters) [208822 208825]))                          
                        :documentation "return the matching valid key, if ``key.lower()`` is a unique
        starting sequence to identify the valid key, ``else None``

        ")
                        (reparse-symbol indented_block_body) [208798 209323])
                    ("eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [209337 209341])
                            ("key" variable nil (reparse-symbol function_parameters) [209343 209346])
                            ("default" variable nil (reparse-symbol function_parameters) [209348 209355])
                            ("loc" variable nil (reparse-symbol function_parameters) [209362 209365])
                            ("correct_key" variable nil (reparse-symbol function_parameters) [209372 209383]))                          
                        :documentation "Evaluates and sets the specified option value in
        environment `loc`. Many options need ``N`` to be defined in
        `loc`, some need `popsize`.

        Details
        -------
        Keys that contain 'filename' are not evaluated.
        For `loc` is None, the self-dict is used as environment

        :See: `evalall()`, `__call__`

        ")
                        (reparse-symbol indented_block_body) [209328 209991])
                    ("evalall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [210008 210012])
                            ("loc" variable nil (reparse-symbol function_parameters) [210014 210017])
                            ("defaults" variable nil (reparse-symbol function_parameters) [210024 210032]))                          
                        :documentation "Evaluates all option values in environment `loc`.

        :See: `eval()`

        ")
                        (reparse-symbol indented_block_body) [209996 210665])
                    ("match" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [210680 210684])
                            ("s" variable nil (reparse-symbol function_parameters) [210686 210687]))                          
                        :documentation "return all options that match, in the name or the description,
        with string `s`, case is disregarded.

        Example: ``cma.CMAOptions().match('verb')`` returns the verbosity
        options.

        ")
                        (reparse-symbol indented_block_body) [210670 211160])
                    ("pp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [211172 211176]))                          )
                        (reparse-symbol indented_block_body) [211165 211200])
                    ("pprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [211216 211220])
                            ("linebreak" variable nil (reparse-symbol function_parameters) [211222 211231]))                          )
                        (reparse-symbol indented_block_body) [211205 211641])
                    ("print_" variable nil (reparse-symbol indented_block_body) [211645 211660])
                    ("printme" variable nil (reparse-symbol indented_block_body) [211712 211728]))                  
                :type "class")
                nil [197559 211729])
            ("_CMAStopDict" type
               (:documentation "keep and update a termination condition dictionary, which is
    \"usually\" empty and returned by `CMAEvolutionStrategy.stop()`.
    The class methods entirely depend on `CMAEvolutionStrategy` class
    attributes.

    Details
    -------
    This class is not relevant for the end-user and could be a nested
    class, but nested classes cannot be serialized.

    Example
    -------
    >>> import cma
    >>> es = cma.CMAEvolutionStrategy(4 * [1], 1, {'verbose':-1})
    >>> print(es.stop())
    {}
    >>> es.optimize(cma.fcts.sphere, verb_disp=0)
    >>> print(es.stop())
    {'tolfun': 1e-11}

    :See: `OOOptimizer.stop()`, `CMAEvolutionStrategy.stop()`

    "
                :superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("update" variable nil (reparse-symbol indented_block_body) [212599 212643])
                            ("super" code nil (reparse-symbol indented_block_body) [212652 212707])
                            ("self" variable nil (reparse-symbol indented_block_body) [212716 212735])
                            ("self" variable nil (reparse-symbol indented_block_body) [212772 212789])
                            ("if" code nil (reparse-symbol indented_block_body) [212824 212995])
                            ("if" code nil (reparse-symbol indented_block_body) [213003 213042]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [212578 212582])
                            ("d" variable nil (reparse-symbol function_parameters) [212584 212585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [212565 213042])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [213060 213064])
                            ("es" variable nil (reparse-symbol function_parameters) [213066 213068])
                            ("check" variable nil (reparse-symbol function_parameters) [213075 213080]))                          
                        :documentation "update and return the termination conditions dictionary

        ")
                        (reparse-symbol indented_block_body) [213047 213387])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [213404 213408])
                            ("es" variable nil (reparse-symbol function_parameters) [213410 213412]))                          
                        :documentation "Test termination criteria and update dictionary

        ")
                        (reparse-symbol indented_block_body) [213392 218536])
                    ("_addstop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [218554 218558])
                            ("key" variable nil (reparse-symbol function_parameters) [218560 218563])
                            ("cond" variable nil (reparse-symbol function_parameters) [218565 218569])
                            ("val" variable nil (reparse-symbol function_parameters) [218571 218574]))                          )
                        (reparse-symbol indented_block_body) [218541 218775])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [218790 218794]))                          )
                        (reparse-symbol indented_block_body) [218780 218877]))                  
                :type "class")
                nil [211856 218877])
            ("_CMAParameters" type
               (:documentation "strategy parameters like population size and learning rates.

    Note:
        contrary to `CMAOptions`, `_CMAParameters` is not (yet) part of the
        \"user-interface\" and subject to future changes (it might become
        a `collections.namedtuple`)

    Example
    -------
    >>> import cma
    >>> es = cma.CMAEvolutionStrategy(20 * [0.1], 1)
    (6_w,12)-CMA-ES (mu_w=3.7,w_1=40%) in dimension 20 (seed=504519190)  # the seed is \"random\" by default
    >>>
    >>> type(es.sp)  # sp contains the strategy parameters
    <class 'cma._CMAParameters'>
    >>>
    >>> es.sp.disp()
    {'CMA_on': True,
     'N': 20,
     'c1': 0.004181139918745593,
     'c1_sep': 0.034327992810300939,
     'cc': 0.17176721127681213,
     'cc_sep': 0.25259494835857677,
     'cmean': 1.0,
     'cmu': 0.0085149624979034746,
     'cmu_sep': 0.057796356229390715,
     'cs': 0.21434997799189287,
     'damps': 1.2143499779918929,
     'mu': 6,
     'mu_f': 6.0,
     'mueff': 3.7294589343030671,
     'popsize': 12,
     'rankmualpha': 0.3,
     'weights': array([ 0.40240294,  0.25338908,  0.16622156,  0.10437523,  0.05640348,
            0.01720771])}
    >>>
    >> es.sp == cma._CMAParameters(20, 12, cma.CMAOptions().evalall({'N': 20}))
    True

    :See: `CMAOptions`, `CMAEvolutionStrategy`

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Compute strategy parameters, mainly depending on
        dimension and population size, by calling `set`

        \"\"\"" code nil (reparse-symbol indented_block_body) [220406 220526])
                            ("self" variable nil (reparse-symbol indented_block_body) [220535 220545])
                            ("if" code nil (reparse-symbol indented_block_body) [220554 220625])
                            ("self" variable nil (reparse-symbol indented_block_body) [220633 220652])
                            ("self" code nil (reparse-symbol indented_block_body) [220710 220758]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [220357 220361])
                            ("N" variable nil (reparse-symbol function_parameters) [220363 220364])
                            ("opts" variable nil (reparse-symbol function_parameters) [220366 220370])
                            ("ccovfac" variable nil (reparse-symbol function_parameters) [220372 220379])
                            ("verbose" variable nil (reparse-symbol function_parameters) [220383 220390]))                          
                        :documentation "Compute strategy parameters, mainly depending on
        dimension and population size, by calling `set`

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [220344 220759])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [220772 220776])
                            ("opts" variable nil (reparse-symbol function_parameters) [220778 220782])
                            ("popsize" variable nil (reparse-symbol function_parameters) [220784 220791])
                            ("ccovfac" variable nil (reparse-symbol function_parameters) [220798 220805])
                            ("verbose" variable nil (reparse-symbol function_parameters) [220809 220816]))                          
                        :documentation "Compute strategy parameters as a function
        of dimension and population size ")
                        (reparse-symbol indented_block_body) [220764 228160])
                    ("disp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [228231 228235]))                          )
                        (reparse-symbol indented_block_body) [228222 228268]))                  
                :type "class")
                nil [219004 228268])
            ("fmin" function
               (:documentation "functional interface to the stochastic optimizer CMA-ES
    for non-convex function minimization.

    Calling Sequences
    =================
        ``fmin(objective_function, x0, sigma0)``
            minimizes `objective_function` starting at `x0` and with standard deviation
            `sigma0` (step-size)
        ``fmin(objective_function, x0, sigma0, options={'ftarget': 1e-5})``
            minimizes `objective_function` up to target function value 1e-5, which
            is typically useful for benchmarking.
        ``fmin(objective_function, x0, sigma0, args=('f',))``
            minimizes `objective_function` called with an additional argument ``'f'``.
        ``fmin(objective_function, x0, sigma0, options={'ftarget':1e-5, 'popsize':40})``
            uses additional options ``ftarget`` and ``popsize``
        ``fmin(objective_function, esobj, None, options={'maxfevals': 1e5})``
            uses the `CMAEvolutionStrategy` object instance `esobj` to optimize
            `objective_function`, similar to `esobj.optimize()`.

    Arguments
    =========
        `objective_function`
            function to be minimized. Called as ``objective_function(x,
            *args)``. `x` is a one-dimensional `numpy.ndarray`.
            `objective_function` can return `numpy.NaN`,
            which is interpreted as outright rejection of solution `x`
            and invokes an immediate resampling and (re-)evaluation
            of a new solution not counting as function evaluation.
        `x0`
            list or `numpy.ndarray`, initial guess of minimum solution
            before the application of the geno-phenotype transformation
            according to the ``transformation`` option.  It can also be
            a string holding a Python expression that is evaluated
            to yield the initial guess - this is important in case
            restarts are performed so that they start from different
            places.  Otherwise `x0` can also be a `cma.CMAEvolutionStrategy`
            object instance, in that case `sigma0` can be ``None``.
        `sigma0`
            scalar, initial standard deviation in each coordinate.
            `sigma0` should be about 1/4th of the search domain width
            (where the optimum is to be expected). The variables in
            `objective_function` should be scaled such that they
            presumably have similar sensitivity.
            See also option `scaling_of_variables`.
        `options`
            a dictionary with additional options passed to the constructor
            of class ``CMAEvolutionStrategy``, see ``cma.CMAOptions()``
            for a list of available options.
        ``args=()``
            arguments to be used to call the `objective_function`
        ``gradf``
            gradient of f, where ``len(gradf(x, *args)) == len(x)``.
            `gradf` is called once in each iteration if
            ``gradf is not None``.
        ``restarts=0``
            number of restarts with increasing population size, see also
            parameter `incpopsize`, implementing the IPOP-CMA-ES restart
            strategy, see also parameter `bipop`; to restart from
            different points (recommended), pass `x0` as a string.
        ``restart_from_best=False``
            which point to restart from
        ``incpopsize=2``
            multiplier for increasing the population size `popsize` before
            each restart
        ``eval_initial_x=None``
            evaluate initial solution, for `None` only with elitist option
        ``noise_handler=None``
            a ``NoiseHandler`` instance or ``None``, a simple usecase is
            ``cma.fmin(f, 6 * [1], 1, noise_handler=cma.NoiseHandler(6))``
            see ``help(cma.NoiseHandler)``.
        ``noise_change_sigma_exponent=1``
            exponent for sigma increment for additional noise treatment
        ``noise_evaluations_as_kappa``
            instead of applying reevaluations, the \"number of evaluations\"
            is (ab)used as scaling factor kappa (experimental).
        ``bipop``
            if True, run as BIPOP-CMA-ES; BIPOP is a special restart
            strategy switching between two population sizings - small
            (like the default CMA, but with more focused search) and
            large (progressively increased as in IPOP). This makes the
            algorithm perform well both on functions with many regularly
            or irregularly arranged local optima (the latter by frequently
            restarting with small populations).  For the `bipop` parameter
            to actually take effect, also select non-zero number of
            (IPOP) restarts; the recommended setting is ``restarts<=9``
            and `x0` passed as a string.  Note that small-population
            restarts do not count into the total restart count.

    Optional Arguments
    ==================
    All values in the `options` dictionary are evaluated if they are of
    type `str`, besides `verb_filenameprefix`, see class `CMAOptions` for
    details. The full list is available via ``cma.CMAOptions()``.

    >>> import cma
    >>> cma.CMAOptions()

    Subsets of options can be displayed, for example like
    ``cma.CMAOptions('tol')``, or ``cma.CMAOptions('bound')``,
    see also class `CMAOptions`.

    Return
    ======
    Return the list provided by `CMAEvolutionStrategy.result()` appended
    with termination conditions, an `OOOptimizer` and a `BaseDataLogger`::

        res = es.result() + (es.stop(), es, logger)

    where
        - ``res[0]`` (``xopt``) -- best evaluated solution
        - ``res[1]`` (``fopt``) -- respective function value
        - ``res[2]`` (``evalsopt``) -- respective number of function evaluations
        - ``res[3]`` (``evals``) -- number of overall conducted objective function evaluations
        - ``res[4]`` (``iterations``) -- number of overall conducted iterations
        - ``res[5]`` (``xmean``) -- mean of the final sample distribution
        - ``res[6]`` (``stds``) -- effective stds of the final sample distribution
        - ``res[-3]`` (``stop``) -- termination condition(s) in a dictionary
        - ``res[-2]`` (``cmaes``) -- class `CMAEvolutionStrategy` instance
        - ``res[-1]`` (``logger``) -- class `CMADataLogger` instance

    Details
    =======
    This function is an interface to the class `CMAEvolutionStrategy`. The
    latter class should be used when full control over the iteration loop
    of the optimizer is desired.

    Examples
    ========
    The following example calls `fmin` optimizing the Rosenbrock function
    in 10-D with initial solution 0.1 and initial step-size 0.5. The
    options are specified for the usage with the `doctest` module.

    >>> import cma
    >>> # cma.CMAOptions()  # returns all possible options
    >>> options = {'CMA_diagonal':100, 'seed':1234, 'verb_time':0}
    >>>
    >>> res = cma.fmin(cma.fcts.rosen, [0.1] * 10, 0.5, options)
    (5_w,10)-CMA-ES (mu_w=3.2,w_1=45%) in dimension 10 (seed=1234)
       Covariance matrix is diagonal for 10 iterations (1/ccov=29.0)
    Iterat #Fevals   function value     axis ratio  sigma   minstd maxstd min:sec
        1      10 1.264232686260072e+02 1.1e+00 4.40e-01  4e-01  4e-01
        2      20 1.023929748193649e+02 1.1e+00 4.00e-01  4e-01  4e-01
        3      30 1.214724267489674e+02 1.2e+00 3.70e-01  3e-01  4e-01
      100    1000 6.366683525319511e+00 6.2e+00 2.49e-02  9e-03  3e-02
      200    2000 3.347312410388666e+00 1.2e+01 4.52e-02  8e-03  4e-02
      300    3000 1.027509686232270e+00 1.3e+01 2.85e-02  5e-03  2e-02
      400    4000 1.279649321170636e-01 2.3e+01 3.53e-02  3e-03  3e-02
      500    5000 4.302636076186532e-04 4.6e+01 4.78e-03  3e-04  5e-03
      600    6000 6.943669235595049e-11 5.1e+01 5.41e-06  1e-07  4e-06
      650    6500 5.557961334063003e-14 5.4e+01 1.88e-07  4e-09  1e-07
    termination on tolfun : 1e-11
    final/bestever f-value = 5.55796133406e-14 2.62435631419e-14
    mean solution:  [ 1.          1.00000001  1.          1.
        1.          1.00000001  1.00000002  1.00000003 ...]
    std deviation: [ 3.9193387e-09  3.7792732e-09  4.0062285e-09  4.6605925e-09
        5.4966188e-09   7.4377745e-09   1.3797207e-08   2.6020765e-08 ...]
    >>>
    >>> print('best solutions fitness = %f' % (res[1]))
    best solutions fitness = 2.62435631419e-14
    >>> assert res[1] < 1e-12

    The above call is pretty much equivalent with the slightly more
    verbose call::

        es = cma.CMAEvolutionStrategy([0.1] * 10, 0.5,
                    options=options).optimize(cma.fcts.rosen)

    The following example calls `fmin` optimizing the Rastrigin function
    in 3-D with random initial solution in [-2,2], initial step-size 0.5
    and the BIPOP restart strategy (that progressively increases population).
    The options are specified for the usage with the `doctest` module.

    >>> import cma
    >>> # cma.CMAOptions()  # returns all possible options
    >>> options = {'seed':12345, 'verb_time':0, 'ftarget': 1e-8}
    >>>
    >>> res = cma.fmin(cma.fcts.rastrigin, '2. * np.random.rand(3) - 1', 0.5,
    ...                options, restarts=9, bipop=True)
    (3_w,7)-aCMA-ES (mu_w=2.3,w_1=58%) in dimension 3 (seed=12345)
    Iterat #Fevals   function value    axis ratio  sigma  minstd maxstd min:sec
        1       7 1.633489455763566e+01 1.0e+00 4.35e-01  4e-01  4e-01
        2      14 9.762462950258016e+00 1.2e+00 4.12e-01  4e-01  4e-01
        3      21 2.461107851413725e+01 1.4e+00 3.78e-01  3e-01  4e-01
      100     700 9.949590571272680e-01 1.7e+00 5.07e-05  3e-07  5e-07
      123     861 9.949590570932969e-01 1.3e+00 3.93e-06  9e-09  1e-08
    termination on tolfun=1e-11
    final/bestever f-value = 9.949591e-01 9.949591e-01
    mean solution: [  9.94958638e-01  -7.19265205e-10   2.09294450e-10]
    std deviation: [  8.71497860e-09   8.58994807e-09   9.85585654e-09]
    [...]
    (4_w,9)-aCMA-ES (mu_w=2.8,w_1=49%) in dimension 3 (seed=12349)
    Iterat #Fevals   function value    axis ratio  sigma  minstd maxstd min:sec
        1  5342.0 2.114883315350800e+01 1.0e+00 3.42e-02  3e-02  4e-02
        2  5351.0 1.810102940125502e+01 1.4e+00 3.79e-02  3e-02  4e-02
        3  5360.0 1.340222457448063e+01 1.4e+00 4.58e-02  4e-02  6e-02
       50  5783.0 8.631491965616078e-09 1.6e+00 2.01e-04  8e-06  1e-05
    termination on ftarget=1e-08 after 4 restarts
    final/bestever f-value = 8.316963e-09 8.316963e-09
    mean solution: [ -3.10652459e-06   2.77935436e-06  -4.95444519e-06]
    std deviation: [  1.02825265e-05   8.08348144e-06   8.47256408e-06]

    In either case, the method::

        cma.plot();

    (based on `matplotlib.pyplot`) produces a plot of the run and, if
    necessary::

        cma.show()

    shows the plot in a window. Finally::

        cma.savefig('myfirstrun')  # savefig from matplotlib.pyplot

    will save the figure in a png.

    We can use the gradient like

    >>> import cma
    >>> res = cma.fmin(cma.fcts.rosen, np.zeros(10), 0.1,
    ...             options = {'ftarget':1e-8,},
    ...             gradf=cma.fcts.grad_rosen,
    ...         )
    >>> assert cma.fcts.rosen(res[0]) < 1e-8
    >>> assert res[2] < 3600  # 1% are > 3300
    >>> assert res[3] < 3600  # 1% are > 3300

    :See: `CMAEvolutionStrategy`, `OOOptimizer.optimize(), `plot()`,
        `CMAOptions`, `scipy.optimize.fmin()`

    "
                :arguments 
                  ( ("objective_function" variable nil (reparse-symbol function_parameters) [228278 228296])
                    ("x0" variable nil (reparse-symbol function_parameters) [228298 228300])
                    ("sigma0" variable nil (reparse-symbol function_parameters) [228302 228308])
                    ("options" variable nil (reparse-symbol function_parameters) [228319 228326])
                    ("args" variable nil (reparse-symbol function_parameters) [228342 228346])
                    ("gradf" variable nil (reparse-symbol function_parameters) [228360 228365])
                    ("restarts" variable nil (reparse-symbol function_parameters) [228381 228389])
                    ("restart_from_best" variable nil (reparse-symbol function_parameters) [228402 228419])
                    ("incpopsize" variable nil (reparse-symbol function_parameters) [228438 228448])
                    ("eval_initial_x" variable nil (reparse-symbol function_parameters) [228461 228475])
                    ("noise_handler" variable nil (reparse-symbol function_parameters) [228492 228505])
                    ("noise_change_sigma_exponent" variable nil (reparse-symbol function_parameters) [228521 228548])
                    ("noise_kappa_exponent" variable nil (reparse-symbol function_parameters) [228561 228581])
                    ("bipop" variable nil (reparse-symbol function_parameters) [228636 228641]))                  )
                nil [228269 251036])
            ("BaseDataLogger" type
               (:documentation "\"abstract\" base class for a data logger that can be used with an `OOOptimizer`

    Details: attribute `modulo` is used in ``OOOptimizer.optimize``

    "
                :superclasses ("object")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [251389 251393])
                            ("optim" variable nil (reparse-symbol function_parameters) [251395 251400])
                            ("more_data" variable nil (reparse-symbol function_parameters) [251407 251416]))                          
                        :documentation "abstract method, add a \"data point\" from the state of `optim` into the
        logger, the argument `optim` can be omitted if it was `register()`-ed before,
        acts like an event handler")
                        (reparse-symbol indented_block_body) [251381 251662])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [251679 251683])
                            ("optim" variable nil (reparse-symbol function_parameters) [251685 251690]))                          
                        :documentation "abstract method, register an optimizer `optim`, only needed if `add()` is
        called without a value for the `optim` argument")
                        (reparse-symbol indented_block_body) [251666 251864])
                    ("disp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [251877 251881]))                          
                        :documentation "display some data trace (not implemented)")
                        (reparse-symbol indented_block_body) [251868 252045])
                    ("plot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [252058 252062]))                          
                        :documentation "plot data (not implemented)")
                        (reparse-symbol indented_block_body) [252049 252215])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [252228 252232]))                          
                        :documentation "return logged data in a dictionary (not implemented)")
                        (reparse-symbol indented_block_body) [252219 252410]))                  
                :type "class")
                nil [251183 252410])
            ("CMADataLogger" type
               (:documentation "data logger for class `CMAEvolutionStrategy`. The logger is
    identified by its name prefix and (over-)writes or reads according
    data files. Therefore, the logger must be considered as *global* variable
    with unpredictable side effects, if two loggers with the same name
    and on the same working folder are used at the same time.

    Examples
    ========
    ::

        import cma
        es = cma.CMAEvolutionStrategy(...)
        logger = cma.CMADataLogger().register(es)
        while not es.stop():
            ...
            logger.add()  # add can also take an argument

        logger.plot() # or a short cut can be used:
        cma.plot()  # plot data from logger with default name


        logger2 = cma.CMADataLogger('just_another_filename_prefix').load()
        logger2.plot()
        logger2.disp()

    ::

        import cma
        from matplotlib.pylab import *
        res = cma.fmin(cma.Fcts.sphere, rand(10), 1e-0)
        logger = res[-1]  # the CMADataLogger
        logger.load()  # by \"default\" data are on disk
        semilogy(logger.f[:,0], logger.f[:,5])  # plot f versus iteration, see file header
        show()

    Details
    =======
    After loading data, the logger has the attributes `xmean`, `xrecent`,
    `std`, `f`, `D` and `corrspec` corresponding to ``xmean``,
    ``xrecentbest``, ``stddev``, ``fit``, ``axlen`` and ``axlencorr``
    filename trails.

    :See: `disp()`, `plot()`

    "
                :superclasses ("BaseDataLogger")
                :members 
                  ( ("default_prefix" variable nil (reparse-symbol indented_block_body) [254057 254084])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"initialize logging of data from a `CMAEvolutionStrategy`
        instance, default ``modulo=1`` means logging with each call

        \"\"\"" code nil (reparse-symbol indented_block_body) [254293 254433])
                            ("CMADataLogger" code nil (reparse-symbol indented_block_body) [254653 254681])
                            ("if" code nil (reparse-symbol indented_block_body) [254690 254843])
                            ("self" variable nil (reparse-symbol indented_block_body) [254851 254948])
                            ("\"\"\"used in load, however hard-coded in add\"\"\"" code nil (reparse-symbol indented_block_body) [254957 255002])
                            ("self" variable nil (reparse-symbol indented_block_body) [255011 255077])
                            ("\"\"\"used in load, however hard-coded in plot\"\"\"" code nil (reparse-symbol indented_block_body) [255086 255132])
                            ("self" variable nil (reparse-symbol indented_block_body) [255141 255202])
                            ("\"\"\"used in load to add one data row to be modified in plot\"\"\"" code nil (reparse-symbol indented_block_body) [255211 255272])
                            ("self" variable nil (reparse-symbol indented_block_body) [255281 255301])
                            ("\"\"\"how often to record data, allows calling `add` without args\"\"\"" code nil (reparse-symbol indented_block_body) [255310 255375])
                            ("self" variable nil (reparse-symbol indented_block_body) [255384 255404])
                            ("\"\"\"append to previous data\"\"\"" code nil (reparse-symbol indented_block_body) [255413 255442])
                            ("self" variable nil (reparse-symbol indented_block_body) [255451 255467])
                            ("\"\"\"number of calls to `add`\"\"\"" code nil (reparse-symbol indented_block_body) [255476 255506])
                            ("self" variable nil (reparse-symbol indented_block_body) [255515 255538])
                            ("self" variable nil (reparse-symbol indented_block_body) [255547 255570])
                            ("self" variable nil (reparse-symbol indented_block_body) [255579 255616])
                            ("self" variable nil (reparse-symbol indented_block_body) [255625 255648]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [254226 254230])
                            ("name_prefix" variable nil (reparse-symbol function_parameters) [254232 254243])
                            ("modulo" variable nil (reparse-symbol function_parameters) [254260 254266])
                            ("append" variable nil (reparse-symbol function_parameters) [254270 254276]))                          
                        :documentation "initialize logging of data from a `CMAEvolutionStrategy`
        instance, default ``modulo=1`` means logging with each call

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [254213 255665])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [255678 255682]))                          
                        :documentation "return dictionary with data.

        If data entries are None or incomplete, consider calling
        ``.load().data()`` to (re-)load the data from files first.

        ")
                        (reparse-symbol indented_block_body) [255669 255991])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [256008 256012])
                            ("es" variable nil (reparse-symbol function_parameters) [256014 256016])
                            ("append" variable nil (reparse-symbol function_parameters) [256018 256024])
                            ("modulo" variable nil (reparse-symbol function_parameters) [256031 256037]))                          
                        :documentation "register a `CMAEvolutionStrategy` instance for logging,
        ``append=True`` appends to previous data logged under the same name,
        by default previous data are overwritten.

        ")
                        (reparse-symbol indented_block_body) [255995 256631])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [256651 256655])
                            ("modulo" variable nil (reparse-symbol function_parameters) [256657 256663]))                          
                        :documentation "reset logger, overwrite original files, `modulo`: log only every modulo call")
                        (reparse-symbol indented_block_body) [256636 260444])
                    ("load" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [260481 260485])
                            ("filenameprefix" variable nil (reparse-symbol function_parameters) [260487 260501]))                          
                        :documentation "load (or reload) data from output files, `load()` is called in
        `plot()` and `disp()`.

        Argument `filenameprefix` is the filename prefix of data to be
        loaded (six files), by default ``'outcmaes'``.

        Return self with (added) attributes `xrecent`, `xmean`,
        `f`, `D`, `std`, 'corrspec'

        ")
                        (reparse-symbol indented_block_body) [260472 261903])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261916 261920])
                            ("es" variable nil (reparse-symbol function_parameters) [261922 261924])
                            ("more_data" variable nil (reparse-symbol function_parameters) [261931 261940])
                            ("modulo" variable nil (reparse-symbol function_parameters) [261945 261951]))                          
                        :documentation "append some logging data from `CMAEvolutionStrategy` class instance `es`,
        if ``number_of_times_called % modulo`` equals to zero, never if ``modulo==0``.

        The sequence ``more_data`` must always have the same length.

        When used for a different optimizer class, this function can be
        (easily?) adapted by changing the assignments under INTERFACE
        in the implemention.

        ")
                        (reparse-symbol indented_block_body) [261908 269131])
                    ("closefig" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [269149 269153]))                          )
                        (reparse-symbol indented_block_body) [269136 269193])
                    ("save_to" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [269210 269214])
                            ("nameprefix" variable nil (reparse-symbol function_parameters) [269216 269226])
                            ("switch" variable nil (reparse-symbol function_parameters) [269228 269234]))                          
                        :documentation "saves logger data to a different set of files, for
        ``switch=True`` also the loggers name prefix is switched to
        the new value

        ")
                        (reparse-symbol indented_block_body) [269198 269960])
                    ("select_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [269980 269984])
                            ("iteration_indices" variable nil (reparse-symbol function_parameters) [269986 270003]))                          
                        :documentation "keep only data of `iteration_indices`")
                        (reparse-symbol indented_block_body) [269964 271048])
                    ("plot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [271061 271065])
                            ("fig" variable nil (reparse-symbol function_parameters) [271067 271070])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [271077 271086])
                            ("iteridx" variable nil (reparse-symbol function_parameters) [271090 271097])
                            ("plot_mean" variable nil (reparse-symbol function_parameters) [271117 271126])
                            ("foffset" variable nil (reparse-symbol function_parameters) [271169 271176])
                            ("x_opt" variable nil (reparse-symbol function_parameters) [271184 271189])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [271196 271204]))                          
                        :documentation "plot data from a `CMADataLogger` (using the files written 
        by the logger).

        Arguments
        ---------
            `fig`
                figure number, by default 325
            `iabscissa`
                ``0==plot`` versus iteration count,
                ``1==plot`` versus function evaluation number
            `iteridx`
                iteration indices to plot

        Return `CMADataLogger` itself.

        Examples
        --------
        ::

            import cma
            logger = cma.CMADataLogger()  # with default name
            # try to plot the \"default logging\" data (e.g.
            #   from previous fmin calls, which is essentially what
            #   also cma.plot() does)
            logger.plot()
            cma.savefig('fig325.png')  # save current figure
            logger.closefig()

        Dependencies: matlabplotlib/pyplot.

        ")
                        (reparse-symbol indented_block_body) [271052 274003])
                    ("plot_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [274020 274024])
                            ("fig" variable nil (reparse-symbol function_parameters) [274026 274029])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [274036 274045])
                            ("iteridx" variable nil (reparse-symbol function_parameters) [274049 274056])
                            ("foffset" variable nil (reparse-symbol function_parameters) [274076 274083])
                            ("x_opt" variable nil (reparse-symbol function_parameters) [274091 274096])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [274103 274111]))                          
                        :documentation "
        plot data from a `CMADataLogger` (using the files written by the logger).

        Arguments
        ---------
            `fig`
                figure number, by default 425
            `iabscissa`
                ``0==plot`` versus iteration count,
                ``1==plot`` versus function evaluation number
            `iteridx`
                iteration indices to plot

        Return `CMADataLogger` itself.

        Examples
        --------
        ::

            import cma
            logger = cma.CMADataLogger()  # with default name
            # try to plot the \"default logging\" data (e.g.
            #   from previous fmin calls, which is essentially what
            #   also cma.plot() does)
            logger.plot_all()
            cma.savefig('fig425.png')  # save current figure
            logger.closefig()

        Dependencies: matlabplotlib/pyplot.

        ")
                        (reparse-symbol indented_block_body) [274007 276781])
                    ("plot_axes_scaling" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [276807 276811])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [276813 276822]))                          )
                        (reparse-symbol indented_block_body) [276785 277317])
                    ("plot_stds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [277335 277339])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [277341 277350]))                          )
                        (reparse-symbol indented_block_body) [277321 279730])
                    ("plot_mean" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [279748 279752])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [279754 279763])
                            ("x_opt" variable nil (reparse-symbol function_parameters) [279767 279772])
                            ("annotations" variable nil (reparse-symbol function_parameters) [279779 279790]))                          )
                        (reparse-symbol indented_block_body) [279734 280013])
                    ("plot_xrecent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [280034 280038])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [280040 280049])
                            ("x_opt" variable nil (reparse-symbol function_parameters) [280053 280058])
                            ("annotations" variable nil (reparse-symbol function_parameters) [280065 280076]))                          )
                        (reparse-symbol indented_block_body) [280017 280308])
                    ("plot_correlations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [280334 280338])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [280340 280349]))                          
                        :documentation "spectrum of correlation matrix and largest correlation")
                        (reparse-symbol indented_block_body) [280312 281699])
                    ("plot_divers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [281719 281723])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [281725 281734])
                            ("foffset" variable nil (reparse-symbol function_parameters) [281738 281745]))                          
                        :documentation "plot fitness, sigma, axis ratio...

        :param iabscissa: 0 means vs evaluations, 1 means vs iterations
        :param foffset: added to f-value

        :See: `plot()`

        ")
                        (reparse-symbol indented_block_body) [281703 287845])
                    ("_enter_plotting" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [287869 287873])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [287875 287883]))                          
                        :documentation "assumes that a figure is open ")
                        (reparse-symbol indented_block_body) [287849 288191])
                    ("_finalize_plotting" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [288218 288222]))                          )
                        (reparse-symbol indented_block_body) [288195 288439])
                    ("_xlabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [288455 288459])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [288461 288470]))                          )
                        (reparse-symbol indented_block_body) [288443 288579])
                    ("_plot_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [288595 288599])
                            ("iabscissa" variable nil (reparse-symbol function_parameters) [288601 288610])
                            ("x_opt" variable nil (reparse-symbol function_parameters) [288614 288619])
                            ("remark" variable nil (reparse-symbol function_parameters) [288626 288632])
                            ("annotations" variable nil (reparse-symbol function_parameters) [288655 288666]))                          
                        :documentation "If ``x_opt is not None`` the difference to x_opt is plotted
        in log scale

        ")
                        (reparse-symbol indented_block_body) [288583 292461])
                    ("downsampling" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [292482 292486])
                            ("factor" variable nil (reparse-symbol function_parameters) [292488 292494])
                            ("first" variable nil (reparse-symbol function_parameters) [292499 292504])
                            ("switch" variable nil (reparse-symbol function_parameters) [292508 292514])
                            ("verbose" variable nil (reparse-symbol function_parameters) [292521 292528]))                          
                        :documentation "
        rude downsampling of a `CMADataLogger` data file by `factor`,
        keeping also the first `first` entries. This function is a
        stump and subject to future changes. Return self.

        Arguments
        ---------
           - `factor` -- downsampling factor
           - `first` -- keep first `first` entries
           - `switch` -- switch the new logger to the downsampled logger
                original_name+'down'

        Details
        -------
        ``self.name_prefix+'down'`` files are written

        Example
        -------
        ::

            import cma
            cma.downsampling()  # takes outcmaes* files
            cma.plot('outcmaesdown')

        ")
                        (reparse-symbol indented_block_body) [292465 293880])
                    ("disp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [294034 294038])
                            ("idx" variable nil (reparse-symbol function_parameters) [294040 294043]))                          
                        :documentation "displays selected data from (files written by) the class `CMADataLogger`.

        Arguments
        ---------
           `idx`
               indices corresponding to rows in the data file;
               if idx is a scalar (int), the first two, then every idx-th,
               and the last three rows are displayed. Too large index values are removed.

        Example
        -------
        >>> import cma, numpy as np
        >>> res = cma.fmin(cma.fcts.elli, 7 * [0.1], 1, {'verb_disp':1e9})  # generate data
        >>> assert res[1] < 1e-9
        >>> assert res[2] < 4400
        >>> l = cma.CMADataLogger()  # == res[-1], logger with default name, \"points to\" above data
        >>> l.disp([0,-1])  # first and last
        >>> l.disp(20)  # some first/last and every 20-th line
        >>> l.disp(np.r_[0:999999:100, -1]) # every 100-th and last
        >>> l.disp(np.r_[0, -10:0]) # first and ten last
        >>> cma.disp(l.name_prefix, np.r_[0::100, -10:])  # the same as l.disp(...)

        Details
        -------
        The data line with the best f-value is displayed as last line.

        :See: `disp()`

        ")
                        (reparse-symbol indented_block_body) [294025 296732])
                    ("disp_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [296752 296756]))                          )
                        (reparse-symbol indented_block_body) [296736 296862]))                  
                :type "class")
                nil [252557 296862])
            ("last_figure_number" variable nil nil [297019 297043])
            ("plot" function
               (:documentation "
    plot data from files written by a `CMADataLogger`,
    the call ``cma.plot(name, **argsdict)`` is a shortcut for
    ``cma.CMADataLogger(name).plot(**argsdict)``

    Arguments
    ---------
        `name`
            name of the logger, filename prefix, None evaluates to
            the default 'outcmaes'
        `fig`
            filename or figure number, or both as a tuple (any order)
        `abscissa`
            0==plot versus iteration count,
            1==plot versus function evaluation number
        `iteridx`
            iteration indices to plot

    Return `None`

    Examples
    --------
    ::

       cma.plot();  # the optimization might be still
                    # running in a different shell
       cma.savefig('fig325.png')
       cma.closefig()

       cdl = cma.CMADataLogger().downsampling().plot()
       # in case the file sizes are large

    Details
    -------
    Data from codes in other languages (C, Java, Matlab, Scilab) have the same
    format and can be plotted just the same.

    :See: `CMADataLogger`, `CMADataLogger.plot()`

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [297053 297057])
                    ("fig" variable nil (reparse-symbol function_parameters) [297064 297067])
                    ("abscissa" variable nil (reparse-symbol function_parameters) [297074 297082])
                    ("iteridx" variable nil (reparse-symbol function_parameters) [297086 297093])
                    ("plot_mean" variable nil (reparse-symbol function_parameters) [297109 297118])
                    ("foffset" variable nil (reparse-symbol function_parameters) [297135 297142])
                    ("x_opt" variable nil (reparse-symbol function_parameters) [297150 297155])
                    ("fontsize" variable nil (reparse-symbol function_parameters) [297162 297170]))                  )
                nil [297044 298574])
            ("disp" function
               (:documentation "displays selected data from (files written by) the class `CMADataLogger`.

    The call ``cma.disp(name, idx)`` is a shortcut for ``cma.CMADataLogger(name).disp(idx)``.

    Arguments
    ---------
        `name`
            name of the logger, filename prefix, `None` evaluates to
            the default ``'outcmaes'``
        `idx`
            indices corresponding to rows in the data file; by
            default the first five, then every 100-th, and the last
            10 rows. Too large index values are removed.

    Examples
    --------
    ::

       import cma, numpy
       # assume some data are available from previous runs
       cma.disp(None,numpy.r_[0,-1])  # first and last
       cma.disp(None,numpy.r_[0:1e9:100,-1]) # every 100-th and last
       cma.disp(idx=numpy.r_[0,-10:0]) # first and ten last
       cma.disp(idx=numpy.r_[0:1e9:1e3,-10:0])

    :See: `CMADataLogger.disp()`

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [298584 298588])
                    ("idx" variable nil (reparse-symbol function_parameters) [298595 298598]))                  )
                nil [298575 299638])
            ("_fileToMatrix" function
               (:documentation "rudimentary method to read in data from a file"
                :arguments 
                  ( ("file_name" variable nil (reparse-symbol function_parameters) [299720 299729]))                  )
                nil [299702 300252])
            ("NoiseHandler" type
               (:documentation "Noise handling according to [Hansen et al 2009, A Method for
    Handling Uncertainty in Evolutionary Optimization...]

    The interface of this class is yet versatile and subject to changes.

    The noise handling follows closely [Hansen et al 2009] in the
    measurement part, but the implemented treatment is slightly
    different: for ``noiseS > 0``, ``evaluations`` (time) and sigma are
    increased by ``alpha``. For ``noiseS < 0``, ``evaluations`` (time)
    is decreased by ``alpha**(1/4)``.

    The (second) parameter ``evaluations`` defines the maximal number
    of evaluations for a single fitness computation. If it is a list,
    the smallest element defines the minimal number and if the list has
    three elements, the median value is the start value for
    ``evaluations``.

    ``NoiseHandler`` serves to control the noise via steps-size
    increase and number of re-evaluations, for example via ``fmin`` or
    with ``ask_and_eval()``.

    Examples
    --------
    Minimal example together with `fmin` on a non-noisy function:

    >>> import cma
    >>> cma.fmin(cma.felli, 7 * [1], 1, noise_handler=cma.NoiseHandler(7))

    in dimension 7 (which needs to be given tice). More verbose example
    in the optimization loop with a noisy function defined in ``func``:

    >>> import cma, numpy as np
    >>> func = lambda x: cma.fcts.sphere(x) * (1 + 4 * np.random.randn() / len(x))  # cma.Fcts.noisysphere
    >>> es = cma.CMAEvolutionStrategy(np.ones(10), 1)
    >>> nh = cma.NoiseHandler(es.N, maxevals=[1, 1, 30])
    >>> while not es.stop():
    ...     X, fit_vals = es.ask_and_eval(func, evaluations=nh.evaluations)
    ...     es.tell(X, fit_vals)  # prepare for next iteration
    ...     es.sigma *= nh(X, fit_vals, func, es.ask)  # see method __call__
    ...     es.countevals += nh.evaluations_just_done  # this is a hack, not important though
    ...     es.logger.add(more_data = [nh.evaluations, nh.noiseS])  # add a data point
    ...     es.disp()
    ...     # nh.maxevals = ...  it might be useful to start with smaller values and then increase
    >>> print(es.stop())
    >>> print(es.result()[-2])  # take mean value, the best solution is totally off
    >>> assert sum(es.result()[-2]**2) < 1e-9
    >>> print(X[np.argmin(fit_vals)])  # not bad, but probably worse than the mean
    >>> # es.logger.plot()


    The command ``logger.plot()`` will plot the logged data.

    The noise options of `fmin()` control a `NoiseHandler` instance
    similar to this example. The command ``cma.CMAOptions('noise')``
    lists in effect the parameters of `__init__` apart from
    ``aggregate``.

    Details
    -------
    The parameters reevals, theta, c_s, and alpha_t are set differently
    than in the original publication, see method `__init__()`. For a
    very small population size, say popsize <= 5, the measurement
    technique based on rank changes is likely to fail.

    Missing Features
    ----------------
    In case no noise is found, ``self.lam_reeval`` should be adaptive
    and get at least as low as 1 (however the possible savings from this
    are rather limited). Another option might be to decide during the
    first call by a quantitative analysis of fitness values whether
    ``lam_reeval`` is set to zero. More generally, an automatic noise
    mode detection might also set the covariance matrix learning rates
    to smaller values.

    :See: `fmin()`, `CMAEvolutionStrategy.ask_and_eval()`

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"parameters are

            `N`
                dimension, (only) necessary to adjust the internal
                \"alpha\"-parameters
            `maxevals`
                maximal value for ``self.evaluations``, where
                ``self.evaluations`` function calls are aggregated for
                noise treatment. With ``maxevals == 0`` the noise
                handler is (temporarily) \"switched off\". If `maxevals`
                is a list, min value and (for >2 elements) median are
                used to define minimal and initial value of
                ``self.evaluations``. Choosing ``maxevals > 1`` is only
                reasonable, if also the original ``fit`` values (that
                are passed to `__call__`) are computed by aggregation of
                ``self.evaluations`` values (otherwise the values are
                not comparable), as it is done within `fmin()`.
            `aggregate`
                function to aggregate single f-values to a 'fitness', e.g.
                ``np.median``.
            `reevals`
                number of solutions to be reevaluated for noise
                measurement, can be a float, by default set to ``2 +
                popsize/20``, where ``popsize = len(fit)`` in
                ``__call__``. zero switches noise handling off.
            `epsilon`
                multiplier for perturbation of the reevaluated solutions
            `parallel`
                a single f-call with all resampled solutions

            :See: `fmin()`, `CMAOptions`, `CMAEvolutionStrategy.ask_and_eval()`

        \"\"\"" code nil (reparse-symbol indented_block_body) [304366 305958])
                            ("self" variable nil (reparse-symbol indented_block_body) [305967 305992])
                            ("self" variable nil (reparse-symbol indented_block_body) [306068 306090])
                            ("self" variable nil (reparse-symbol indented_block_body) [306099 306123])
                            ("self" variable nil (reparse-symbol indented_block_body) [306178 306194])
                            ("self" variable nil (reparse-symbol indented_block_body) [306228 306242])
                            ("self" code nil (reparse-symbol indented_block_body) [306386 306422])
                            ("self" code nil (reparse-symbol indented_block_body) [306526 306562])
                            ("self" variable nil (reparse-symbol indented_block_body) [306658 306703])
                            ("self" variable nil (reparse-symbol indented_block_body) [306776 306796])
                            ("self" variable nil (reparse-symbol indented_block_body) [306847 306864])
                            ("self" variable nil (reparse-symbol indented_block_body) [306873 306910])
                            ("if" code nil (reparse-symbol indented_block_body) [306919 307204])
                            ("" code nil (reparse-symbol indented_block_body) [307309 307343])
                            ("self" variable nil (reparse-symbol indented_block_body) [307352 307382])
                            ("self" variable nil (reparse-symbol indented_block_body) [307443 307458]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [304246 304250])
                            ("N" variable nil (reparse-symbol function_parameters) [304252 304253])
                            ("maxevals" variable nil (reparse-symbol function_parameters) [304255 304263])
                            ("aggregate" variable nil (reparse-symbol function_parameters) [304275 304284])
                            ("reevals" variable nil (reparse-symbol function_parameters) [304313 304320])
                            ("epsilon" variable nil (reparse-symbol function_parameters) [304327 304334])
                            ("parallel" variable nil (reparse-symbol function_parameters) [304341 304349]))                          
                        :documentation "parameters are

            `N`
                dimension, (only) necessary to adjust the internal
                \"alpha\"-parameters
            `maxevals`
                maximal value for ``self.evaluations``, where
                ``self.evaluations`` function calls are aggregated for
                noise treatment. With ``maxevals == 0`` the noise
                handler is (temporarily) \"switched off\". If `maxevals`
                is a list, min value and (for >2 elements) median are
                used to define minimal and initial value of
                ``self.evaluations``. Choosing ``maxevals > 1`` is only
                reasonable, if also the original ``fit`` values (that
                are passed to `__call__`) are computed by aggregation of
                ``self.evaluations`` values (otherwise the values are
                not comparable), as it is done within `fmin()`.
            `aggregate`
                function to aggregate single f-values to a 'fitness', e.g.
                ``np.median``.
            `reevals`
                number of solutions to be reevaluated for noise
                measurement, can be a float, by default set to ``2 +
                popsize/20``, where ``popsize = len(fit)`` in
                ``__call__``. zero switches noise handling off.
            `epsilon`
                multiplier for perturbation of the reevaluated solutions
            `parallel`
                a single f-call with all resampled solutions

            :See: `fmin()`, `CMAOptions`, `CMAEvolutionStrategy.ask_and_eval()`

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [304233 307459])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [307477 307481])
                            ("X" variable nil (reparse-symbol function_parameters) [307483 307484])
                            ("fit" variable nil (reparse-symbol function_parameters) [307486 307489])
                            ("func" variable nil (reparse-symbol function_parameters) [307491 307495])
                            ("ask" variable nil (reparse-symbol function_parameters) [307497 307500])
                            ("args" variable nil (reparse-symbol function_parameters) [307507 307511]))                          
                        :documentation "proceed with noise measurement, set anew attributes ``evaluations``
        (proposed number of evaluations to \"treat\" noise) and ``evaluations_just_done``
        and return a factor for increasing sigma.

        Parameters
        ----------
            `X`
                a list/sequence/vector of solutions
            `fit`
                the respective list of function values
            `func`
                the objective function, ``fit[i]`` corresponds to ``func(X[i], *args)``
            `ask`
                a method to generate a new, slightly disturbed solution. The argument
                is (only) mandatory if ``epsilon`` is not zero, see `__init__()`.
            `args`
                optional additional arguments to `func`

        Details
        -------
        Calls the methods ``reeval()``, ``update_measure()`` and ``treat()`` in this order.
        ``self.evaluations`` is adapted within the method `treat()`.

        ")
                        (reparse-symbol indented_block_body) [307464 308762])
                    ("get_evaluations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [308787 308791]))                          
                        :documentation "return ``self.evaluations``, the number of evalutions to get a single fitness measurement")
                        (reparse-symbol indented_block_body) [308767 308930])
                    ("treat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [308945 308949]))                          
                        :documentation "adapt self.evaluations depending on the current measurement value
        and return ``sigma_fac in (1.0, self.alphasigma)``

        ")
                        (reparse-symbol indented_block_body) [308935 309402])
                    ("reeval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [309418 309422])
                            ("X" variable nil (reparse-symbol function_parameters) [309424 309425])
                            ("fit" variable nil (reparse-symbol function_parameters) [309427 309430])
                            ("func" variable nil (reparse-symbol function_parameters) [309432 309436])
                            ("ask" variable nil (reparse-symbol function_parameters) [309438 309441])
                            ("args" variable nil (reparse-symbol function_parameters) [309443 309447]))                          
                        :documentation "store two fitness lists, `fit` and ``fitre`` reevaluating some
        solutions in `X`.
        ``self.evaluations`` evaluations are done for each reevaluated
        fitness value.
        See `__call__()`, where `reeval()` is called.

        ")
                        (reparse-symbol indented_block_body) [309407 310587])
                    ("update_measure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [310611 310615]))                          
                        :documentation "updated noise level measure using two fitness lists ``self.fit`` and
        ``self.fitre``, return ``self.noiseS, all_individual_measures``.

        Assumes that `self.idx` contains the indices where the fitness
        lists differ

        ")
                        (reparse-symbol indented_block_body) [310592 311848])
                    ("indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [311865 311869])
                            ("fit" variable nil (reparse-symbol function_parameters) [311871 311874]))                          
                        :documentation "return the set of indices to be reevaluated for noise
        measurement.

        Given the first values are the earliest, this is a useful policy also
        with a time changing objective.

        ")
                        (reparse-symbol indented_block_body) [311853 313369]))                  
                :type "class")
                nil [300379 313369])
            ("Sections" type
               (:documentation "plot sections through an objective function.

    A first rational thing to do, when facing an (expensive)
    application. By default 6 points in each coordinate are evaluated.
    This class is still experimental.

    Examples
    --------

    >>> import cma, numpy as np
    >>> s = cma.Sections(cma.Fcts.rosen, np.zeros(3)).do(plot=False)
    >>> s.do(plot=False)  # evaluate the same points again, i.e. check for noise
    >> try:
    ...     s.plot()
    ... except:
    ...     print('plotting failed: matplotlib.pyplot package missing?')

    Details
    -------
    Data are saved after each function call during `do()`. The filename
    is attribute ``name`` and by default ``str(func)``, see `__init__()`.

    A random (orthogonal) basis can be generated with
    ``cma.Rotation()(np.eye(3))``.

    CAVEAT: The default name is unique in the function name, but it
    should be unique in all parameters of `__init__()` but `plot_cmd`
    and `load`. If, for example, a different basis is chosen, either
    the name must be changed or the ``.pkl`` file containing the
    previous data must first be renamed or deleted.

    ``s.res`` is a dictionary with an entry for each \"coordinate\" ``i``
    and with an entry ``'x'``, the middle point. Each entry ``i`` is
    again a dictionary with keys being different dx values and the
    value being a sequence of f-values. For example ``s.res[2][0.1] ==
    [0.01, 0.01]``, which is generated using the difference vector ``s
    .basis[2]`` like

    ``s.res[2][dx] += func(s.res['x'] + dx * s.basis[2])``.

    :See: `__init__()`

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
            `func`
                objective function
            `x`
                point in search space, middle point of the sections
            `args`
                arguments passed to `func`
            `basis`
                evaluated points are ``func(x + locations[j] * basis[i])
                for i in len(basis) for j in len(locations)``,
                see `do()`
            `name`
                filename where to save the result
            `plot_cmd`
                command used to plot the data, typically matplotlib pyplots `plot` or `semilogy`
            `load`
                load previous data from file ``str(func) + '.pkl'``

        \"\"\"" code nil (reparse-symbol indented_block_body) [315270 315983])
                            ("self" variable nil (reparse-symbol indented_block_body) [315992 316008])
                            ("self" variable nil (reparse-symbol indented_block_body) [316017 316033])
                            ("self" variable nil (reparse-symbol indented_block_body) [316042 316052])
                            ("str" code nil (reparse-symbol indented_block_body) [316091 316152])
                            ("self" variable nil (reparse-symbol indented_block_body) [316161 316185])
                            ("basis" code nil (reparse-symbol indented_block_body) [316259 316264])
                            ("try" code nil (reparse-symbol indented_block_body) [316274 316582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [315144 315148])
                            ("func" variable nil (reparse-symbol function_parameters) [315150 315154])
                            ("x" variable nil (reparse-symbol function_parameters) [315156 315157])
                            ("args" variable nil (reparse-symbol function_parameters) [315159 315163])
                            ("basis" variable nil (reparse-symbol function_parameters) [315168 315173])
                            ("name" variable nil (reparse-symbol function_parameters) [315180 315184])
                            ("None" variable nil (reparse-symbol function_parameters) [315244 315248])
                            ("load" variable nil (reparse-symbol function_parameters) [315250 315254]))                          
                        :documentation "
        Parameters
        ----------
            `func`
                objective function
            `x`
                point in search space, middle point of the sections
            `args`
                arguments passed to `func`
            `basis`
                evaluated points are ``func(x + locations[j] * basis[i])
                for i in len(basis) for j in len(locations)``,
                see `do()`
            `name`
                filename where to save the result
            `plot_cmd`
                command used to plot the data, typically matplotlib pyplots `plot` or `semilogy`
            `load`
                load previous data from file ``str(func) + '.pkl'``

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [315131 316582])
                    ("do" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [316594 316598])
                            ("repetitions" variable nil (reparse-symbol function_parameters) [316600 316611])
                            ("locations" variable nil (reparse-symbol function_parameters) [316615 316624])
                            ("plot" variable nil (reparse-symbol function_parameters) [316652 316656]))                          
                        :documentation "generates, plots and saves function values ``func(y)``,
        where ``y`` is 'close' to `x` (see `__init__()`). The data are stored in
        the ``res`` attribute and the class instance is saved in a file
        with (the weired) name ``str(func)``.

        Parameters
        ----------
            `repetitions`
                for each point, only for noisy functions is >1 useful. For
                ``repetitions==0`` only already generated data are plotted.
            `locations`
                coordinated wise deviations from the middle point given in `__init__`

        ")
                        (reparse-symbol indented_block_body) [316587 318102])
                    ("plot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [318116 318120])
                            ("plot_cmd" variable nil (reparse-symbol function_parameters) [318122 318130])
                            ("tf" variable nil (reparse-symbol function_parameters) [318137 318139]))                          
                        :documentation "plot the data we have, return ``self``")
                        (reparse-symbol indented_block_body) [318107 319163])
                    ("flattened" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [319182 319186]))                          
                        :documentation "return flattened data ``(x, f)`` such that for the sweep through
        coordinate ``i`` we have for data point ``j`` that ``f[i][j] == func(x[i][j])``

        ")
                        (reparse-symbol indented_block_body) [319168 319739])
                    ("save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [319753 319757])
                            ("name" variable nil (reparse-symbol function_parameters) [319759 319763]))                          
                        :documentation "save to file")
                        (reparse-symbol indented_block_body) [319744 320040])
                    ("load" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [320054 320058])
                            ("name" variable nil (reparse-symbol function_parameters) [320060 320064]))                          
                        :documentation "load from file")
                        (reparse-symbol indented_block_body) [320045 320285]))                  
                :type "class")
                nil [313496 320285])
            ("_Error" type
               (:documentation "generic exception of cma module"
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [320481 320485]))                  
                :type "class")
                nil [320410 320486])
            ("ElapsedTime" type
               (:documentation "using ``time.clock`` with overflow handling to measure CPU time.

    Example:

    >>> clock = ElapsedTime()  # clock starts here
    >>> t1 = clock()  # get elapsed CPU time

    Details: 32-bit C overflows after int(2**32/1e6) == 4294s about 72 min

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [320942 320966])
                            ("self" variable nil (reparse-symbol indented_block_body) [320975 320995])
                            ("self" variable nil (reparse-symbol indented_block_body) [321004 321031])
                            ("self" code nil (reparse-symbol indented_block_body) [321040 321083])
                            ("self" variable nil (reparse-symbol indented_block_body) [321092 321112])
                            ("self" variable nil (reparse-symbol indented_block_body) [321121 321138]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [320927 320931]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [320914 321139])
                    ("reset" variable nil (reparse-symbol indented_block_body) [321143 321159])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [321177 321181]))                          )
                        (reparse-symbol indented_block_body) [321164 321887]))                  
                :type "class")
                nil [320615 321887])
            ("Misc" type
               (:superclasses ("object")
                :members 
                  ( ("MathHelperFunctions" type
                       (:documentation "static convenience math helper functions, if the function name
        is preceded with an \"a\", a numpy array is returned

        "
                        :superclasses ("object")
                        :members 
                          ( ("aclamp" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("x" variable nil (reparse-symbol function_parameters) [322274 322275])
                                    ("upper" variable nil (reparse-symbol function_parameters) [322277 322282]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [322241 322347])
                            ("equals_approximately" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("a" variable nil (reparse-symbol function_parameters) [322402 322403])
                                    ("b" variable nil (reparse-symbol function_parameters) [322405 322406])
                                    ("eps" variable nil (reparse-symbol function_parameters) [322408 322411]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [322355 322562])
                            ("vequals_approximately" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("a" variable nil (reparse-symbol function_parameters) [322618 322619])
                                    ("b" variable nil (reparse-symbol function_parameters) [322621 322622])
                                    ("eps" variable nil (reparse-symbol function_parameters) [322624 322627]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [322570 322941])
                            ("expms" function
                               (:typemodifiers ("static")
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  
                                :arguments 
                                  ( ("A" variable nil (reparse-symbol function_parameters) [322981 322982])
                                    ("eig" variable nil (reparse-symbol function_parameters) [322984 322987]))                                  
                                :documentation "matrix exponential for a symmetric matrix")
                                (reparse-symbol indented_block_body) [322949 323246])
                            ("amax" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("vec" variable nil (reparse-symbol function_parameters) [323285 323288])
                                    ("vec_or_scalar" variable nil (reparse-symbol function_parameters) [323290 323303]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [323254 323381])
                            ("max" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("vec" variable nil (reparse-symbol function_parameters) [323419 323422])
                                    ("vec_or_scalar" variable nil (reparse-symbol function_parameters) [323424 323437]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [323389 323644])
                            ("minmax" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("val" variable nil (reparse-symbol function_parameters) [323685 323688])
                                    ("min_val" variable nil (reparse-symbol function_parameters) [323690 323697])
                                    ("max_val" variable nil (reparse-symbol function_parameters) [323699 323706]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [323652 323802])
                            ("aminmax" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("val" variable nil (reparse-symbol function_parameters) [323844 323847])
                                    ("min_val" variable nil (reparse-symbol function_parameters) [323849 323856])
                                    ("max_val" variable nil (reparse-symbol function_parameters) [323858 323865]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [323810 323943])
                            ("amin" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("vec_or_scalar" variable nil (reparse-symbol function_parameters) [323982 323995])
                                    ("vec_or_scalar2" variable nil (reparse-symbol function_parameters) [323997 324011]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [323951 324100])
                            ("min" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("a" variable nil (reparse-symbol function_parameters) [324138 324139])
                                    ("b" variable nil (reparse-symbol function_parameters) [324141 324142]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [324108 324530])
                            ("norm" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("vec" variable nil (reparse-symbol function_parameters) [324569 324572])
                                    ("expo" variable nil (reparse-symbol function_parameters) [324574 324578]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [324538 324629])
                            ("apos" function
                               (:typemodifiers ("static")
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  
                                :arguments 
                                  ( ("x" variable nil (reparse-symbol function_parameters) [324668 324669])
                                    ("lower" variable nil (reparse-symbol function_parameters) [324671 324676]))                                  
                                :documentation "clips argument (scalar or array) from below at lower")
                                (reparse-symbol indented_block_body) [324637 324889])
                            ("prctile" function
                               (:typemodifiers ("static")
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  
                                :arguments 
                                  ( ("data" variable nil (reparse-symbol function_parameters) [324931 324935])
                                    ("p_vals" variable nil (reparse-symbol function_parameters) [324937 324943])
                                    ("sorted_" variable nil (reparse-symbol function_parameters) [324966 324973]))                                  
                                :documentation "``prctile(data, 50)`` returns the median, but p_vals can
            also be a sequence.

            Provides for small samples better values than matplotlib.mlab.prctile,
            however also slower.

            ")
                                (reparse-symbol indented_block_body) [324897 325796])
                            ("sround" function
                               (:typemodifiers ("static")
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  
                                :arguments 
                                  ( ("nb" variable nil (reparse-symbol function_parameters) [325837 325839]))                                  
                                :documentation "return stochastic round: floor(nb) + (rand()<remainder(nb))")
                                (reparse-symbol indented_block_body) [325804 326009])
                            ("cauchy_with_variance_one" function
                               (:typemodifiers ("static")
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [326018 326243])
                            ("standard_finite_cauchy" function
                               (:typemodifiers ("static")
                                :arguments 
                                  ( ("size" variable nil (reparse-symbol function_parameters) [326300 326304]))                                  
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [326251 326885]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [322052 326885])
                    ("likelihood" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x" variable nil (reparse-symbol function_parameters) [326924 326925])
                            ("m" variable nil (reparse-symbol function_parameters) [326927 326928])
                            ("Cinv" variable nil (reparse-symbol function_parameters) [326935 326939])
                            ("sigma" variable nil (reparse-symbol function_parameters) [326946 326951])
                            ("detC" variable nil (reparse-symbol function_parameters) [326955 326959]))                          
                        :documentation "return likelihood of x for the normal density N(m, sigma**2 * Cinv**-1)")
                        (reparse-symbol indented_block_body) [326891 327705])
                    ("loglikelihood" function
                       (:typemodifiers ("static")
                        :documentation "return log-likelihood of `x` regarding the current sample distribution"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [327746 327750])
                            ("x" variable nil (reparse-symbol function_parameters) [327752 327753])
                            ("previous" variable nil (reparse-symbol function_parameters) [327755 327763]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :parent "dummy")
                        (reparse-symbol indented_block_body) [327710 329217])
                    ("eig" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("C" variable nil (reparse-symbol function_parameters) [329684 329685]))                          
                        :documentation "eigendecomposition of a symmetric matrix, much slower than
        `numpy.linalg.eigh`, return ``(EVals, Basis)``, the eigenvalues
        and an orthonormal basis of the corresponding eigenvectors, where

            ``Basis[i]``
                the i-th row of ``Basis``
            columns of ``Basis``, ``[Basis[j][i] for j in range(len(Basis))]``
                the i-th eigenvector with eigenvalue ``EVals[i]``

        ")
                        (reparse-symbol indented_block_body) [329658 340684]))                  
                :type "class")
                nil [321888 340684])
            ("Mh" variable nil nil [340684 340713])
            ("pprint" function
               (:documentation "nicely formated print"
                :arguments 
                  ( ("to_be_printed" variable nil (reparse-symbol function_parameters) [340777 340790]))                  )
                nil [340766 341478])
            ("pp" variable nil nil [341479 341490])
            ("ConstRandnShift" type
               (:documentation "``ConstRandnShift()(x)`` adds a fixed realization of
    ``stddev * randn(len(x))`` to the vector x.

    By default, the realized shift is the same for each instance of
    ``ConstRandnShift``, see ``seed`` argument. This class is used in
    class ``FFWrapper.ShiftedFitness`` as default transformation.

    See: class ``FFWrapper.ShiftedFitness``

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"with ``seed=None`` each instance realizes a different shift\"\"\"" code nil (reparse-symbol indented_block_body) [341940 342005])
                            ("self" variable nil (reparse-symbol indented_block_body) [342014 342030])
                            ("self" variable nil (reparse-symbol indented_block_body) [342039 342059])
                            ("self" variable nil (reparse-symbol indented_block_body) [342068 342083]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [341907 341911])
                            ("stddev" variable nil (reparse-symbol function_parameters) [341913 341919])
                            ("seed" variable nil (reparse-symbol function_parameters) [341923 341927]))                          
                        :documentation "with ``seed=None`` each instance realizes a different shift"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [341894 342084])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [342101 342105])
                            ("x" variable nil (reparse-symbol function_parameters) [342107 342108]))                          
                        :documentation "return \"shifted\" ``x - shift``

        ")
                        (reparse-symbol indented_block_body) [342088 342639])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [342651 342655])
                            ("dimension" variable nil (reparse-symbol function_parameters) [342657 342666]))                          
                        :documentation "return shift applied to ``zeros(dimension)``

            >>> import numpy as np, cma
            >>> s = cma.ConstRandnShift()
            >>> assert all(s(-s.get(3)) == np.zeros(3))
            >>> assert all(s.get(3) == s(np.zeros(3)))

        ")
                        (reparse-symbol indented_block_body) [342643 342982]))                  
                :type "class")
                nil [341492 342982])
            ("Rotation" type
               (:documentation "Rotation class that implements an orthogonal linear transformation,
    one for each dimension.

    By default reach ``Rotation`` instance provides a different \"random\"
    but fixed rotation. This class is used to implement non-separable
    test functions, most conveniently via `FFWrapper.RotatedFitness`.

    Example:

    >>> import cma, numpy as np
    >>> R = cma.Rotation()
    >>> R2 = cma.Rotation() # another rotation
    >>> x = np.array((1,2,3))
    >>> print(R(R(x), inverse=1))
    [ 1.  2.  3.]

    See: `FFWrapper.RotatedFitness`

    "
                :superclasses ("object")
                :members 
                  ( ("dicMatrices" variable nil (reparse-symbol indented_block_body) [343577 343593])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"by default a random but fixed rotation, different for each instance\"\"\"" code nil (reparse-symbol indented_block_body) [343686 343759])
                            ("self" variable nil (reparse-symbol indented_block_body) [343768 343784])
                            ("self" variable nil (reparse-symbol indented_block_body) [343793 343814]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [343660 343664])
                            ("seed" variable nil (reparse-symbol function_parameters) [343666 343670]))                          
                        :documentation "by default a random but fixed rotation, different for each instance"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [343647 343891])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [343908 343912])
                            ("x" variable nil (reparse-symbol function_parameters) [343914 343915])
                            ("inverse" variable nil (reparse-symbol function_parameters) [343917 343924]))                          
                        :documentation "Rotates the input array `x` with a fixed rotation matrix
           (``self.dicMatrices['str(len(x))']``)
        ")
                        (reparse-symbol indented_block_body) [343895 344892]))                  
                :type "class")
                nil [342983 344892])
            ("rotate" variable nil nil [344920 344939])
            ("FFWrapper" type
               (:documentation "
    A collection of (yet experimental) classes to implement fitness
    transformations and wrappers. Aliased to `FF2` below.

    "
                :superclasses ("object")
                :members 
                  ( ("FitnessTransformation" type
                       (:documentation "This class does nothing but serve as an interface template.
        Typical use-case::

          f = FitnessTransformation(f, parameters_if_needed)``

        See: class ``TransformSearchSpace``

        "
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"`fitness_function` must be callable (e.g. a function
            or a callable class instance)\"\"\"" code nil (reparse-symbol indented_block_body) [345574 345674])
                                    ("self" variable nil (reparse-symbol indented_block_body) [345735 345772]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [345520 345524])
                                    ("fitness_function" variable nil (reparse-symbol function_parameters) [345526 345542])
                                    ("args" variable nil (reparse-symbol function_parameters) [345544 345549])
                                    ("kwargs" variable nil (reparse-symbol function_parameters) [345551 345559]))                                  
                                :documentation "`fitness_function` must be callable (e.g. a function
            or a callable class instance)"
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [345507 345773])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [345836 345840])
                                    ("x" variable nil (reparse-symbol function_parameters) [345842 345843])
                                    ("args" variable nil (reparse-symbol function_parameters) [345845 345850]))                                  
                                :documentation "identity as default transformation")
                                (reparse-symbol indented_block_body) [345823 346162]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [345242 346162])
                    ("BookKeeping" type
                       (:documentation "a stump for experimenting with use-cases and possible
        extensions of book keeping

        use-case:

            f = BookKeeping(f)
            print(f.count_evaluations)

        "
                        :superclasses ("FitnessTransformation")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [346466 346492])
                                    ("self" variable nil (reparse-symbol indented_block_body) [346505 346534]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [346432 346436])
                                    ("callable" variable nil (reparse-symbol function_parameters) [346438 346446]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [346419 346535])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [346556 346560])
                                    ("args" variable nil (reparse-symbol function_parameters) [346562 346567]))                                  )
                                (reparse-symbol indented_block_body) [346543 346701]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [346166 346701])
                    ("TransformSearchSpace" type
                       (:documentation "::

            f = TransformSearchSpace(f, ConstRandnShift())

        constructs the composed function f <- f o shift.

        Details: to some extend this is a nice shortcut for::

            f = lambda x, *args: f_in(ConstRandnShift()(x), *args)

        however the `lambda` definition depends on the value of
        ``f_in`` even after ``f`` has been assigned.

        See: `ShiftedFitness`, `RotatedFitness`

        "
                        :superclasses ("FitnessTransformation")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"``TransformSearchSpace(f, s)(x) == f(s(x))``

                >>> import cma
                >>> f0 = lambda x: sum(x)
                >>> shift_fct = cma.ConstRandnShift()
                >>> f = cma.FF2.TransformSearchSpace(f0, shift_fct)
                >>> x = [1, 2, 3]
                >>> assert f(x) == f0(shift_fct(x))

            \"\"\"" code nil (reparse-symbol indented_block_body) [347273 347619])
                                    ("self" variable nil (reparse-symbol indented_block_body) [347632 347669])
                                    ("self" variable nil (reparse-symbol indented_block_body) [347842 347880]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [347220 347224])
                                    ("fitness_function" variable nil (reparse-symbol function_parameters) [347226 347242])
                                    ("transformation" variable nil (reparse-symbol function_parameters) [347244 347258]))                                  
                                :documentation "``TransformSearchSpace(f, s)(x) == f(s(x))``

                >>> import cma
                >>> f0 = lambda x: sum(x)
                >>> shift_fct = cma.ConstRandnShift()
                >>> f = cma.FF2.TransformSearchSpace(f0, shift_fct)
                >>> x = [1, 2, 3]
                >>> assert f(x) == f0(shift_fct(x))

            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [347207 347881]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [346705 347881])
                    ("ScaleCoordinates" type
                       (:documentation "define a scaling of each variable
        "
                        :superclasses ("TransformSearchSpace")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            :param fitness_function: a callable object
            :param multipliers: recycling is not implemented, i.e.
                 the dimension must fit to the `fitness_function` argument
                 when called
            \"\"\"" code nil (reparse-symbol indented_block_body) [348105 348350])
                                    ("super" code nil (reparse-symbol indented_block_body) [348363 348471])
                                    ("self" variable nil (reparse-symbol indented_block_body) [348617 348646])
                                    ("if" code nil (reparse-symbol indented_block_body) [348659 348795]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [348050 348054])
                                    ("fitness_function" variable nil (reparse-symbol function_parameters) [348056 348072])
                                    ("multipliers" variable nil (reparse-symbol function_parameters) [348074 348085]))                                  
                                :documentation "
            :param fitness_function: a callable object
            :param multipliers: recycling is not implemented, i.e.
                 the dimension must fit to the `fitness_function` argument
                 when called
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [348037 348795])
                            ("transformation" function (:arguments 
                              ( ("x" variable nil (reparse-symbol function_parameters) [348822 348823])
                                ("args" variable nil (reparse-symbol function_parameters) [348825 348830]))                              ) (reparse-symbol indented_block_body) [348803 348975]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [347926 348975])
                    ("ShiftedFitness" type
                       (:documentation "``f = cma.ShiftedFitness(cma.fcts.sphere)`` constructs a
        shifted sphere function, by default the shift is computed
        from class ``ConstRandnShift`` with std dev 3.

        "
                        :superclasses ("TransformSearchSpace")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"``shift(x)`` must return a (stable) shift of x.

            Details: this class solely provides as default second
            argument to TransformSearchSpace a shift in search space.
            ``shift=lambda x: x`` would provide \"no shift\", ``None``
            expands to ``cma.ConstRandnShift()``.

            \"\"\"" code nil (reparse-symbol indented_block_body) [349281 349604])
                                    ("self" variable nil (reparse-symbol indented_block_body) [349617 349639])
                                    ("ConstRandnShift" code nil (reparse-symbol indented_block_body) [349696 349713]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [349247 349251])
                                    ("f" variable nil (reparse-symbol function_parameters) [349253 349254])
                                    ("shift" variable nil (reparse-symbol function_parameters) [349256 349261]))                                  
                                :documentation "``shift(x)`` must return a (stable) shift of x.

            Details: this class solely provides as default second
            argument to TransformSearchSpace a shift in search space.
            ``shift=lambda x: x`` would provide \"no shift\", ``None``
            expands to ``cma.ConstRandnShift()``.

            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [349234 349714]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [348980 349714])
                    ("RotatedFitness" type
                       (:documentation "``f = cma.RotatedFitness(cma.fcts.elli)`` constructs a
        rotated ellipsoid function

        "
                        :superclasses ("TransformSearchSpace")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"``rotate(x)`` must return a (stable) rotation of x.

            Details: this class solely provides a default second
            argument to TransformSearchSpace, namely a search space
            rotation.

            \"\"\"" code nil (reparse-symbol indented_block_body) [349990 350217])
                                    ("super" code nil (reparse-symbol indented_block_body) [350230 350287]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [349953 349957])
                                    ("f" variable nil (reparse-symbol function_parameters) [349959 349960])
                                    ("rotate" variable nil (reparse-symbol function_parameters) [349962 349968]))                                  
                                :documentation "``rotate(x)`` must return a (stable) rotation of x.

            Details: this class solely provides a default second
            argument to TransformSearchSpace, namely a search space
            rotation.

            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [349940 350288]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [349774 350288])
                    ("FixVariables" type
                       (:documentation "fix variables to given values, thereby reducing the
        dimensionality of the preimage.

        The constructor takes ``index_value_pairs`` as dict or list of
        pairs as input and returns a function with smaller preimage space
        than `f`.

        Details: this might replace the fixed_variables option in
        CMAOptions in future, but hasn't been tested yet.

        "
                        :superclasses ("TransformSearchSpace")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"`f` has \"\"\"" code nil (reparse-symbol indented_block_body) [350846 350860])
                                    ("super" code nil (reparse-symbol indented_block_body) [350873 350943])
                                    ("self" variable nil (reparse-symbol indented_block_body) [351034 351082]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [350805 350809])
                                    ("f" variable nil (reparse-symbol function_parameters) [350811 350812])
                                    ("index_value_pairs" variable nil (reparse-symbol function_parameters) [350814 350831]))                                  
                                :documentation "`f` has "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [350792 351083])
                            ("insert_variables" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [351112 351116])
                                    ("x" variable nil (reparse-symbol function_parameters) [351118 351119]))                                  )
                                (reparse-symbol indented_block_body) [351091 351499]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [350337 351499])
                    ("SomeNaNFitness" type
                       (:superclasses ("FitnessTransformation")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [351630 351657])
                                    ("self" variable nil (reparse-symbol indented_block_body) [351670 351707]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [351569 351573])
                                    ("fitness_function" variable nil (reparse-symbol function_parameters) [351575 351591])
                                    ("probability_of_nan" variable nil (reparse-symbol function_parameters) [351593 351611]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [351556 351708])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [351729 351733])
                                    ("x" variable nil (reparse-symbol function_parameters) [351735 351736])
                                    ("args" variable nil (reparse-symbol function_parameters) [351738 351743]))                                  )
                                (reparse-symbol indented_block_body) [351716 351890]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [351503 351890])
                    ("NoisyFitness" type
                       (:documentation "apply noise via f += rel_noise(dim) * f + abs_noise()"
                        :superclasses ("FitnessTransformation")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [352201 352227])
                                    ("self" variable nil (reparse-symbol indented_block_body) [352240 352266])
                                    ("self" variable nil (reparse-symbol indented_block_body) [352279 352316]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [352026 352030])
                                    ("fitness_function" variable nil (reparse-symbol function_parameters) [352032 352048])
                                    ("rel_noise" variable nil (reparse-symbol function_parameters) [352071 352080])
                                    ("abs_noise" variable nil (reparse-symbol function_parameters) [352145 352154]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [352013 352317])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [352338 352342])
                                    ("x" variable nil (reparse-symbol function_parameters) [352344 352345])
                                    ("args" variable nil (reparse-symbol function_parameters) [352347 352352]))                                  )
                                (reparse-symbol indented_block_body) [352325 352604]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [351894 352604])
                    ("GlueArguments" type
                       (:documentation "``f = cma.FF2.GlueArguments(cma.fcts.elli, cond=1e4)``

            >>> import cma
            >>> f = cma.FF2.GlueArguments(cma.fcts.elli, cond=1e1)
            >>> f([1, 2])  # == 1**2 + 1e1 * 2**2
            41.0

        "
                        :superclasses ("FitnessTransformation")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [352968 353005])
                                    ("self" variable nil (reparse-symbol indented_block_body) [353018 353034])
                                    ("self" variable nil (reparse-symbol indented_block_body) [353047 353067]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [352914 352918])
                                    ("fitness_function" variable nil (reparse-symbol function_parameters) [352920 352936])
                                    ("args" variable nil (reparse-symbol function_parameters) [352938 352943])
                                    ("kwargs" variable nil (reparse-symbol function_parameters) [352945 352953]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [352901 353068])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [353089 353093])
                                    ("x" variable nil (reparse-symbol function_parameters) [353095 353096])
                                    ("args" variable nil (reparse-symbol function_parameters) [353098 353103]))                                  )
                                (reparse-symbol indented_block_body) [353076 353234]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [352608 353234])
                    ("UnknownFF" type
                       (:documentation "search in [-10, 10] for the unknown (optimum)"
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [353371 353387])
                                    ("self" variable nil (reparse-symbol indented_block_body) [353400 353417])
                                    ("self" variable nil (reparse-symbol indented_block_body) [353430 353458])
                                    ("self" variable nil (reparse-symbol indented_block_body) [353471 353497]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [353344 353348])
                                    ("seed" variable nil (reparse-symbol function_parameters) [353350 353354]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [353331 353498])
                            ("_x_opt" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [353517 353521])
                                    ("dim" variable nil (reparse-symbol function_parameters) [353523 353526]))                                  )
                                (reparse-symbol indented_block_body) [353506 353786])
                            ("typical_x" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [353808 353812])
                                    ("dim" variable nil (reparse-symbol function_parameters) [353814 353817]))                                  )
                                (reparse-symbol indented_block_body) [353794 354160])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [354181 354185])
                                    ("x" variable nil (reparse-symbol function_parameters) [354187 354188]))                                  )
                                (reparse-symbol indented_block_body) [354168 354566]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [353238 354566]))                  
                :type "class")
                nil [345070 354566])
            ("FF2" variable nil nil [354567 354582])
            ("FitnessFunctions" type
               (:documentation " versatile container for test objective functions "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [354710 354726]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [354695 354699]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [354682 354773])
                    ("rot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [354785 354789])
                            ("x" variable nil (reparse-symbol function_parameters) [354791 354792])
                            ("fun" variable nil (reparse-symbol function_parameters) [354794 354797])
                            ("rot" variable nil (reparse-symbol function_parameters) [354799 354802])
                            ("args" variable nil (reparse-symbol function_parameters) [354806 354810]))                          
                        :documentation "returns ``fun(rotation(x), *args)``, ie. `fun` applied to a rotated argument")
                        (reparse-symbol indented_block_body) [354777 355185])
                    ("somenan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [355201 355205])
                            ("x" variable nil (reparse-symbol function_parameters) [355207 355208])
                            ("fun" variable nil (reparse-symbol function_parameters) [355210 355213])
                            ("p" variable nil (reparse-symbol function_parameters) [355215 355216]))                          
                        :documentation "returns sometimes np.NaN, otherwise fun(x)")
                        (reparse-symbol indented_block_body) [355189 355380])
                    ("rand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [355393 355397])
                            ("x" variable nil (reparse-symbol function_parameters) [355399 355400]))                          
                        :documentation "Random test objective function")
                        (reparse-symbol indented_block_body) [355384 355486])
                    ("linear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [355501 355505])
                            ("x" variable nil (reparse-symbol function_parameters) [355507 355508]))                          )
                        (reparse-symbol indented_block_body) [355490 355532])
                    ("lineard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [355548 355552])
                            ("x" variable nil (reparse-symbol function_parameters) [355554 355555]))                          )
                        (reparse-symbol indented_block_body) [355536 355744])
                    ("sphere" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [355759 355763])
                            ("x" variable nil (reparse-symbol function_parameters) [355765 355766]))                          
                        :documentation "Sphere (squared norm) test objective function")
                        (reparse-symbol indented_block_body) [355748 355940])
                    ("grad_sphere" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [355960 355964])
                            ("x" variable nil (reparse-symbol function_parameters) [355966 355967])
                            ("args" variable nil (reparse-symbol function_parameters) [355969 355974]))                          )
                        (reparse-symbol indented_block_body) [355944 356015])
                    ("grad_to_one" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [356035 356039])
                            ("x" variable nil (reparse-symbol function_parameters) [356041 356042])
                            ("args" variable nil (reparse-symbol function_parameters) [356044 356049]))                          )
                        (reparse-symbol indented_block_body) [356019 356092])
                    ("sphere_pos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [356111 356115])
                            ("x" variable nil (reparse-symbol function_parameters) [356117 356118]))                          
                        :documentation "Sphere (squared norm) test objective function")
                        (reparse-symbol indented_block_body) [356096 356363])
                    ("spherewithoneconstraint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [356395 356399])
                            ("x" variable nil (reparse-symbol function_parameters) [356401 356402]))                          )
                        (reparse-symbol indented_block_body) [356367 356460])
                    ("elliwithoneconstraint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [356490 356494])
                            ("x" variable nil (reparse-symbol function_parameters) [356496 356497])
                            ("idx" variable nil (reparse-symbol function_parameters) [356499 356502]))                          )
                        (reparse-symbol indented_block_body) [356464 356579])
                    ("spherewithnconstraints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [356611 356615])
                            ("x" variable nil (reparse-symbol function_parameters) [356617 356618]))                          )
                        (reparse-symbol indented_block_body) [356584 356685])
                    ("noisysphere" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [356748 356752])
                            ("x" variable nil (reparse-symbol function_parameters) [356754 356755])
                            ("noise" variable nil (reparse-symbol function_parameters) [356757 356762])
                            ("cond" variable nil (reparse-symbol function_parameters) [356772 356776])
                            ("noise_offset" variable nil (reparse-symbol function_parameters) [356782 356794]))                          
                        :documentation "noise=10 does not work with default popsize, noise handling does not help ")
                        (reparse-symbol indented_block_body) [356732 357007])
                    ("spherew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [357023 357027])
                            ("x" variable nil (reparse-symbol function_parameters) [357029 357030]))                          
                        :documentation "Sphere (squared norm) with sum x_i = 1 test objective function")
                        (reparse-symbol indented_block_body) [357011 357362])
                    ("partsphere" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [357381 357385])
                            ("x" variable nil (reparse-symbol function_parameters) [357387 357388]))                          
                        :documentation "Sphere (squared norm) test objective function")
                        (reparse-symbol indented_block_body) [357366 357784])
                    ("sectorsphere" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [357805 357809])
                            ("x" variable nil (reparse-symbol function_parameters) [357811 357812]))                          
                        :documentation "asymmetric Sphere (squared norm) test objective function")
                        (reparse-symbol indented_block_body) [357788 357942])
                    ("cornersphere" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [357963 357967])
                            ("x" variable nil (reparse-symbol function_parameters) [357969 357970]))                          
                        :documentation "Sphere (squared norm) test objective function constraint to the corner")
                        (reparse-symbol indented_block_body) [357946 358181])
                    ("cornerelli" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [358200 358204])
                            ("x" variable nil (reparse-symbol function_parameters) [358206 358207]))                          
                        :documentation " ")
                        (reparse-symbol indented_block_body) [358185 358332])
                    ("cornerellirot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [358354 358358])
                            ("x" variable nil (reparse-symbol function_parameters) [358360 358361]))                          
                        :documentation " ")
                        (reparse-symbol indented_block_body) [358336 358460])
                    ("normalSkew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [358479 358483])
                            ("f" variable nil (reparse-symbol function_parameters) [358485 358486]))                          )
                        (reparse-symbol indented_block_body) [358464 358614])
                    ("noiseC" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [358629 358633])
                            ("x" variable nil (reparse-symbol function_parameters) [358635 358636])
                            ("func" variable nil (reparse-symbol function_parameters) [358638 358642])
                            ("fac" variable nil (reparse-symbol function_parameters) [358651 358654])
                            ("expon" variable nil (reparse-symbol function_parameters) [358659 358664]))                          )
                        (reparse-symbol indented_block_body) [358618 358823])
                    ("noise" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [358837 358841])
                            ("x" variable nil (reparse-symbol function_parameters) [358843 358844])
                            ("func" variable nil (reparse-symbol function_parameters) [358846 358850])
                            ("fac" variable nil (reparse-symbol function_parameters) [358859 358862])
                            ("expon" variable nil (reparse-symbol function_parameters) [358867 358872]))                          )
                        (reparse-symbol indented_block_body) [358827 359350])
                    ("cigar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [359364 359368])
                            ("x" variable nil (reparse-symbol function_parameters) [359370 359371])
                            ("rot" variable nil (reparse-symbol function_parameters) [359373 359376])
                            ("cond" variable nil (reparse-symbol function_parameters) [359380 359384])
                            ("noise" variable nil (reparse-symbol function_parameters) [359390 359395]))                          
                        :documentation "Cigar test objective function")
                        (reparse-symbol indented_block_body) [359354 359725])
                    ("grad_cigar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [359744 359748])
                            ("x" variable nil (reparse-symbol function_parameters) [359750 359751])
                            ("args" variable nil (reparse-symbol function_parameters) [359753 359758]))                          )
                        (reparse-symbol indented_block_body) [359729 359841])
                    ("diagonal_cigar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [359864 359868])
                            ("x" variable nil (reparse-symbol function_parameters) [359870 359871])
                            ("cond" variable nil (reparse-symbol function_parameters) [359873 359877]))                          )
                        (reparse-symbol indented_block_body) [359845 360045])
                    ("tablet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [360060 360064])
                            ("x" variable nil (reparse-symbol function_parameters) [360066 360067])
                            ("rot" variable nil (reparse-symbol function_parameters) [360069 360072]))                          
                        :documentation "Tablet test objective function")
                        (reparse-symbol indented_block_body) [360049 360378])
                    ("grad_tablet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [360398 360402])
                            ("x" variable nil (reparse-symbol function_parameters) [360404 360405])
                            ("args" variable nil (reparse-symbol function_parameters) [360407 360412]))                          )
                        (reparse-symbol indented_block_body) [360382 360489])
                    ("cigtab" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [360504 360508])
                            ("y" variable nil (reparse-symbol function_parameters) [360510 360511]))                          
                        :documentation "Cigtab test objective function")
                        (reparse-symbol indented_block_body) [360493 360713])
                    ("twoaxes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [360729 360733])
                            ("y" variable nil (reparse-symbol function_parameters) [360735 360736]))                          
                        :documentation "Cigtab test objective function")
                        (reparse-symbol indented_block_body) [360717 360958])
                    ("ellirot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [360974 360978])
                            ("x" variable nil (reparse-symbol function_parameters) [360980 360981]))                          )
                        (reparse-symbol indented_block_body) [360962 361022])
                    ("hyperelli" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [361040 361044])
                            ("x" variable nil (reparse-symbol function_parameters) [361046 361047]))                          )
                        (reparse-symbol indented_block_body) [361026 361118])
                    ("halfelli" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [361135 361139])
                            ("x" variable nil (reparse-symbol function_parameters) [361141 361142]))                          )
                        (reparse-symbol indented_block_body) [361122 361246])
                    ("elli" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [361259 361263])
                            ("x" variable nil (reparse-symbol function_parameters) [361265 361266])
                            ("rot" variable nil (reparse-symbol function_parameters) [361268 361271])
                            ("xoffset" variable nil (reparse-symbol function_parameters) [361275 361282])
                            ("cond" variable nil (reparse-symbol function_parameters) [361286 361290])
                            ("actuator_noise" variable nil (reparse-symbol function_parameters) [361296 361310])
                            ("both" variable nil (reparse-symbol function_parameters) [361316 361320]))                          
                        :documentation "Ellipsoid test objective function")
                        (reparse-symbol indented_block_body) [361250 362223])
                    ("grad_elli" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [362241 362245])
                            ("x" variable nil (reparse-symbol function_parameters) [362247 362248])
                            ("args" variable nil (reparse-symbol function_parameters) [362250 362255]))                          )
                        (reparse-symbol indented_block_body) [362227 362370])
                    ("fun_as_arg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [362389 362393])
                            ("x" variable nil (reparse-symbol function_parameters) [362395 362396])
                            ("args" variable nil (reparse-symbol function_parameters) [362398 362403]))                          
                        :documentation "``fun_as_arg(x, fun, *more_args)`` calls ``fun(x, *more_args)``.

        Use case::

            fmin(cma.fun_as_arg, args=(fun,), gradf=grad_numerical)

        calls fun_as_args(x, args) and grad_numerical(x, fun, args=args)

        ")
                        (reparse-symbol indented_block_body) [362374 362768])
                    ("grad_numerical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [362791 362795])
                            ("x" variable nil (reparse-symbol function_parameters) [362797 362798])
                            ("func" variable nil (reparse-symbol function_parameters) [362800 362804])
                            ("epsilon" variable nil (reparse-symbol function_parameters) [362806 362813]))                          
                        :documentation "symmetric gradient")
                        (reparse-symbol indented_block_body) [362772 363181])
                    ("elliconstraint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [363204 363208])
                            ("x" variable nil (reparse-symbol function_parameters) [363210 363211])
                            ("cfac" variable nil (reparse-symbol function_parameters) [363213 363217])
                            ("tough" variable nil (reparse-symbol function_parameters) [363223 363228])
                            ("cond" variable nil (reparse-symbol function_parameters) [363235 363239]))                          
                        :documentation "ellipsoid test objective function with \"constraints\" ")
                        (reparse-symbol indented_block_body) [363185 363670])
                    ("rosen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [363684 363688])
                            ("x" variable nil (reparse-symbol function_parameters) [363690 363691])
                            ("alpha" variable nil (reparse-symbol function_parameters) [363693 363698]))                          
                        :documentation "Rosenbrock test objective function")
                        (reparse-symbol indented_block_body) [363674 363966])
                    ("grad_rosen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [363985 363989])
                            ("x" variable nil (reparse-symbol function_parameters) [363991 363992])
                            ("args" variable nil (reparse-symbol function_parameters) [363994 363999]))                          )
                        (reparse-symbol indented_block_body) [363970 364311])
                    ("diffpow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [364327 364331])
                            ("x" variable nil (reparse-symbol function_parameters) [364333 364334])
                            ("rot" variable nil (reparse-symbol function_parameters) [364336 364339]))                          
                        :documentation "Diffpow test objective function")
                        (reparse-symbol indented_block_body) [364315 364521])
                    ("rosenelli" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [364539 364543])
                            ("x" variable nil (reparse-symbol function_parameters) [364545 364546]))                          )
                        (reparse-symbol indented_block_body) [364525 364636])
                    ("ridge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [364650 364654])
                            ("x" variable nil (reparse-symbol function_parameters) [364656 364657])
                            ("expo" variable nil (reparse-symbol function_parameters) [364659 364663]))                          )
                        (reparse-symbol indented_block_body) [364640 364868])
                    ("ridgecircle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [364888 364892])
                            ("x" variable nil (reparse-symbol function_parameters) [364894 364895])
                            ("expo" variable nil (reparse-symbol function_parameters) [364897 364901]))                          
                        :documentation "happy cat by HG Beyer")
                        (reparse-symbol indented_block_body) [364872 365046])
                    ("happycat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [365063 365067])
                            ("x" variable nil (reparse-symbol function_parameters) [365069 365070])
                            ("alpha" variable nil (reparse-symbol function_parameters) [365072 365077]))                          )
                        (reparse-symbol indented_block_body) [365050 365183])
                    ("flat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [365196 365200])
                            ("x" variable nil (reparse-symbol function_parameters) [365202 365203]))                          )
                        (reparse-symbol indented_block_body) [365187 365316])
                    ("branin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [365331 365335])
                            ("x" variable nil (reparse-symbol function_parameters) [365337 365338]))                          )
                        (reparse-symbol indented_block_body) [365320 365542])
                    ("goldsteinprice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [365565 365569])
                            ("x" variable nil (reparse-symbol function_parameters) [365571 365572]))                          )
                        (reparse-symbol indented_block_body) [365546 365833])
                    ("griewank" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [365850 365854])
                            ("x" variable nil (reparse-symbol function_parameters) [365856 365857]))                          )
                        (reparse-symbol indented_block_body) [365837 366002])
                    ("rastrigin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [366020 366024])
                            ("x" variable nil (reparse-symbol function_parameters) [366026 366027]))                          
                        :documentation "Rastrigin test objective function")
                        (reparse-symbol indented_block_body) [366006 366369])
                    ("schaffer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [366386 366390])
                            ("x" variable nil (reparse-symbol function_parameters) [366392 366393]))                          
                        :documentation " Schaffer function x0 in [-100..100]")
                        (reparse-symbol indented_block_body) [366373 366563])
                    ("schwefelelli" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [366585 366589])
                            ("x" variable nil (reparse-symbol function_parameters) [366591 366592]))                          )
                        (reparse-symbol indented_block_body) [366568 366711])
                    ("schwefelmult" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [366732 366736])
                            ("x" variable nil (reparse-symbol function_parameters) [366738 366739])
                            ("pen_fac" variable nil (reparse-symbol function_parameters) [366741 366748]))                          
                        :documentation "multimodal Schwefel function with domain -500..500")
                        (reparse-symbol indented_block_body) [366715 367091])
                    ("optprob" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [367107 367111])
                            ("x" variable nil (reparse-symbol function_parameters) [367113 367114]))                          )
                        (reparse-symbol indented_block_body) [367095 367214])
                    ("lincon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [367229 367233])
                            ("x" variable nil (reparse-symbol function_parameters) [367235 367236])
                            ("theta" variable nil (reparse-symbol function_parameters) [367238 367243]))                          
                        :documentation "ridge like linear function with one linear constraint")
                        (reparse-symbol indented_block_body) [367218 367401])
                    ("rosen_nesterov" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [367424 367428])
                            ("x" variable nil (reparse-symbol function_parameters) [367430 367431])
                            ("rho" variable nil (reparse-symbol function_parameters) [367433 367436]))                          
                        :documentation "needs exponential number of steps in a non-increasing f-sequence.

        x_0 = (-1,1,...,1)
        See Jarre (2011) \"On Nesterov's Smooth Chebyshev-Rosenbrock Function\"

        ")
                        (reparse-symbol indented_block_body) [367405 367744])
                    ("powel_singular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [367767 367771])
                            ("x" variable nil (reparse-symbol function_parameters) [367773 367774]))                          )
                        (reparse-symbol indented_block_body) [367748 368078])
                    ("styblinski_tang" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [368102 368106])
                            ("x" variable nil (reparse-symbol function_parameters) [368108 368109]))                          
                        :documentation "in [-5, 5]
        ")
                        (reparse-symbol indented_block_body) [368082 368357])
                    ("trid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [368371 368375])
                            ("x" variable nil (reparse-symbol function_parameters) [368377 368378]))                          )
                        (reparse-symbol indented_block_body) [368362 368432])
                    ("bukin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [368447 368451])
                            ("x" variable nil (reparse-symbol function_parameters) [368453 368454]))                          
                        :documentation "Bukin function from Wikipedia, generalized simplistically from 2-D.

        http://en.wikipedia.org/wiki/Test_functions_for_optimization")
                        (reparse-symbol indented_block_body) [368437 368827]))                  
                :type "class")
                nil [354584 368827])
            ("fcts" variable nil nil [368828 368853])
            ("Fcts" variable nil nil [368854 368865])
            ("FF" variable nil nil [368948 368957])
            ("felli" function
               (:documentation "unbound test function, needed to test multiprocessor"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [368969 368970]))                  )
                nil [368959 369123])
            ("_test" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [369245 369251]))              ) nil [369235 369389])
            ("process_doctest_output" function
               (:documentation " "
                :arguments 
                  ( ("stream" variable nil (reparse-symbol function_parameters) [369416 369422]))                  )
                nil [369389 370499])
            ("main" function
               (:documentation "to install and/or test from the command line use::

        python cma.py [options | func dim sig0 [optkey optval][optkey optval]...]

    with options being

    ``--test`` (or ``-t``) to run the doctest, ``--test -v`` to get (much) verbosity.

    ``install`` to install cma.py (uses setup from distutils.core).

    ``--doc`` for more infos.

    Or start Python or (even better) ``ipython`` and::

        import cma
        cma.main('--test')
        help(cma)
        help(cma.fmin)
        res = fmin(cma.fcts.rosen, 10 * [0], 1)
        cma.plot()

    Examples
    ========
    Testing with the local python distribution from a command line
    in a folder where ``cma.py`` can be found::

        python cma.py --test

    And a single run on the Rosenbrock function::

        python cma.py rosen 10 1  # dimension initial_sigma
        python cma.py plot

    In the python shell::

        import cma
        cma.main('--test')

    "
                :arguments 
                  ( ("argv" variable nil (reparse-symbol function_parameters) [370637 370641]))                  )
                nil [370628 377186])
            ("if" code nil nil [377385 377590]))          
      :file "cma_es_lib.py"
      :pointmax 377590
      :fsize 377589
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax '((RETURN 367058 . 367064) (IF 367067 . 367069) (ELSE 367081 . 367085) (NAME 366828 . 366829) (IF 366836 . 366838) (ELSE 366854 . 366858) (RETURN 365231 . 365237) (IF 365240 . 365242) (ELSE 365267 . 365271) (RETURN 364805 . 364811) (IF 364814 . 364816) (ELSE 364828 . 364832) (NAME 364676 . 364677) (IF 364684 . 364686) (ELSE 364702 . 364706) (RETURN 363903 . 363909) (IF 363912 . 363914) (ELSE 363926 . 363930) (NAME 363762 . 363763) (IF 363770 . 363772) (ELSE 363788 . 363792) (NAME 362862 . 362865) (IF 362888 . 362890) (ELSE 362907 . 362911) (NAME 362688 . 362697) (IF 362709 . 362711) (ELSE 362726 . 362730) (RETURN 360925 . 360931) (IF 360934 . 360936) (ELSE 360948 . 360952) (NAME 360792 . 360793) (IF 360800 . 360802) (ELSE 360818 . 360822) (RETURN 360680 . 360686) (IF 360689 . 360691) (ELSE 360703 . 360707) (NAME 360567 . 360568) (IF 360575 . 360577) (ELSE 360593 . 360597) (RETURN 360315 . 360321) (IF 360324 . 360326) (ELSE 360338 . 360342) (NAME 360199 . 360200) (IF 360207 . 360209) (ELSE 360225 . 360229) (RETURN 359662 . 359668) (IF 359671 . 359673) (ELSE 359685 . 359689) (NAME 359494 . 359495) (IF 359502 . 359504) (ELSE 359520 . 359524) (RETURN 356629 . 356635) (IF 356652 . 356654) (ELSE 356673 . 356677) (RETURN 356518 . 356524) (IF 356541 . 356543) (ELSE 356567 . 356571) (RETURN 356413 . 356419) (IF 356436 . 356438) (ELSE 356448 . 356452) (NAME 354373 . 354374) (IF 354388 . 354390) (ELSE 354400 . 354404) (NAME 354326 . 354327) (IF 354340 . 354342) (ELSE 354352 . 354356) (NAME 354078 . 354081) (IF 354095 . 354097) (ELSE 354109 . 354113) (NAME 354027 . 354030) (IF 354043 . 354045) (ELSE 354057 . 354061) (NAME 349652 . 349656) (IF 349682 . 349684) (ELSE 349691 . 349695) (NAME 344359 . 344361) (IF 344385 . 344387) (ELSE 344398 . 344402) (RETURN 325757 . 325763) (IF 325769 . 325771) (ELSE 325789 . 325793) (NAME 325232 . 325234) (IF 325246 . 325248) (ELSE 325266 . 325270) (NAME 320131 . 320135) (IF 320143 . 320145) (ELSE 320151 . 320155) (NAME 319828 . 319832) (IF 319840 . 319842) (ELSE 319848 . 319852) (NAME 318487 . 318491) (IF 318506 . 318508) (ELSE 318522 . 318526) (NAME 316209 . 316213) (IF 316237 . 316239) (ELSE 316254 . 316258) (NAME 316061 . 316065) (IF 316078 . 316080) (ELSE 316086 . 316090) (ELSE 315239 . 315243) (NAME 315208 . 315216) (IF 315229 . 315231) (NAME 309942 . 309946) (IF 309959 . 309961) (ELSE 309987 . 309991) (NAME 309877 . 309882) (IF 309907 . 309909) (ELSE 309927 . 309931) (NAME 307263 . 307267) (IF 307292 . 307294) (ELSE 307304 . 307308) (NAME 283881 . 283886) (IF 283898 . 283900) (ELSE 283912 . 283916) (NAME 262394 . 262397) (IF 262407 . 262409) (ELSE 262429 . 262433) (NAME 254588 . 254592) (IF 254619 . 254621) (ELSE 254648 . 254652) (NAME 218680 . 218684) (IF 218696 . 218698) (ELSE 218745 . 218749) (RETURN 209262 . 209268) (IF 209286 . 209288) (ELSE 209313 . 209317) (NAME 171755 . 171756) (IF 171850 . 171852) (ELSE 171868 . 171872) (NAME 151780 . 151781) (IF 151799 . 151801) (ELSE 151813 . 151817) (NAME 131815 . 131820) (IF 131833 . 131835) (ELSE 131850 . 131854) (NAME 131010 . 131013) (IF 131036 . 131038) (ELSE 131055 . 131059) (NAME 130717 . 130720) (IF 130743 . 130745) (ELSE 130762 . 130766) (NAME 125997 . 126002) (IF 126035 . 126037) (ELSE 126055 . 126059) (NAME 125942 . 125951) (IF 125959 . 125961) (ELSE 125977 . 125981) (NAME 122983 . 122987) (IF 123016 . 123018) (ELSE 123086 . 123090) (NAME 122217 . 122221) (IF 122279 . 122281) (ELSE 122324 . 122328) (NAME 93724 . 93728) (IF 93761 . 93763) (ELSE 93796 . 93800) (NAME 89402 . 89408) (IF 89447 . 89449) (ELSE 89457 . 89461) (NAME 89160 . 89166) (IF 89177 . 89179) (ELSE 89187 . 89191) (NAME 75243 . 75247) (IF 75277 . 75279) (ELSE 75302 . 75306) (NAME 74858 . 74862) (IF 74887 . 74889) (ELSE 74910 . 74914) (NAME 55780 . 55782) (IF 55817 . 55819) (ELSE 55845 . 55849) (RETURN 51649 . 51655) (IF 51663 . 51665) (ELSE 51685 . 51689) (NAME 50611 . 50612) (IF 50619 . 50621) (ELSE 50641 . 50645) (RETURN 50495 . 50501) (IF 50506 . 50508) (ELSE 50524 . 50528) (NAME 49228 . 49229) (IF 49252 . 49254) (ELSE 49280 . 49284) (RETURN 40968 . 40974) (IF 40977 . 40979) (ELSE 40996 . 41000) (NAME 37877 . 37881) (IF 37895 . 37897) (ELSE 37908 . 37912) (NAME 36227 . 36231) (IF 36238 . 36240) (ELSE 36275 . 36279) (NAME 349652 . 349656) (IF 349682 . 349684) (ELSE 349691 . 349695) (NAME 344359 . 344361) (IF 344385 . 344387) (ELSE 344398 . 344402) (RETURN 325757 . 325763) (IF 325769 . 325771) (ELSE 325789 . 325793) (NAME 325232 . 325234) (IF 325246 . 325248) (ELSE 325266 . 325270) (NAME 320131 . 320135) (IF 320143 . 320145) (ELSE 320151 . 320155) (NAME 319828 . 319832) (IF 319840 . 319842) (ELSE 319848 . 319852) (NAME 318487 . 318491) (IF 318506 . 318508) (ELSE 318522 . 318526) (NAME 316209 . 316213) (IF 316237 . 316239) (ELSE 316254 . 316258) (NAME 316061 . 316065) (IF 316078 . 316080) (ELSE 316086 . 316090) (ELSE 315239 . 315243) (NAME 315208 . 315216) (IF 315229 . 315231) (NAME 309942 . 309946) (IF 309959 . 309961) (ELSE 309987 . 309991) (NAME 309877 . 309882) (IF 309907 . 309909) (ELSE 309927 . 309931) (NAME 307263 . 307267) (IF 307292 . 307294) (ELSE 307304 . 307308) (NAME 283881 . 283886) (IF 283898 . 283900) (ELSE 283912 . 283916) (NAME 262394 . 262397) (IF 262407 . 262409) (ELSE 262429 . 262433) (NAME 254588 . 254592) (IF 254619 . 254621) (ELSE 254648 . 254652) (NAME 218680 . 218684) (IF 218696 . 218698) (ELSE 218745 . 218749) (RETURN 209262 . 209268) (IF 209286 . 209288) (ELSE 209313 . 209317) (NAME 171755 . 171756) (IF 171850 . 171852) (ELSE 171868 . 171872) (NAME 151780 . 151781) (IF 151799 . 151801) (ELSE 151813 . 151817) (NAME 131815 . 131820) (IF 131833 . 131835) (ELSE 131850 . 131854) (NAME 131010 . 131013) (IF 131036 . 131038) (ELSE 131055 . 131059) (NAME 130717 . 130720) (IF 130743 . 130745) (ELSE 130762 . 130766) (NAME 125997 . 126002) (IF 126035 . 126037) (ELSE 126055 . 126059) (NAME 125942 . 125951) (IF 125959 . 125961) (ELSE 125977 . 125981) (NAME 122983 . 122987) (IF 123016 . 123018) (ELSE 123086 . 123090) (NAME 122217 . 122221) (IF 122279 . 122281) (ELSE 122324 . 122328) (NAME 93724 . 93728) (IF 93761 . 93763) (ELSE 93796 . 93800) (NAME 89402 . 89408) (IF 89447 . 89449) (ELSE 89457 . 89461) (NAME 89160 . 89166) (IF 89177 . 89179) (ELSE 89187 . 89191) (NAME 75243 . 75247) (IF 75277 . 75279) (ELSE 75302 . 75306) (NAME 74858 . 74862) (IF 74887 . 74889) (ELSE 74910 . 74914) (NAME 55780 . 55782) (IF 55817 . 55819) (ELSE 55845 . 55849) (RETURN 51649 . 51655) (IF 51663 . 51665) (ELSE 51685 . 51689) (NAME 50611 . 50612) (IF 50619 . 50621) (ELSE 50641 . 50645) (RETURN 50495 . 50501) (IF 50506 . 50508) (ELSE 50524 . 50528) (NAME 49228 . 49229) (IF 49252 . 49254) (ELSE 49280 . 49284) (RETURN 40968 . 40974) (IF 40977 . 40979) (ELSE 40996 . 41000) (NAME 37877 . 37881) (IF 37895 . 37897) (ELSE 37908 . 37912) (NAME 36227 . 36231) (IF 36238 . 36240) (ELSE 36275 . 36279)))
    (semanticdb-table "erwr.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.algos.vpg" include nil nil [1 32])
            ("rllab.optimizers.lbfgs_optimizer" include nil nil [33 92])
            ("rllab.core.serializable" include nil nil [93 141])
            ("ERWR" type
               (:documentation "
    Episodic Reward Weighted Regression [1]_

    Notes
    -----
    This does not implement the original RwR [2]_ that deals with \"immediate reward problems\" since
    it doesn't find solutions that optimize for temporally delayed rewards.

    .. [1] Kober, Jens, and Jan R. Peters. \"Policy search for motor primitives in robotics.\" Advances in neural information processing systems. 2009.
    .. [2] Peters, Jan, and Stefan Schaal. \"Using reward-weighted regression for reinforcement learning of task space control.\" Approximate Dynamic Programming and Reinforcement Learning, 2007. ADPRL 2007. IEEE International Symposium on. IEEE, 2007.
    "
                :superclasses ("VPG" "Serializable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Serializable" code nil (reparse-symbol indented_block_body) [995 1034])
                            ("if" code nil (reparse-symbol indented_block_body) [1043 1201])
                            ("super" code nil (reparse-symbol indented_block_body) [1209 1373]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [866 870])
                            ("optimizer" variable nil (reparse-symbol function_parameters) [884 893])
                            ("optimizer_args" variable nil (reparse-symbol function_parameters) [912 926])
                            ("positive_adv" variable nil (reparse-symbol function_parameters) [945 957])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [976 984]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [840 1374]))                  
                :type "class")
                nil [144 1374]))          
      :file "erwr.py"
      :pointmax 1375
      :fsize 1374
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "vpg.py"
      :major-mode 'python-mode
      :tags 
        '( ("theano.tensor" include nil nil [1 27])
            ("theano" include nil nil [28 41])
            ("rllab.misc" include nil nil [42 71])
            ("rllab.misc.overrides" include nil nil [72 114])
            ("rllab.misc" include nil nil [115 141])
            ("rllab.algos.batch_polopt" include nil nil [142 190])
            ("rllab.optimizers.first_order_optimizer" include nil nil [191 261])
            ("rllab.core.serializable" include nil nil [262 310])
            ("VPG" type
               (:documentation "
    Vanilla Policy Gradient.
    "
                :superclasses ("BatchPolopt" "Serializable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Serializable" code nil (reparse-symbol indented_block_body) [584 623])
                            ("if" code nil (reparse-symbol indented_block_body) [632 999])
                            ("self" variable nil (reparse-symbol indented_block_body) [1007 1033])
                            ("self" variable nil (reparse-symbol indented_block_body) [1042 1062])
                            ("super" code nil (reparse-symbol indented_block_body) [1071 1149]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [427 431])
                            ("env" variable nil (reparse-symbol function_parameters) [445 448])
                            ("policy" variable nil (reparse-symbol function_parameters) [462 468])
                            ("baseline" variable nil (reparse-symbol function_parameters) [482 490])
                            ("optimizer" variable nil (reparse-symbol function_parameters) [504 513])
                            ("optimizer_args" variable nil (reparse-symbol function_parameters) [532 546])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [565 573]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [401 1150])
                    ("init_opt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1183 1187]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1155 3567])
                    ("optimize_policy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3607 3611])
                            ("itr" variable nil (reparse-symbol function_parameters) [3613 3616])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [3618 3630]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3572 4565])
                    ("get_itr_snapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4606 4610])
                            ("itr" variable nil (reparse-symbol function_parameters) [4612 4615])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [4617 4629]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4570 4778]))                  
                :type "class")
                nil [313 4778]))          
      :file "vpg.py"
      :pointmax 4778
      :fsize 4777
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ppo.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.optimizers.penalty_lbfgs_optimizer" include nil nil [1 75])
            ("rllab.algos.npo" include nil nil [76 107])
            ("rllab.core.serializable" include nil nil [108 156])
            ("PPO" type
               (:documentation "
    Penalized Policy Optimization.
    "
                :superclasses ("NPO" "Serializable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Serializable" code nil (reparse-symbol indented_block_body) [369 408])
                            ("if" code nil (reparse-symbol indented_block_body) [417 582])
                            ("super" code nil (reparse-symbol indented_block_body) [590 646]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [271 275])
                            ("optimizer" variable nil (reparse-symbol function_parameters) [289 298])
                            ("optimizer_args" variable nil (reparse-symbol function_parameters) [317 331])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [350 358]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [245 647]))                  
                :type "class")
                nil [159 647]))          
      :file "ppo.py"
      :pointmax 647
      :fsize 646
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "npo.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.misc" include nil nil [1 27])
            ("rllab.misc.overrides" include nil nil [28 70])
            ("rllab.algos.batch_polopt" include nil nil [71 119])
            ("rllab.misc.logger" include nil nil [120 154])
            ("theano" include nil nil [155 168])
            ("theano.tensor" include nil nil [169 195])
            ("rllab.optimizers.penalty_lbfgs_optimizer" include nil nil [196 270])
            ("NPO" type
               (:documentation "
    Natural Policy Optimization.
    "
                :superclasses ("BatchPolopt")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [503 668])
                            ("self" variable nil (reparse-symbol indented_block_body) [676 702])
                            ("self" variable nil (reparse-symbol indented_block_body) [711 737])
                            ("super" code nil (reparse-symbol indented_block_body) [746 781]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [377 381])
                            ("optimizer" variable nil (reparse-symbol function_parameters) [395 404])
                            ("optimizer_args" variable nil (reparse-symbol function_parameters) [423 437])
                            ("step_size" variable nil (reparse-symbol function_parameters) [456 465])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [484 492]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [351 782])
                    ("init_opt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [815 819]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [787 3102])
                    ("optimize_policy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3142 3146])
                            ("itr" variable nil (reparse-symbol function_parameters) [3148 3151])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [3153 3165]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3107 4174])
                    ("get_itr_snapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4215 4219])
                            ("itr" variable nil (reparse-symbol function_parameters) [4221 4224])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [4226 4238]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4179 4387]))                  
                :type "class")
                nil [273 4387]))          
      :file "npo.py"
      :pointmax 4387
      :fsize 4386
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "nop.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.algos.batch_polopt" include nil nil [1 49])
            ("rllab.misc.overrides" include nil nil [50 92])
            ("NOP" type
               (:documentation "
    NOP (no optimization performed) policy search algorithm
    "
                :superclasses ("BatchPolopt")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [263 298]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [226 230])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [244 252]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [200 299])
                    ("init_opt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [332 336]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [304 352])
                    ("optimize_policy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [392 396])
                            ("itr" variable nil (reparse-symbol function_parameters) [398 401])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [403 415]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [357 431])
                    ("get_itr_snapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [472 476])
                            ("itr" variable nil (reparse-symbol function_parameters) [478 481])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [483 495]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [436 520]))                  
                :type "class")
                nil [95 520]))          
      :file "nop.py"
      :pointmax 520
      :fsize 519
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "tnpg.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.algos.npo" include nil nil [1 32])
            ("rllab.optimizers.conjugate_gradient_optimizer" include nil nil [33 117])
            ("rllab.misc" include nil nil [118 144])
            ("TNPG" type
               (:documentation "
    Truncated Natural Policy Gradient.
    "
                :superclasses ("NPO")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [348 662])
                            ("super" code nil (reparse-symbol indented_block_body) [670 727]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [250 254])
                            ("optimizer" variable nil (reparse-symbol function_parameters) [268 277])
                            ("optimizer_args" variable nil (reparse-symbol function_parameters) [296 310])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [329 337]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [224 728]))                  
                :type "class")
                nil [147 728]))          
      :file "tnpg.py"
      :pointmax 728
      :fsize 727
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "trpo.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.algos.npo" include nil nil [1 32])
            ("rllab.optimizers.conjugate_gradient_optimizer" include nil nil [33 117])
            ("rllab.core.serializable" include nil nil [118 166])
            ("TRPO" type
               (:documentation "
    Trust Region Policy Optimization
    "
                :superclasses ("NPO")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [368 538])
                            ("super" code nil (reparse-symbol indented_block_body) [546 603]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [270 274])
                            ("optimizer" variable nil (reparse-symbol function_parameters) [288 297])
                            ("optimizer_args" variable nil (reparse-symbol function_parameters) [316 330])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [349 357]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [244 604]))                  
                :type "class")
                nil [169 604]))          
      :file "trpo.py"
      :pointmax 604
      :fsize 603
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "reps.py"
      :major-mode 'python-mode
      :tags 
        '( ("theano.tensor" include nil nil [1 27])
            ("theano" include nil nil [28 41])
            ("scipy.optimize" include nil nil [42 63])
            ("rllab.misc" include nil nil [64 93])
            ("rllab.misc.overrides" include nil nil [94 136])
            ("rllab.misc" include nil nil [137 163])
            ("rllab.algos.batch_polopt" include nil nil [164 212])
            ("rllab.core.serializable" include nil nil [213 261])
            ("numpy" include nil nil [262 280])
            ("rllab.misc" include nil nil [281 316])
            ("REPS" type
               (:documentation "
    Relative Entropy Policy Search (REPS)

    References
    ----------
    [1] J. Peters, K. Mulling, and Y. Altun, \"Relative Entropy Policy Search,\" Artif. Intell., pp. 1607-1612, 2008.

    "
                :superclasses ("BatchPolopt" "Serializable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"

        :param epsilon: Max KL divergence between new policy and old policy.
        :param L2_reg_dual: Dual regularization
        :param L2_reg_loss: Loss regularization
        :param max_opt_itr: Maximum number of batch optimization iterations.
        :param optimizer: Module path to the optimizer. It must support the same interface as
        scipy.optimize.fmin_l_bfgs_b.
        :return:
        \"\"\"" code nil (reparse-symbol indented_block_body) [802 1217])
                            ("Serializable" code nil (reparse-symbol indented_block_body) [1226 1265])
                            ("super" code nil (reparse-symbol indented_block_body) [1274 1310])
                            ("self" variable nil (reparse-symbol indented_block_body) [1319 1341])
                            ("self" variable nil (reparse-symbol indented_block_body) [1350 1380])
                            ("self" variable nil (reparse-symbol indented_block_body) [1389 1419])
                            ("self" variable nil (reparse-symbol indented_block_body) [1428 1458])
                            ("self" variable nil (reparse-symbol indented_block_body) [1467 1493])
                            ("self" variable nil (reparse-symbol indented_block_body) [1502 1522]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [595 599])
                            ("epsilon" variable nil (reparse-symbol function_parameters) [613 620])
                            ("L2_reg_dual" variable nil (reparse-symbol function_parameters) [638 649])
                            ("L2_reg_loss" variable nil (reparse-symbol function_parameters) [675 686])
                            ("max_opt_itr" variable nil (reparse-symbol function_parameters) [703 714])
                            ("optimizer" variable nil (reparse-symbol function_parameters) [731 740])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [783 791]))                          
                        :documentation "

        :param epsilon: Max KL divergence between new policy and old policy.
        :param L2_reg_dual: Dual regularization
        :param L2_reg_loss: Loss regularization
        :param max_opt_itr: Maximum number of batch optimization iterations.
        :param optimizer: Module path to the optimizer. It must support the same interface as
        scipy.optimize.fmin_l_bfgs_b.
        :return:
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [569 1523])
                    ("_features" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7012 7016])
                            ("path" variable nil (reparse-symbol function_parameters) [7018 7022]))                          )
                        (reparse-symbol indented_block_body) [6998 7248])
                    ("get_itr_snapshot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11938 11942])
                            ("itr" variable nil (reparse-symbol function_parameters) [11944 11947])
                            ("samples_data" variable nil (reparse-symbol function_parameters) [11949 11961]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11902 12110]))                  
                :type "class")
                nil [319 12110]))          
      :file "reps.py"
      :pointmax 12110
      :fsize 12109
      :lastmodtime '(22658 51438 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags nil
      :file "__init__.py"
      :pointmax 1
      :fsize 0
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "util.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("theano" include nil nil [20 33])
            ("time" include nil nil [34 45])
            ("rllab.core.serializable" include nil nil [46 94])
            ("rllab.misc.ext" include nil nil [95 129])
            ("floatX" variable nil nil [131 160])
            ("center_advantages" function (:arguments 
              ( ("advantages" variable nil (reparse-symbol function_parameters) [185 195]))              ) nil [163 272])
            ("shift_advantages_to_positive" function (:arguments 
              ( ("advantages" variable nil (reparse-symbol function_parameters) [306 316]))              ) nil [273 371])
            ("ReplayPool" type
               (:documentation "
    A utility class for experience replay.
    The code is adapted from https://github.com/spragunr/deep_q_rl
    "
                :superclasses ("Serializable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a ReplayPool.

        Arguments:
            observation_shape - tuple indicating the shape of the observation
            action_dim - dimension of the action
            size - capacity of the replay pool
            observation_dtype - ...
            action_dtype - ...
            concat_observations - whether to concat the past few observations
            as a single one, so as to ensure the Markov property
            concat_length - length of the concatenation
        \"\"\"" code nil (reparse-symbol indented_block_body) [816 1314])
                            ("self" variable nil (reparse-symbol indented_block_body) [1324 1366])
                            ("self" variable nil (reparse-symbol indented_block_body) [1375 1403])
                            ("self" variable nil (reparse-symbol indented_block_body) [1412 1438])
                            ("self" variable nil (reparse-symbol indented_block_body) [1447 1547])
                            ("self" variable nil (reparse-symbol indented_block_body) [1556 1624])
                            ("self" variable nil (reparse-symbol indented_block_body) [1633 1684])
                            ("self" variable nil (reparse-symbol indented_block_body) [1693 1746])
                            ("self" variable nil (reparse-symbol indented_block_body) [1826 1844])
                            ("self" variable nil (reparse-symbol indented_block_body) [1853 1899])
                            ("self" variable nil (reparse-symbol indented_block_body) [1908 1942])
                            ("self" variable nil (reparse-symbol indented_block_body) [1951 1993])
                            ("self" variable nil (reparse-symbol indented_block_body) [2002 2034])
                            ("if" code nil (reparse-symbol indented_block_body) [2043 2139])
                            ("if" code nil (reparse-symbol indented_block_body) [2148 2321])
                            ("self" variable nil (reparse-symbol indented_block_body) [2330 2345])
                            ("self" variable nil (reparse-symbol indented_block_body) [2354 2366])
                            ("self" variable nil (reparse-symbol indented_block_body) [2375 2388])
                            ("super" code nil (reparse-symbol indented_block_body) [2397 2585]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [562 566])
                            ("observation_shape" variable nil (reparse-symbol function_parameters) [580 597])
                            ("action_dim" variable nil (reparse-symbol function_parameters) [611 621])
                            ("max_steps" variable nil (reparse-symbol function_parameters) [635 644])
                            ("observation_dtype" variable nil (reparse-symbol function_parameters) [658 675])
                            ("action_dtype" variable nil (reparse-symbol function_parameters) [696 708])
                            ("concat_observations" variable nil (reparse-symbol function_parameters) [729 748])
                            ("concat_length" variable nil (reparse-symbol function_parameters) [768 781])
                            ("rng" variable nil (reparse-symbol function_parameters) [797 800]))                          
                        :documentation "Construct a ReplayPool.

        Arguments:
            observation_shape - tuple indicating the shape of the observation
            action_dim - dimension of the action
            size - capacity of the replay pool
            observation_dtype - ...
            action_dtype - ...
            concat_observations - whether to concat the past few observations
            as a single one, so as to ensure the Markov property
            concat_length - length of the concatenation
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [536 2586])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2608 2612]))                          )
                        (reparse-symbol indented_block_body) [2591 2995])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3017 3021])
                            ("d" variable nil (reparse-symbol function_parameters) [3023 3024]))                          )
                        (reparse-symbol indented_block_body) [3000 3384])
                    ("add_sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3404 3408])
                            ("observation" variable nil (reparse-symbol function_parameters) [3410 3421])
                            ("action" variable nil (reparse-symbol function_parameters) [3423 3429])
                            ("reward" variable nil (reparse-symbol function_parameters) [3431 3437])
                            ("terminal" variable nil (reparse-symbol function_parameters) [3439 3447])
                            ("extra" variable nil (reparse-symbol function_parameters) [3449 3454]))                          
                        :documentation "Add a time step record.

        Arguments:
            observation -- current or observation
            action -- action chosen by the agent
            reward -- reward received after taking the action
            terminal -- boolean indicating whether the episode ended after this
            time step
        ")
                        (reparse-symbol indented_block_body) [3389 4597])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4614 4618]))                          
                        :documentation "Return an approximate count of stored state transitions.")
                        (reparse-symbol indented_block_body) [4602 4850])
                    ("last_concat_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4877 4881]))                          
                        :documentation "
        Return the most recent sample (concatenated observations if needed).
        ")
                        (reparse-symbol indented_block_body) [4855 5232])
                    ("concat_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5254 5258])
                            ("state" variable nil (reparse-symbol function_parameters) [5260 5265]))                          
                        :documentation "Return a concatenated state, using the last concat_length -
        1, plus state.

        ")
                        (reparse-symbol indented_block_body) [5237 5866])
                    ("random_batch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5888 5892])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [5894 5904]))                          
                        :documentation "
        Return corresponding observations, actions, rewards, terminal status,
        and next_observations for batch_size randomly chosen state transitions.
        ")
                        (reparse-symbol indented_block_body) [5871 9989]))                  
                :type "class")
                nil [373 9989])
            ("simple_tests" function nil nil [10040 10883])
            ("speed_tests" function nil nil [10885 11647])
            ("trivial_tests" function nil nil [11649 12190])
            ("max_size_tests" function nil nil [12192 13166])
            ("test_memory_usage_ok" function nil nil [13168 13824])
            ("main" function nil nil [13826 13925])
            ("if" code nil nil [13926 13964]))          
      :file "util.py"
      :pointmax 13964
      :fsize 13963
      :lastmodtime '(22555 31253 0 0)
      :unmatched-syntax nil))
  :file "!Users!xiaoli!Dropbox!PHD_research!projects!RLFPS!rllab!rllab!algos!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
