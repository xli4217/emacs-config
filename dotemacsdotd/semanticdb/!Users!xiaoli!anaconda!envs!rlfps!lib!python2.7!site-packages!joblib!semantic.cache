;; Object joblib/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "joblib/"
  :tables
  (list
    (semanticdb-table "pool.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Custom implementation of multiprocessing.Pool with custom pickler

This module provides efficient ways of working with data stored in
shared memory with numpy.memmap arrays without inducing any memory
copy between the parent and child processes.

This module should not be imported if multiprocessing is not
available as it implements subclasses of multiprocessing Pool
that uses a custom alternative to SimpleQueue.

\"\"\"" code nil nil [1 425])
            ("mmap" include nil nil [537 558])
            ("errno" include nil nil [559 571])
            ("os" include nil nil [572 581])
            ("stat" include nil nil [582 593])
            ("sys" include nil nil [594 604])
            ("threading" include nil nil [605 621])
            ("atexit" include nil nil [622 635])
            ("tempfile" include nil nil [636 651])
            ("shutil" include nil nil [652 665])
            ("warnings" include nil nil [666 681])
            ("time" include nil nil [682 704])
            ("try" code nil nil [706 770])
            ("try" code nil nil [771 955])
            ("pickle" include nil nil [1056 1082])
            ("pickle" include nil nil [1084 1119])
            ("io" include nil nil [1120 1142])
            ("assert_spawning" include nil nil [1175 1201])
            ("mp" include nil nil [1175 1201])
            ("multiprocessing.pool" include nil nil [1299 1336])
            ("try" code nil nil [1338 1451])
            ("load" include nil nil [1471 1482])
            ("dump" include nil nil [1502 1513])
            ("hash" include nil nil [1528 1539])
            ("SYSTEM_SHARED_MEM_FS" variable nil nil [1690 1723])
            ("FOLDER_PERMISSIONS" code nil nil [1897 1960])
            ("FILE_PERMISSIONS" code nil nil [1961 2007])
            ("_get_backing_memmap" function
               (:documentation "Recursively look up the original np.memmap instance base if any"
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2183 2184]))                  )
                nil [2159 2658])
            ("has_shareable_memory" function
               (:documentation "Return True if a is backed by some mmap buffer directly or not"
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2685 2686]))                  )
                nil [2660 2808])
            ("_strided_from_memmap" function
               (:documentation "Reconstruct an array view on a memmory mapped file"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [2835 2843])
                    ("dtype" variable nil (reparse-symbol function_parameters) [2845 2850])
                    ("mode" variable nil (reparse-symbol function_parameters) [2852 2856])
                    ("offset" variable nil (reparse-symbol function_parameters) [2858 2864])
                    ("order" variable nil (reparse-symbol function_parameters) [2866 2871])
                    ("shape" variable nil (reparse-symbol function_parameters) [2873 2878])
                    ("strides" variable nil (reparse-symbol function_parameters) [2880 2887])
                    ("total_buffer_len" variable nil (reparse-symbol function_parameters) [2914 2930]))                  )
                nil [2810 3632])
            ("_reduce_memmap_backed" function
               (:documentation "Pickling reduction for memmap backed arrays

    a is expected to be an instance of np.ndarray (or np.memmap)
    m is expected to be an instance of np.memmap on the top of the ``base``
    attribute ancestry of a. ``m.base`` should be the real python mmap object.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [3660 3661])
                    ("m" variable nil (reparse-symbol function_parameters) [3663 3664]))                  )
                nil [3634 4895])
            ("reduce_memmap" function
               (:documentation "Pickle the descriptors of a memmap instance to reopen on same file"
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [4915 4916]))                  )
                nil [4897 5450])
            ("ArrayMemmapReducer" type
               (:documentation "Reducer callable to dump large arrays to memmap files.

    Parameters
    ----------
    max_nbytes: int
        Threshold to trigger memmaping of large arrays to files created
        a folder.
    temp_folder: str
        Path of a folder where files for backing memmaped arrays are created.
    mmap_mode: 'r', 'r+' or 'c'
        Mode for the created memmap datastructure. See the documentation of
        numpy.memmap for more details. Note: 'w+' is coerced to 'r+'
        automatically to avoid zeroing the data on unpickling.
    verbose: int, optional, 0 by default
        If verbose > 0, memmap creations are logged.
        If verbose > 1, both memmap creations, reuse and array pickling are
        logged.
    prewarm: bool, optional, False by default.
        Force a read on newly memmaped array to make sure that OS pre-cache it
        memory. This can be useful to avoid concurrent disk access when the
        same data array is passed to different worker processes.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6617 6646])
                            ("self" variable nil (reparse-symbol indented_block_body) [6655 6686])
                            ("self" variable nil (reparse-symbol indented_block_body) [6695 6722])
                            ("self" variable nil (reparse-symbol indented_block_body) [6731 6758])
                            ("self" variable nil (reparse-symbol indented_block_body) [6767 6790])
                            ("if" code nil (reparse-symbol indented_block_body) [6799 7011]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6507 6511])
                            ("max_nbytes" variable nil (reparse-symbol function_parameters) [6513 6523])
                            ("temp_folder" variable nil (reparse-symbol function_parameters) [6525 6536])
                            ("mmap_mode" variable nil (reparse-symbol function_parameters) [6538 6547])
                            ("verbose" variable nil (reparse-symbol function_parameters) [6549 6556])
                            ("context_id" variable nil (reparse-symbol function_parameters) [6577 6587])
                            ("prewarm" variable nil (reparse-symbol function_parameters) [6594 6601]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6494 7011])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7029 7033])
                            ("a" variable nil (reparse-symbol function_parameters) [7035 7036]))                          )
                        (reparse-symbol indented_block_body) [7016 9528]))                  
                :type "class")
                nil [5452 9528])
            ("CustomizablePickler" type
               (:documentation "Pickler that accepts custom reducers.

    HIGHEST_PROTOCOL is selected by default as this pickler is used
    to pickle ephemeral datastructures for interprocess communication
    hence no backward compatibility is required.

    `reducers` is expected expected to be a dictionary with key/values
    being `(type, callable)` pairs where `callable` is a function that
    give an instance of `type` will return a tuple `(constructor,
    tuple_of_objects)` to rebuild an instance out of the pickled
    `tuple_of_objects` as would return a `__reduce__` method. See the
    standard library documentation on pickling for more details.

    "
                :superclasses ("Pickler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Pickler" code nil (reparse-symbol indented_block_body) [10772 10821])
                            ("if" code nil (reparse-symbol indented_block_body) [10830 10877])
                            ("if" code nil (reparse-symbol indented_block_body) [10885 11302])
                            ("for" code nil (reparse-symbol indented_block_body) [11310 11398]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10707 10711])
                            ("writer" variable nil (reparse-symbol function_parameters) [10713 10719])
                            ("reducers" variable nil (reparse-symbol function_parameters) [10721 10729])
                            ("protocol" variable nil (reparse-symbol function_parameters) [10736 10744]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10694 11398])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11416 11420])
                            ("type" variable nil (reparse-symbol function_parameters) [11422 11426])
                            ("reduce_func" variable nil (reparse-symbol function_parameters) [11428 11439]))                          )
                        (reparse-symbol indented_block_body) [11403 11869]))                  
                :type "class")
                nil [9651 11869])
            ("CustomizablePicklingQueue" type
               (:documentation "Locked Pipe implementation that uses a customizable pickler.

    This class is an alternative to the multiprocessing implementation
    of SimpleQueue in order to make it possible to pass custom
    pickling reducers, for instance to avoid memory copy when passing
    memmory mapped datastructures.

    `reducers` is expected expected to be a dictionary with key/values
    being `(type, callable)` pairs where `callable` is a function that
    give an instance of `type` will return a tuple `(constructor,
    tuple_of_objects)` to rebuild an instance out of the pickled
    `tuple_of_objects` as would return a `__reduce__` method. See the
    standard library documentation on pickling for more details.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12694 12719])
                            ("self, self" code nil (reparse-symbol indented_block_body) [12728 12783])
                            ("self" variable nil (reparse-symbol indented_block_body) [12792 12820])
                            ("if" code nil (reparse-symbol indented_block_body) [12829 12943])
                            ("self" code nil (reparse-symbol indented_block_body) [12951 12971]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12655 12659])
                            ("context" variable nil (reparse-symbol function_parameters) [12661 12668])
                            ("reducers" variable nil (reparse-symbol function_parameters) [12670 12678]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12642 12972])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12994 12998]))                          )
                        (reparse-symbol indented_block_body) [12977 13133])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13155 13159])
                            ("state" variable nil (reparse-symbol function_parameters) [13161 13166]))                          )
                        (reparse-symbol indented_block_body) [13138 13294])
                    ("empty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13309 13313]))                          )
                        (reparse-symbol indented_block_body) [13299 13355])
                    ("_make_methods" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13378 13382]))                          )
                        (reparse-symbol indented_block_body) [13360 14424]))                  
                :type "class")
                nil [11871 14424])
            ("PicklingPool" type
               (:documentation "Pool implementation with customizable pickling reducers.

    This is useful to control how data is shipped between processes
    and makes it possible to use shared memory without useless
    copies induces by the default pickling methods of the original
    objects passed as arguments to dispatch.

    `forward_reducers` and `backward_reducers` are expected to be
    dictionaries with key/values being `(type, callable)` pairs where
    `callable` is a function that give an instance of `type` will return
    a tuple `(constructor, tuple_of_objects)` to rebuild an instance out
    of the pickled `tuple_of_objects` as would return a `__reduce__`
    method. See the standard library documentation on pickling for more
    details.

    "
                :superclasses ("Pool")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15329 15396])
                            ("if" code nil (reparse-symbol indented_block_body) [15404 15473])
                            ("self" variable nil (reparse-symbol indented_block_body) [15481 15522])
                            ("self" variable nil (reparse-symbol indented_block_body) [15531 15574])
                            ("poolargs" variable nil (reparse-symbol indented_block_body) [15583 15619])
                            ("poolargs" code nil (reparse-symbol indented_block_body) [15628 15651])
                            ("super" code nil (reparse-symbol indented_block_body) [15660 15706]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15224 15228])
                            ("processes" variable nil (reparse-symbol function_parameters) [15230 15239])
                            ("forward_reducers" variable nil (reparse-symbol function_parameters) [15246 15262])
                            ("backward_reducers" variable nil (reparse-symbol function_parameters) [15286 15303])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15310 15318]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15211 15707])
                    ("_setup_queues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15730 15734]))                          )
                        (reparse-symbol indented_block_body) [15712 16143]))                  
                :type "class")
                nil [14426 16143])
            ("delete_folder" function
               (:documentation "Utility function to cleanup a temporary folder if still existing"
                :arguments 
                  ( ("folder_path" variable nil (reparse-symbol function_parameters) [16163 16174]))                  )
                nil [16145 16441])
            ("MemmapingPool" type
               (:documentation "Process pool that shares large arrays to avoid memory copy.

    This drop-in replacement for `multiprocessing.pool.Pool` makes
    it possible to work efficiently with shared memory in a numpy
    context.

    Existing instances of numpy.memmap are preserved: the child
    suprocesses will have access to the same shared memory in the
    original mode except for the 'w+' mode that is automatically
    transformed as 'r+' to avoid zeroing the original data upon
    instantiation.

    Furthermore large arrays from the parent process are automatically
    dumped to a temporary folder on the filesystem such as child
    processes to access their content via memmaping (file system
    backed shared memory).

    Note: it is important to call the terminate method to collect
    the temporary folder used by the pool.

    Parameters
    ----------
    processes: int, optional
        Number of worker processes running concurrently in the pool.
    initializer: callable, optional
        Callable executed on worker process creation.
    initargs: tuple, optional
        Arguments passed to the initializer callable.
    temp_folder: str, optional
        Folder to be used by the pool for memmaping large arrays
        for sharing memory with worker processes. If None, this will try in
        order:
        - a folder pointed by the JOBLIB_TEMP_FOLDER environment variable,
        - /dev/shm if the folder exists and is writable: this is a RAMdisk
          filesystem available by default on modern Linux distributions,
        - the default system temporary folder that can be overridden
          with TMP, TMPDIR or TEMP environment variables, typically /tmp
          under Unix operating systems.
    max_nbytes int or None, optional, 1e6 by default
        Threshold on the size of arrays passed to the workers that
        triggers automated memmory mapping in temp_folder.
        Use None to disable memmaping of large arrays.
    forward_reducers: dictionary, optional
        Reducers used to pickle objects passed from master to worker
        processes: see below.
    backward_reducers: dictionary, optional
        Reducers used to pickle return values from workers back to the
        master process.
    verbose: int, optional
        Make it possible to monitor how the communication of numpy arrays
        with the subprocess is handled (pickling or memmaping)
    prewarm: bool or str, optional, \"auto\" by default.
        If True, force a read on newly memmaped array to make sure that OS pre-
        cache it in memory. This can be useful to avoid concurrent disk access
        when the same data array is passed to different worker processes.
        If \"auto\" (by default), prewarm is set to True, unless the Linux shared
        memory partition /dev/shm is available and used as temp_folder.

    `forward_reducers` and `backward_reducers` are expected to be
    dictionaries with key/values being `(type, callable)` pairs where
    `callable` is a function that give an instance of `type` will return
    a tuple `(constructor, tuple_of_objects)` to rebuild an instance out
    of the pickled `tuple_of_objects` as would return a `__reduce__`
    method. See the standard library documentation on pickling for more
    details.

    "
                :superclasses ("PicklingPool")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [20002 20069])
                            ("if" code nil (reparse-symbol indented_block_body) [20077 20146])
                            ("if" code nil (reparse-symbol indented_block_body) [20154 20366])
                            ("use_shared_mem" variable nil (reparse-symbol indented_block_body) [20567 20589])
                            ("pool_folder_name" code nil (reparse-symbol indented_block_body) [20598 20685])
                            ("if" code nil (reparse-symbol indented_block_body) [20694 20787])
                            ("if" code nil (reparse-symbol indented_block_body) [20795 21367])
                            ("if" code nil (reparse-symbol indented_block_body) [21375 21512])
                            ("temp_folder" variable nil (reparse-symbol indented_block_body) [21520 21582])
                            ("pool_folder" variable nil (reparse-symbol indented_block_body) [21591 21648])
                            ("self" variable nil (reparse-symbol indented_block_body) [21657 21688])
                            ("atexit" code nil (reparse-symbol indented_block_body) [22043 22094])
                            ("if" code nil (reparse-symbol indented_block_body) [22104 23183])
                            ("poolargs" variable nil (reparse-symbol indented_block_body) [23192 23337])
                            ("poolargs" code nil (reparse-symbol indented_block_body) [23346 23369])
                            ("super" code nil (reparse-symbol indented_block_body) [23378 23425]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19788 19792])
                            ("processes" variable nil (reparse-symbol function_parameters) [19794 19803])
                            ("temp_folder" variable nil (reparse-symbol function_parameters) [19810 19821])
                            ("max_nbytes" variable nil (reparse-symbol function_parameters) [19828 19838])
                            ("mmap_mode" variable nil (reparse-symbol function_parameters) [19861 19870])
                            ("forward_reducers" variable nil (reparse-symbol function_parameters) [19876 19892])
                            ("backward_reducers" variable nil (reparse-symbol function_parameters) [19899 19916])
                            ("verbose" variable nil (reparse-symbol function_parameters) [19940 19947])
                            ("context_id" variable nil (reparse-symbol function_parameters) [19951 19961])
                            ("prewarm" variable nil (reparse-symbol function_parameters) [19968 19975])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19983 19991]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19775 23426])
                    ("terminate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23445 23449]))                          )
                        (reparse-symbol indented_block_body) [23431 23540]))                  
                :type "class")
                nil [16443 23540]))          
      :file "pool.py"
      :pointmax 23540
      :fsize 23539
      :lastmodtime '(22528 11924 0 0)
      :unmatched-syntax '((INDENT_BLOCK 7624 . 7696) (NEWLINE 7623 . 7624) (COLON 7622 . 7623) (TRY 7475 . 7478) (AS 7618 . 7620) (FROM 1514 . 1518) (PERIOD 1519 . 1520) (FROM 1483 . 1487) (PERIOD 1488 . 1489) (FROM 1452 . 1456) (PERIOD 1457 . 1458) (FROM 1144 . 1148) (PERIOD 1149 . 1150) (INDENT_BLOCK 7625 . 7697) (NEWLINE 7624 . 7625) (COLON 7623 . 7624) (TRY 7476 . 7479) (AS 7619 . 7621) (INDENT_BLOCK 4161 . 4896) (FROM 1514 . 1518) (PERIOD 1519 . 1520) (FROM 1483 . 1487) (PERIOD 1488 . 1489) (FROM 1452 . 1456) (PERIOD 1457 . 1458) (FROM 1144 . 1148) (PERIOD 1149 . 1150) (INDENT_BLOCK 4161 . 4896) (INDENT_BLOCK 7624 . 7696) (NEWLINE 7623 . 7624) (COLON 7622 . 7623) (TRY 7475 . 7478) (AS 7618 . 7620) (FROM 1514 . 1518) (PERIOD 1519 . 1520) (FROM 1483 . 1487) (PERIOD 1488 . 1489) (FROM 1452 . 1456) (PERIOD 1457 . 1458) (FROM 1144 . 1148) (PERIOD 1149 . 1150))))
  :file "!Users!xiaoli!anaconda!envs!rlfps!lib!python2.7!site-packages!joblib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
