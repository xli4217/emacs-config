;; Object scripts/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "scripts/"
  :tables
  (list
    (semanticdb-table "deploy_model.py"
      :major-mode 'python-mode
      :tags nil
      :file "deploy_model.py"
      :pointmax 1
      :fsize 0
      :lastmodtime '(23044 52934 382107 561000)
      :unmatched-syntax nil)
    (semanticdb-table "baxter_env.py"
      :major-mode 'python-mode
      :tags 
        '( ("rospy" include nil nil [24 36])
            ("os" include nil nil [37 46])
            ("numpy" include nil nil [47 65])
            ("baxter_api.baxter_utils" include nil nil [66 111])
            ("baxter_api.perception.optitrack" include nil nil [112 168])
            ("BaxterEnv" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [229 258])
                            ("self" variable nil (reparse-symbol indented_block_body) [267 292])
                            ("self" variable nil (reparse-symbol indented_block_body) [310 364])
                            ("self" variable nil (reparse-symbol indented_block_body) [373 427])
                            ("self" variable nil (reparse-symbol indented_block_body) [437 493])
                            ("self" variable nil (reparse-symbol indented_block_body) [502 558])
                            ("self" variable nil (reparse-symbol indented_block_body) [568 603])
                            ("self" variable nil (reparse-symbol indented_block_body) [612 653])
                            ("self" variable nil (reparse-symbol indented_block_body) [663 690]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [206 210])
                            ("config" variable nil (reparse-symbol function_parameters) [212 218]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [193 691])
                    ("_reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [715 719]))                          )
                        (reparse-symbol indented_block_body) [704 866])
                    ("get_current_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [893 897]))                          )
                        (reparse-symbol indented_block_body) [871 1129])
                    ("_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1152 1156])
                            ("u" variable nil (reparse-symbol function_parameters) [1158 1159]))                          )
                        (reparse-symbol indented_block_body) [1142 1217]))                  
                :type "class")
                nil [170 1217])
            ("if" code nil nil [1246 1363]))          
      :file "baxter_env.py"
      :pointmax 1363
      :fsize 1362
      :lastmodtime '(23044 56941 347447 272000)
      :unmatched-syntax nil)
    (semanticdb-table "config.py"
      :major-mode 'python-mode
      :tags 
        '( ("os" include nil nil [1 10])
            ("numpy" include nil nil [11 29])
            ("get_rewards" include nil nil [30 75])
            ("EXPERIMENT_NAME" variable nil nil [147 171])
            ("file_path" variable nil nil [173 211])
            ("file_dir" variable nil nil [212 234])
            ("experiment_dir" variable nil nil [235 306])
            ("formula_idx" variable nil nil [412 427])
            ("reward_type" variable nil nil [428 452])
            ("spaces, rewards" code nil nil [453 542]))          
      :file "config.py"
      :pointmax 1945
      :fsize 1944
      :lastmodtime '(23044 54246 784056 265000)
      :unmatched-syntax '((NAME 544 . 550) ($EOI 1945 . 1945)))
    (semanticdb-table "get_rewards.py"
      :major-mode 'python-mode
      :tags 
        '( ("os" include nil nil [1 10])
            ("numpy" include nil nil [11 29])
            ("external_libs.rlfps.rewards.TL.automata_guided_reward.fsa_reward" include nil nil [30 116])
            ("external_libs.external_libs.lomap.classes" include nil nil [117 174])
            ("external_libs.rlfps.automata_utils.plot_dynamic_graph" include nil nil [175 260])
            ("baxter_api.env.config" include nil nil [328 385])
            ("baxter_api.env.config" include nil nil [386 432])
            ("table_origin" variable nil nil [505 536])
            ("table_width" variable nil nil [590 608])
            ("table_length" variable nil nil [609 628])
            ("table_thickness" variable nil nil [629 648])
            ("table_planar_ub" variable nil nil [650 731])
            ("table_planar_lb" variable nil nil [732 813])
            ("print" code nil nil [815 856])
            ("red_button_xy" variable nil nil [952 1024])
            ("red_button_r" code nil nil [1025 1098])
            ("blue_button_xy" variable nil nil [1100 1174])
            ("blue_button_r" code nil nil [1175 1250])
            ("shrink" variable nil nil [1253 1265])
            ("red_plate_xy" variable nil nil [1267 1337])
            ("red_plate_width" code nil nil [1338 1420])
            ("red_plate_length" code nil nil [1431 1514])
            ("blue_plate_xy" variable nil nil [1526 1598])
            ("blue_plate_width" code nil nil [1599 1683])
            ("blue_plate_length" code nil nil [1694 1779])
            ("black_plate_xy" variable nil nil [1791 1865])
            ("black_plate_width" code nil nil [1866 1952])
            ("black_plate_length" code nil nil [1963 2049])
            ("hand_in_red" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [2077 2078]))              ) nil [2061 2228])
            ("hand_in_blue" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [2246 2247]))              ) nil [2229 2400])
            ("hand_in_black" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [2419 2420]))              ) nil [2401 2788])
            ("get_robustness" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [2844 2845])
                ("s_type" variable nil (reparse-symbol function_parameters) [2846 2852])
                ("instruction" variable nil (reparse-symbol function_parameters) [2853 2864]))              ) nil [2825 7126])
            ("TL2_robustness_func" function (:arguments 
              ( ("traj" variable nil (reparse-symbol function_parameters) [7179 7183])
                ("formula_idx" variable nil (reparse-symbol function_parameters) [7185 7196]))              ) nil [7155 10558])
            ("heuristic_reward2" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [10589 10590])
                ("hr" variable nil (reparse-symbol function_parameters) [10592 10594])
                ("hb" variable nil (reparse-symbol function_parameters) [10596 10598])
                ("hbl" variable nil (reparse-symbol function_parameters) [10600 10603])
                ("formula_idx" variable nil (reparse-symbol function_parameters) [10605 10616]))              ) nil [10567 13049])
            ("reward_dict" variable nil nil [13057 13943])
            ("'''
s = [(x,y)_hand, (x,y)_red_box]
astate takes 0,1,2,3

formula_idx = 1: phi_1 = (hand_in_red_button -> F red_box_in_red_plate) ^  (!hand_in_red_button -> F red_box_in_black_plate)

formula_idx = 2: phi_1 = (hand_in_red_button -> F red_box_in_red_plate) ^  (!(hand_in_red_button v hand_in_black_plate) -> F red_box_in_black_plate)

formula_idx = 3: phi_2 = (hand_in_blue_button -> F blue_box_in_blue_plate) ^  (!(hand_in_blue_button v hand_in_black_plate) -> F blue_box_in_black_plate)

formula_idx = 4: phi_3 = hand_in_black_plate -> F( red_box_in_blue_plate)

formula_idx = 5: phi_4 = hand_in_black_plate -> F( blue_box_in_red_plate)

formula_idx = 6: phi_5 = phi_2 ^ phi_3

formula_idx = 7: phi_7 = phi_2 ^ phi_3  ^ phi_4 ^ phi_5
    
'''" code nil nil [13946 14689])
            ("spec1" variable nil nil [14691 14733])
            ("spec2" variable nil nil [14734 14785])
            ("spec3" variable nil nil [14786 14837])
            ("spec4" variable nil nil [14838 14862])
            ("spec5" variable nil nil [14863 14887])
            ("spec6" code nil nil [14888 14918])
            ("spec7" code nil nil [14919 14983])
            ("specs" variable nil nil [14985 15036])
            ("get_reward_and_spaces" function (:arguments 
              ( ("formula_idx" variable nil (reparse-symbol function_parameters) [15066 15077])
                ("reward_type" variable nil (reparse-symbol function_parameters) [15079 15090]))              ) nil [15040 17386]))          
      :file "get_rewards.py"
      :pointmax 17386
      :fsize 17385
      :lastmodtime '(23044 54587 529429 844000)
      :unmatched-syntax nil)
    (semanticdb-table "mlp_policy.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("tensorflow" include nil nil [20 43])
            ("os" include nil nil [80 89])
            ("MlpPolicy" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [177 214])
                            ("self" variable nil (reparse-symbol indented_block_body) [223 243])
                            ("self" variable nil (reparse-symbol indented_block_body) [252 283])
                            ("self" variable nil (reparse-symbol indented_block_body) [292 321])
                            ("self" variable nil (reparse-symbol indented_block_body) [330 367])
                            ("self" variable nil (reparse-symbol indented_block_body) [376 411])
                            ("self" variable nil (reparse-symbol indented_block_body) [420 447])
                            ("self" variable nil (reparse-symbol indented_block_body) [456 505])
                            ("self" variable nil (reparse-symbol indented_block_body) [514 563])
                            ("self" variable nil (reparse-symbol indented_block_body) [581 629])
                            ("self" variable nil (reparse-symbol indented_block_body) [638 687])
                            ("self" code nil (reparse-symbol indented_block_body) [696 715])
                            ("if" code nil (reparse-symbol indented_block_body) [724 835])
                            ("if" code nil (reparse-symbol indented_block_body) [844 888]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127 131])
                            ("config" variable nil (reparse-symbol function_parameters) [133 139])
                            ("logger" variable nil (reparse-symbol function_parameters) [141 147])
                            ("deploy" variable nil (reparse-symbol function_parameters) [154 160]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [114 888])
                    ("_save_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [909 913])
                            ("model_name" variable nil (reparse-symbol function_parameters) [915 925]))                          )
                        (reparse-symbol indented_block_body) [893 1023])
                    ("_restore_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1047 1051])
                            ("model_dir" variable nil (reparse-symbol function_parameters) [1053 1062]))                          )
                        (reparse-symbol indented_block_body) [1028 1142])
                    ("_build_graph" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1172 1176]))                          )
                        (reparse-symbol indented_block_body) [1155 1525])
                    ("_placeholders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1560 1564]))                          )
                        (reparse-symbol indented_block_body) [1542 2244])
                    ("_policy_nn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2264 2268]))                          )
                        (reparse-symbol indented_block_body) [2249 4059])
                    ("_logprob" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4078 4082]))                          
                        :documentation " Calculate log probabilities of a batch of observations & actions
        Calculates log probabilities using previous step's model parameters and
        new parameters being trained.
        ")
                        (reparse-symbol indented_block_body) [4065 4773])
                    ("_kl_entropy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4795 4799]))                          
                        :documentation "
        Add to Graph:
        1. KL divergence between old and new distributions
        2. Entropy of present policy given states and actions
        https://en.wikipedia.org/wiki/Multivariate_normal_distribution#Kullback.E2.80.93Leibler_divergence
        https://en.wikipedia.org/wiki/Multivariate_normal_distribution#Entropy
        ")
                        (reparse-symbol indented_block_body) [4779 5780])
                    ("_sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5806 5810]))                          
                        :documentation " Sample from distribution, given observation ")
                        (reparse-symbol indented_block_body) [5794 6041])
                    ("_loss_train_op" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6066 6070]))                          
                        :documentation "
        Three loss terms:
        1) standard policy gradient
        2) D_KL(pi_old || pi_new)
        3) Hinge loss on [D_KL - kl_targ]^2
        See: https://arxiv.org/pdf/1707.02286.pdf
        ")
                        (reparse-symbol indented_block_body) [6047 7229])
                    ("_init_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7253 7257]))                          
                        :documentation "Launch TensorFlow session and initialize variables")
                        (reparse-symbol indented_block_body) [7235 7403])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7428 7432])
                            ("obs" variable nil (reparse-symbol function_parameters) [7434 7437]))                          
                        :documentation "Draw sample from policy distribution")
                        (reparse-symbol indented_block_body) [7417 7599])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7615 7619])
                            ("observes" variable nil (reparse-symbol function_parameters) [7621 7629])
                            ("actions" variable nil (reparse-symbol function_parameters) [7631 7638])
                            ("advantages" variable nil (reparse-symbol function_parameters) [7640 7650])
                            ("itr" variable nil (reparse-symbol function_parameters) [7652 7655]))                          
                        :documentation " Update policy based on observations, actions and advantages
        Args:
        observes: observations, shape = (N, obs_dim)
        actions: actions, shape = (N, act_dim)
        advantages: advantages, shape = (N,)
        logger: Logger object, see utils.py
        ")
                        (reparse-symbol indented_block_body) [7604 10058])
                    ("close_sess" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10086 10090]))                          
                        :documentation " Close TensorFlow session ")
                        (reparse-symbol indented_block_body) [10071 10159]))                  
                :type "class")
                nil [91 10159]))          
      :file "mlp_policy.py"
      :pointmax 10159
      :fsize 10158
      :lastmodtime '(23044 54211 744325 250000)
      :unmatched-syntax nil))
  :file "!home!burobotics!baxter_ws!src!fsa_guided_rl!scripts!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
