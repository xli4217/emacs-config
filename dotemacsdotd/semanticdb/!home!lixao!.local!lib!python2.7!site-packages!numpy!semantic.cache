;; Object numpy/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "numpy/"
  :tables
  (list
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
NumPy
=====

Provides
  1. An array object of arbitrary homogeneous items
  2. Fast mathematical operations over arrays
  3. Linear Algebra, Fourier Transforms, Random Number Generation

How to use the documentation
----------------------------
Documentation is available in two forms: docstrings provided
with the code, and a loose standing reference guide, available from
`the NumPy homepage <http://www.scipy.org>`_.

We recommend exploring the docstrings using
`IPython <http://ipython.scipy.org>`_, an advanced Python shell with
TAB-completion and introspection capabilities.  See below for further
instructions.

The docstring examples assume that `numpy` has been imported as `np`::

  >>> import numpy as np

Code snippets are indicated by three greater-than signs::

  >>> x = 42
  >>> x = x + 1

Use the built-in ``help`` function to view a function's docstring::

  >>> help(np.sort)
  ... # doctest: +SKIP

For some objects, ``np.info(obj)`` may provide additional help.  This is
particularly true if you see the line \"Help on ufunc object:\" at the top
of the help() page.  Ufuncs are implemented in C, not Python, for speed.
The native Python help() does not know how to view their help, but our
np.info() function does.

To search for documents containing a keyword, do::

  >>> np.lookfor('keyword')
  ... # doctest: +SKIP

General-purpose documents like a glossary and help on the basic concepts
of numpy are available under the ``doc`` sub-module::

  >>> from numpy import doc
  >>> help(doc)
  ... # doctest: +SKIP

Available subpackages
---------------------
doc
    Topical documentation on broadcasting, indexing, etc.
lib
    Basic functions used by several sub-packages.
random
    Core Random Tools
linalg
    Core Linear Algebra Tools
fft
    Core FFT routines
polynomial
    Polynomial tools
testing
    NumPy testing tools
f2py
    Fortran to Python Interface Generator.
distutils
    Enhancements to distutils with support for
    Fortran compilers support and more.

Utilities
---------
test
    Run numpy unittests
show_config
    Show numpy build configuration
dual
    Overwrite certain functions with high-performance Scipy tools
matlib
    Make everything matrices.
__version__
    NumPy version string

Viewing documentation using IPython
-----------------------------------
Start IPython with the NumPy profile (``ipython -p numpy``), which will
import `numpy` under the alias `np`.  Then, use the ``cpaste`` command to
paste examples into the shell.  To see which functions are available in
`numpy`, type ``np.<TAB>`` (where ``<TAB>`` refers to the TAB key), or use
``np.*cos*?<ENTER>`` (where ``<ENTER>`` refers to the ENTER key) to narrow
down the list.  To view the docstring for a function, use
``np.cos?<ENTER>`` (to view the docstring) and ``np.cos??<ENTER>`` (to view
the source code).

Copies vs. in-place operation
-----------------------------
Most of the functions in `numpy` return a copy of the array argument
(e.g., `np.sort`).  In-place versions of these functions are often
available as array methods, i.e. ``x = np.array([1,2,3]); x.sort()``.
Exceptions to this rule are documented.

\"\"\"" code nil nil [1 3147])
            ("__future__" include nil nil [3148 3212])
            ("sys" include nil nil [3214 3224])
            ("warnings" include nil nil [3225 3240])
            ("VisibleDeprecationWarning" include nil nil [3257 3315])
            ("ModuleDeprecationWarning" include nil nil [3257 3315])
            ("_NoValue" include nil nil [3331 3346])
            ("try" code nil nil [3464 3535])
            ("if" code nil nil [3536 6252]))          
      :file "__init__.py"
      :pointmax 6252
      :fsize 6251
      :lastmodtime '(23154 21084 533052 0)
      :unmatched-syntax '((FROM 5453 . 5457) (PERIOD 5458 . 5459) (PERIOD 5118 . 5119) (NEWLINE 5108 . 5109) (IMPORT 5100 . 5106) (MULT 5107 . 5108) (FROM 5084 . 5088) (PERIOD 5089 . 5090) (FROM 5048 . 5052) (PERIOD 5053 . 5054) (FROM 5027 . 5031) (PERIOD 5032 . 5033) (FROM 4999 . 5003) (PERIOD 5004 . 5005) (FROM 4974 . 4978) (PERIOD 4979 . 4980) (FROM 4945 . 4949) (PERIOD 4950 . 4951) (FROM 4923 . 4927) (PERIOD 4928 . 4929) (PERIOD 4903 . 4904) (NEWLINE 4893 . 4894) (IMPORT 4885 . 4891) (MULT 4892 . 4893) (FROM 4875 . 4879) (PERIOD 4880 . 4881) (FROM 4853 . 4857) (PERIOD 4858 . 4859) (PERIOD 4833 . 4834) (NEWLINE 4823 . 4824) (IMPORT 4815 . 4821) (MULT 4822 . 4823) (FROM 4804 . 4808) (PERIOD 4809 . 4810) (FROM 4781 . 4785) (PERIOD 4786 . 4787) (FROM 4744 . 4748) (PERIOD 4749 . 4750) (FROM 4581 . 4585) (PERIOD 4586 . 4587) (FROM 4237 . 4241) (PERIOD 4242 . 4243) (FROM 4063 . 4067) (PERIOD 4068 . 4069) (FROM 4014 . 4018) (PERIOD 4019 . 4020) (FROM 3956 . 3960) (PERIOD 3961 . 3962) (FROM 3316 . 3320) (PERIOD 3321 . 3322) (FROM 3242 . 3246) (PERIOD 3247 . 3248))))
  :file "!home!lixao!.local!lib!python2.7!site-packages!numpy!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
