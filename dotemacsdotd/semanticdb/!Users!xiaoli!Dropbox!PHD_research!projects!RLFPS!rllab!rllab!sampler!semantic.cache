;; Object sampler/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "sampler/"
  :tables
  (list
    (semanticdb-table "parallel_sampler.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.sampler.utils" include nil nil [1 40])
            ("rllab.sampler.stateful_pool" include nil nil [41 109])
            ("rllab.misc" include nil nil [110 136])
            ("rllab.misc" include nil nil [137 166])
            ("rllab.misc" include nil nil [167 202])
            ("pickle" include nil nil [203 216])
            ("numpy" include nil nil [217 235])
            ("_worker_init" function (:arguments 
              ( ("G" variable nil (reparse-symbol function_parameters) [255 256])
                ("id" variable nil (reparse-symbol function_parameters) [258 260]))              ) nil [238 438])
            ("initialize" function (:arguments 
              ( ("n_parallel" variable nil (reparse-symbol function_parameters) [455 465]))              ) nil [440 604])
            ("_get_scoped_G" function (:arguments 
              ( ("G" variable nil (reparse-symbol function_parameters) [624 625])
                ("scope" variable nil (reparse-symbol function_parameters) [627 632]))              ) nil [606 879])
            ("_worker_populate_task" function (:arguments 
              ( ("G" variable nil (reparse-symbol function_parameters) [907 908])
                ("env" variable nil (reparse-symbol function_parameters) [910 913])
                ("policy" variable nil (reparse-symbol function_parameters) [915 921])
                ("scope" variable nil (reparse-symbol function_parameters) [923 928]))              ) nil [881 1034])
            ("_worker_terminate_task" function (:arguments 
              ( ("G" variable nil (reparse-symbol function_parameters) [1063 1064])
                ("scope" variable nil (reparse-symbol function_parameters) [1066 1071]))              ) nil [1036 1278])
            ("populate_task" function (:arguments 
              ( ("env" variable nil (reparse-symbol function_parameters) [1298 1301])
                ("policy" variable nil (reparse-symbol function_parameters) [1303 1309])
                ("scope" variable nil (reparse-symbol function_parameters) [1311 1316]))              ) nil [1280 1742])
            ("terminate_task" function (:arguments 
              ( ("scope" variable nil (reparse-symbol function_parameters) [1763 1768]))              ) nil [1744 1890])
            ("_worker_set_seed" function (:arguments 
              ( ("_" variable nil (reparse-symbol function_parameters) [1913 1914])
                ("seed" variable nil (reparse-symbol function_parameters) [1916 1920]))              ) nil [1892 1990])
            ("set_seed" function (:arguments 
              ( ("seed" variable nil (reparse-symbol function_parameters) [2005 2009]))              ) nil [1992 2137])
            ("_worker_set_policy_params" function (:arguments 
              ( ("G" variable nil (reparse-symbol function_parameters) [2169 2170])
                ("params" variable nil (reparse-symbol function_parameters) [2172 2178])
                ("scope" variable nil (reparse-symbol function_parameters) [2180 2185]))              ) nil [2139 2263])
            ("_worker_set_env_params" function (:arguments 
              ( ("G" variable nil (reparse-symbol function_parameters) [2291 2292])
                ("params" variable nil (reparse-symbol function_parameters) [2293 2299])
                ("scope" variable nil (reparse-symbol function_parameters) [2300 2305]))              ) nil [2264 2380])
            ("_worker_collect_one_path" function (:arguments 
              ( ("G" variable nil (reparse-symbol function_parameters) [2410 2411])
                ("max_path_length" variable nil (reparse-symbol function_parameters) [2413 2428])
                ("scope" variable nil (reparse-symbol function_parameters) [2430 2435]))              ) nil [2381 2566])
            ("sample_paths" function
               (:documentation "
    :param policy_params: parameters for the policy. This will be updated on each worker process
    :param max_samples: desired maximum number of samples to be collected. The actual number of collected samples
    might be greater since all trajectories will be rolled out either until termination or until max_path_length is
    reached
    :param max_path_length: horizon / maximum length of a single trajectory
    :return: a list of collected paths
    "
                :arguments 
                  ( ("policy_params" variable nil (reparse-symbol function_parameters) [2594 2607])
                    ("max_samples" variable nil (reparse-symbol function_parameters) [2617 2628])
                    ("max_path_length" variable nil (reparse-symbol function_parameters) [2638 2653])
                    ("env_params" variable nil (reparse-symbol function_parameters) [2670 2680])
                    ("scope" variable nil (reparse-symbol function_parameters) [2695 2700]))                  )
                nil [2568 3657])
            ("truncate_paths" function
               (:documentation "
    Truncate the list of paths so that the total number of samples is exactly equal to max_samples. This is done by
    removing extra paths at the end of the list, and make the last path shorter if necessary
    :param paths: a list of paths
    :param max_samples: the absolute maximum number of samples
    :return: a list of paths, truncated so that the number of samples adds up to max-samples
    "
                :arguments 
                  ( ("paths" variable nil (reparse-symbol function_parameters) [3678 3683])
                    ("max_samples" variable nil (reparse-symbol function_parameters) [3685 3696]))                  )
                nil [3659 5046]))          
      :file "parallel_sampler.py"
      :pointmax 5046
      :fsize 5045
      :lastmodtime '(22802 4714 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "utils.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("rllab.misc" include nil nil [20 55])
            ("time" include nil nil [56 67])
            ("rollout" function (:arguments 
              ( ("env" variable nil (reparse-symbol function_parameters) [82 85])
                ("agent" variable nil (reparse-symbol function_parameters) [87 92])
                ("max_path_length" variable nil (reparse-symbol function_parameters) [94 109])
                ("animated" variable nil (reparse-symbol function_parameters) [118 126])
                ("speedup" variable nil (reparse-symbol function_parameters) [134 141])
                ("always_return_paths" variable nil (reparse-symbol function_parameters) [157 176]))              ) nil [70 1315]))          
      :file "utils.py"
      :pointmax 1315
      :fsize 1314
      :lastmodtime '(22806 2994 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "stateful_pool.py"
      :major-mode 'python-mode
      :tags 
        '( ("joblib.pool" include nil nil [1 38])
            ("multiprocessing" include nil nil [39 67])
            ("rllab.misc" include nil nil [68 97])
            ("pyprind" include nil nil [98 112])
            ("time" include nil nil [113 124])
            ("traceback" include nil nil [125 141])
            ("sys" include nil nil [142 152])
            ("ProgBarCounter" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [232 262])
                            ("self" variable nil (reparse-symbol indented_block_body) [271 298])
                            ("self" variable nil (reparse-symbol indented_block_body) [307 328])
                            ("self" variable nil (reparse-symbol indented_block_body) [337 355])
                            ("if" code nil (reparse-symbol indented_block_body) [364 504]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [202 206])
                            ("total_count" variable nil (reparse-symbol function_parameters) [208 219]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [189 502])
                    ("inc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [515 519])
                            ("increment" variable nil (reparse-symbol function_parameters) [521 530]))                          )
                        (reparse-symbol indented_block_body) [507 861])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [875 879]))                          )
                        (reparse-symbol indented_block_body) [866 966]))                  
                :type "class")
                nil [155 966])
            ("SharedGlobal" type
               (:superclasses ("object")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1000 1004]))                  
                :type "class")
                nil [968 1005])
            ("StatefulPool" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1069 1088])
                            ("self" variable nil (reparse-symbol indented_block_body) [1097 1113])
                            ("self" variable nil (reparse-symbol indented_block_body) [1122 1139])
                            ("self" variable nil (reparse-symbol indented_block_body) [1148 1172])
                            ("self" variable nil (reparse-symbol indented_block_body) [1181 1204]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1052 1056]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1039 1203])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1223 1227])
                            ("n_parallel" variable nil (reparse-symbol function_parameters) [1229 1239]))                          )
                        (reparse-symbol indented_block_body) [1208 1736])
                    ("run_each" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1754 1758])
                            ("runner" variable nil (reparse-symbol function_parameters) [1760 1766])
                            ("args_list" variable nil (reparse-symbol function_parameters) [1768 1777]))                          
                        :documentation "
        Run the method on each worker process, and collect the result of execution.
        The runner method will receive 'G' as its first argument, followed by the arguments
        in the args_list, if any
        :return:
        ")
                        (reparse-symbol indented_block_body) [1741 2809])
                    ("run_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2826 2830])
                            ("runner" variable nil (reparse-symbol function_parameters) [2832 2838])
                            ("args_list" variable nil (reparse-symbol function_parameters) [2840 2849]))                          )
                        (reparse-symbol indented_block_body) [2814 3117])
                    ("run_imap_unordered" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3145 3149])
                            ("runner" variable nil (reparse-symbol function_parameters) [3151 3157])
                            ("args_list" variable nil (reparse-symbol function_parameters) [3159 3168]))                          )
                        (reparse-symbol indented_block_body) [3122 3424])
                    ("run_collect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3445 3449])
                            ("collect_once" variable nil (reparse-symbol function_parameters) [3451 3463])
                            ("threshold" variable nil (reparse-symbol function_parameters) [3465 3474])
                            ("args" variable nil (reparse-symbol function_parameters) [3476 3480])
                            ("show_prog_bar" variable nil (reparse-symbol function_parameters) [3487 3500]))                          
                        :documentation "
        Run the collector method using the worker pool. The collect_once method will receive 'G' as
        its first argument, followed by the provided args, if any. The method should return a pair of values.
        The first should be the object to be collected, and the second is the increment to be added.
        This will continue until the total increment reaches or exceeds the given threshold.

        Sample script:

        def collect_once(G):
            return 'a', 1

        stateful_pool.run_collect(collect_once, threshold=3) # => ['a', 'a', 'a']

        :param collector:
        :param threshold:
        :return:
        ")
                        (reparse-symbol indented_block_body) [3429 5530]))                  
                :type "class")
                nil [1007 5530])
            ("singleton_pool" variable nil nil [5532 5563])
            ("_worker_run_each" function (:arguments 
              ( ("all_args" variable nil (reparse-symbol function_parameters) [5587 5595]))              ) nil [5566 5985])
            ("_worker_run_collect" function (:arguments 
              ( ("all_args" variable nil (reparse-symbol function_parameters) [6011 6019]))              ) nil [5987 6590])
            ("_worker_run_map" function (:arguments 
              ( ("all_args" variable nil (reparse-symbol function_parameters) [6612 6620]))              ) nil [6592 6811]))          
      :file "stateful_pool.py"
      :pointmax 6811
      :fsize 6810
      :lastmodtime '(22840 32617 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags nil
      :file "__init__.py"
      :pointmax 1
      :fsize 0
      :lastmodtime '(22749 16759 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "base.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [3 21])
            ("rllab.misc" include nil nil [22 52])
            ("rllab.misc" include nil nil [53 88])
            ("rllab.algos" include nil nil [89 117])
            ("rllab.misc.logger" include nil nil [118 152])
            ("Sampler" type
               (:superclasses ("object")
                :members 
                  ( ("start_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [199 203]))                          
                        :documentation "
        Initialize the sampler, e.g. launching parallel workers if necessary.
        ")
                        (reparse-symbol indented_block_body) [182 342])
                    ("obtain_samples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [366 370])
                            ("itr" variable nil (reparse-symbol function_parameters) [372 375]))                          
                        :documentation "
        Collect samples for the given iteration number.
        :param itr: Iteration number.
        :return: A list of paths.
        ")
                        (reparse-symbol indented_block_body) [347 564])
                    ("process_samples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [589 593])
                            ("itr" variable nil (reparse-symbol function_parameters) [595 598])
                            ("paths" variable nil (reparse-symbol function_parameters) [600 605]))                          
                        :documentation "
        Return processed sample data (typically a dictionary of concatenated tensors) based on the collected paths.
        :param itr: Iteration number.
        :param paths: A list of collected paths.
        :return: Processed sample data.
        ")
                        (reparse-symbol indented_block_body) [569 909])
                    ("shutdown_worker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [934 938]))                          
                        :documentation "
        Terminate workers if necessary.
        ")
                        (reparse-symbol indented_block_body) [914 1039]))                  
                :type "class")
                nil [155 1039])
            ("BaseSampler" type
               (:superclasses ("Sampler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :type algo: BatchPolopt
        \"\"\"" code nil (reparse-symbol indented_block_body) [1107 1154])
                            ("self" variable nil (reparse-symbol indented_block_body) [1163 1179]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1086 1090])
                            ("algo" variable nil (reparse-symbol function_parameters) [1092 1096]))                          
                        :documentation "
        :type algo: BatchPolopt
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1073 1180])
                    ("process_samples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1205 1209])
                            ("itr" variable nil (reparse-symbol function_parameters) [1211 1214])
                            ("paths" variable nil (reparse-symbol function_parameters) [1216 1221]))                          )
                        (reparse-symbol indented_block_body) [1185 7079]))                  
                :type "class")
                nil [1041 7079]))          
      :file "base.py"
      :pointmax 7079
      :fsize 7078
      :lastmodtime '(22829 63618 0 0)
      :unmatched-syntax nil))
  :file "!Users!xiaoli!Dropbox!PHD_research!projects!RLFPS!rllab!rllab!sampler!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
