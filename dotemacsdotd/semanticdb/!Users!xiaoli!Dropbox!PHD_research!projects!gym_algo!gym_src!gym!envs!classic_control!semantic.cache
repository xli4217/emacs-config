;; Object classic_control/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "classic_control/"
  :tables
  (list
    (semanticdb-table "acrobot.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"classic Acrobot task\"\"\"" code nil nil [1 27])
            ("gym" include nil nil [28 56])
            ("gym.utils" include nil nil [57 86])
            ("numpy" include nil nil [87 105])
            ("time" include nil nil [106 117])
            ("__copyright__" variable nil nil [119 181])
            ("__credits__" variable nil nil [182 306])
            ("__license__" variable nil nil [307 335])
            ("__author__" variable nil nil [336 382])
            ("AcrobotEnv" type
               (:documentation "
    Acrobot is a 2-link pendulum with only the second joint actuated
    Intitially, both links point downwards. The goal is to swing the
    end-effector at a height at least the length of one link above the base.
    Both links can swing freely and can pass by each other, i.e., they don't
    collide when they have the same angle.
    **STATE:**
    The state consists of the two rotational joint angles and their velocities
    [theta1 theta2 thetaDot1 thetaDot2]. An angle of 0 corresponds to corresponds
    to the respective link pointing downwards (angles are in world coordinates).
    **ACTIONS:**
    The action is either applying +1, 0 or -1 torque on the joint between
    the two pendulum links.
    .. note::
        The dynamics equations were missing some terms in the NIPS paper which
        are present in the book. R. Sutton confirmed in personal correspondance
        that the experimental results shown in the paper and the book were
        generated with the equations shown in the book.
        However, there is the option to run the domain with the paper equations
        by setting book_or_nips = 'nips'
    **REFERENCE:**
    .. seealso::
        R. Sutton: Generalization in Reinforcement Learning:
        Successful Examples Using Sparse Coarse Coding (NIPS 1996)
    .. seealso::
        R. Sutton and A. G. Barto:
        Reinforcement learning: An introduction.
        Cambridge: MIT press, 1998.
    .. warning::
        This version of the domain uses the Runge-Kutta method for integrating
        the system dynamics and is more realistic, but also considerably harder
        than the original version which employs Euler integration,
        see the AcrobotLegacy class.
    "
                :superclasses ("core.Env")
                :members 
                  ( ("metadata" variable nil (reparse-symbol indented_block_body) [2229 2334])
                    ("dt" variable nil (reparse-symbol indented_block_body) [2340 2347])
                    ("LINK_LENGTH_1" variable nil (reparse-symbol indented_block_body) [2353 2371])
                    ("LINK_LENGTH_2" variable nil (reparse-symbol indented_block_body) [2383 2401])
                    ("LINK_MASS_1" variable nil (reparse-symbol indented_block_body) [2413 2429])
                    ("LINK_MASS_2" variable nil (reparse-symbol indented_block_body) [2458 2474])
                    ("LINK_COM_POS_1" variable nil (reparse-symbol indented_block_body) [2503 2523])
                    ("LINK_COM_POS_2" variable nil (reparse-symbol indented_block_body) [2577 2597])
                    ("LINK_MOI" variable nil (reparse-symbol indented_block_body) [2651 2664])
                    ("MAX_VEL_1" code nil (reparse-symbol indented_block_body) [2708 2729])
                    ("MAX_VEL_2" code nil (reparse-symbol indented_block_body) [2734 2755])
                    ("AVAIL_TORQUE" variable nil (reparse-symbol indented_block_body) [2761 2789])
                    ("torque_noise_max" variable nil (reparse-symbol indented_block_body) [2795 2816])
                    ("book_or_nips" variable nil (reparse-symbol indented_block_body) [2884 2905])
                    ("action_arrow" variable nil (reparse-symbol indented_block_body) [2910 2929])
                    ("domain_fig" variable nil (reparse-symbol indented_block_body) [2934 2951])
                    ("actions_num" variable nil (reparse-symbol indented_block_body) [2956 2971])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3005 3023])
                            ("high" variable nil (reparse-symbol indented_block_body) [3032 3095])
                            ("low" code nil (reparse-symbol indented_block_body) [3104 3115])
                            ("self" variable nil (reparse-symbol indented_block_body) [3124 3170])
                            ("self" variable nil (reparse-symbol indented_block_body) [3179 3217])
                            ("self" code nil (reparse-symbol indented_block_body) [3226 3238]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2990 2994]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2977 3239])
                    ("_seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3254 3258])
                            ("seed" variable nil (reparse-symbol function_parameters) [3260 3264]))                          )
                        (reparse-symbol indented_block_body) [3244 3349])
                    ("_reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3365 3369]))                          )
                        (reparse-symbol indented_block_body) [3354 3473])
                    ("_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3488 3492])
                            ("a" variable nil (reparse-symbol function_parameters) [3494 3495]))                          )
                        (reparse-symbol indented_block_body) [3478 4684])
                    ("_terminal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4703 4707]))                          )
                        (reparse-symbol indented_block_body) [4689 4795])
                    ("_dsdt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4810 4814])
                            ("s_augmented" variable nil (reparse-symbol function_parameters) [4816 4827])
                            ("t" variable nil (reparse-symbol function_parameters) [4829 4830]))                          )
                        (reparse-symbol indented_block_body) [4800 6285])
                    ("_render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6302 6306])
                            ("mode" variable nil (reparse-symbol function_parameters) [6308 6312])
                            ("close" variable nil (reparse-symbol function_parameters) [6322 6327]))                          )
                        (reparse-symbol indented_block_body) [6290 7664]))                  
                :type "class")
                nil [462 7664])
            ("wrap" function
               (:documentation "
    :param x: a scalar
    :param m: minimum possible value in range
    :param M: maximum possible value in range
    Wraps ``x`` so m <= x <= M; but unlike ``bound()`` which
    truncates, ``wrap()`` wraps x around the coordinate system defined by m,M.\\n
    For example, m = -180, M = 180 (degrees), x = 360 --> returns 0.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7674 7675])
                    ("m" variable nil (reparse-symbol function_parameters) [7677 7678])
                    ("M" variable nil (reparse-symbol function_parameters) [7680 7681]))                  )
                nil [7665 8132])
            ("bound" function
               (:documentation "
    :param x: scalar
    Either have m as scalar, so bound(x,m,M) which returns m <= x <= M *OR*
    have m as length 2 vector, bound(x,m, <IGNORED>) returns m[0] <= x <= m[1].
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8143 8144])
                    ("m" variable nil (reparse-symbol function_parameters) [8146 8147])
                    ("M" variable nil (reparse-symbol function_parameters) [8149 8150]))                  )
                nil [8133 8474])
            ("rk4" function
               (:documentation "
    Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta.
    This is a toy implementation which may be useful if you find
    yourself stranded on a system w/o scipy.  Otherwise use
    :func:`scipy.integrate`.
    *y0*
        initial state vector
    *t*
        sample times
    *derivs*
        returns the derivative of the system and has the
        signature ``dy = derivs(yi, ti)``
    *args*
        additional arguments passed to the derivative function
    *kwargs*
        additional keyword arguments passed to the derivative function
    Example 1 ::
        ## 2D system
        def derivs6(x,t):
            d1 =  x[0] + 2*x[1]
            d2 =  -3*x[0] + 4*x[1]
            return (d1, d2)
        dt = 0.0005
        t = arange(0.0, 2.0, dt)
        y0 = (1,2)
        yout = rk4(derivs6, y0, t)
    Example 2::
        ## 1D system
        alpha = 2
        def derivs(x,t):
            return -alpha*x + exp(-t)
        y0 = 1
        yout = rk4(derivs, y0, t)
    If you have access to scipy, you should probably be using the
    scipy.integrate tools rather than this function.
    "
                :arguments 
                  ( ("derivs" variable nil (reparse-symbol function_parameters) [8484 8490])
                    ("y0" variable nil (reparse-symbol function_parameters) [8492 8494])
                    ("t" variable nil (reparse-symbol function_parameters) [8496 8497])
                    ("args" variable nil (reparse-symbol function_parameters) [8499 8504])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [8506 8514]))                  )
                nil [8476 10335]))          
      :file "acrobot.py"
      :pointmax 10335
      :fsize 10334
      :lastmodtime '(22352 36054 0 0)
      :unmatched-syntax '((NAME 4587 . 4593) (IF 4600 . 4602) (ELSE 4616 . 4620))))
  :file "!Users!xiaoli!Dropbox!PHD_research!projects!gym_algo!gym_src!gym!envs!classic_control!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
