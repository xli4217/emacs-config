;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("os" include nil nil [1 10])
            ("collections" include nil nil [11 42])
            ("pathlib" include nil nil [43 67])
            ("typing" include nil nil [68 108])
            ("numpy" include nil nil [110 128])
            ("tqdm" include nil nil [129 150])
            ("get_tl_faces_slice_from_frames" include nil nil [165 262])
            ("get_frames_slice_from_scenes" include nil nil [165 262])
            ("get_agents_slice_from_frames" include nil nil [165 262])
            ("ChunkedDataset" include nil nil [282 303])
            ("GIGABYTE" code nil nil [305 338]))          
      :file "zarr_utils.py"
      :pointmax 11501
      :fsize 11500
      :lastmodtime '(24391 29138 352434 490000)
      :unmatched-syntax '((INDENT_BLOCK 9215 . 11501) (COLON 9213 . 9214) (MINUS 9206 . 9207) (GT 9207 . 9208) (NAME 9181 . 9199) (COLON 9199 . 9200) (NAME 9163 . 9174) (COLON 9174 . 9175) (NAME 9146 . 9156) (COLON 9156 . 9157) (INDENT_BLOCK 7056 . 9123) (COLON 7054 . 7055) (MINUS 7030 . 7031) (GT 7031 . 7032) (BRACK_BLOCK 7022 . 7028) (NAME 7005 . 7016) (COLON 7016 . 7017) (NAME 6987 . 6998) (COLON 6998 . 6999) (NAME 6970 . 6980) (COLON 6980 . 6981) (INDENT_BLOCK 5213 . 6953) (COLON 5211 . 5212) (MINUS 5204 . 5205) (GT 5205 . 5206) (COLON 5197 . 5198) (COMMA 5184 . 5185) (BRACK_BLOCK 5179 . 5184) (NAME 5162 . 5173) (COLON 5173 . 5174) (INDENT_BLOCK 2189 . 5144) (COLON 2187 . 2188) (MINUS 2180 . 2181) (GT 2181 . 2182) (ASSIGN 2170 . 2171) (BRACK_BLOCK 2163 . 2169) (NAME 2134 . 2153) (COLON 2153 . 2154) (NAME 2108 . 2123) (COLON 2123 . 2124) (NAME 2080 . 2097) (COLON 2097 . 2098) (NAME 2047 . 2058) (COLON 2058 . 2059) (NAME 2015 . 2025) (COLON 2025 . 2026) (INDENT_BLOCK 839 . 1984) (COLON 837 . 838) (MINUS 830 . 831) (GT 831 . 832) (NAME 808 . 823) (COLON 823 . 824) (NAME 784 . 801) (COLON 801 . 802) (NAME 754 . 766) (COLON 766 . 767) (INDENT_BLOCK 383 . 720) (COLON 381 . 382) (DEF 341 . 344) (MINUS 375 . 376) (GT 376 . 377) (NAME 364 . 368) (COLON 368 . 369) (FROM 263 . 267) (PERIOD 268 . 269) (FROM 152 . 156) (PERIOD 157 . 158)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("os" include nil nil [1 10])
            ("abc" include nil nil [11 46])
            ("pathlib" include nil nil [47 71])
            ("typing" include nil nil [72 106])
            ("L5KIT_DATA_FOLDER_ENV_KEY" variable nil nil [108 155])
            ("DataManager" type
               (:superclasses ("ABC")
                :type "class")
                nil [158 255])
            ("LocalDataManager" type
               (:documentation "LocalDataManager allows you to require data to be present in the subpath of a specific folder.

    Example:
    Your data folder is set to ``\"/tmp/my-data-folder\"``, and you
    call ``local_data_manager.require(\"path/to/image.jpg\")``, it would check if
    ``\"/tmp/my-data-folder/path/to/image.jpg\"`` exists, and if so return that complete path
    (``\"/tmp/my-data-folder/path/to/image.jpg\"``), otherwise it raises an error.

    In order of precedence, the local data folder is set by
      1. Passing in the path to the constructor of ``LocalDataManager``
      2. Setting the ``L5KIT_DATA_FOLDER`` environment variable.
    "
                :superclasses ("DataManager")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1022 1438])
                            ("self" variable nil (reparse-symbol indented_block_body) [1447 1489]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [953 957])
                            ("None" variable nil (reparse-symbol function_parameters) [1007 1011]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [940 1490]))                  
                :type "class")
                nil [257 2244]))          
      :file "local_data_manager.py"
      :pointmax 2244
      :fsize 2243
      :lastmodtime '(24391 29138 352434 490000)
      :unmatched-syntax '((INDENT_BLOCK 1531 . 2244) (NEWLINE 1530 . 1531) (COLON 1529 . 1530) (DEF 1495 . 1498) (MINUS 1523 . 1524) (GT 1524 . 1525) (NAME 1513 . 1516) (COLON 1516 . 1517) (ASSIGN 1005 . 1006) (BRACK_BLOCK 986 . 1004) (NAME 959 . 976) (COLON 976 . 977) (INDENT_BLOCK 242 . 255) (NEWLINE 241 . 242) (COLON 240 . 241) (AT 186 . 187) (MINUS 234 . 235) (GT 235 . 236) (NAME 224 . 227) (COLON 227 . 228)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("functools" include nil nil [1 32])
            ("typing" include nil nil [33 92])
            ("numpy" include nil nil [94 112])
            ("pymap3d" include nil nil [113 133])
            ("transform_points" include nil nil [151 174])
            ("MapFragment" include nil nil [204 254])
            ("MapElement" include nil nil [204 254])
            ("GlobalId" include nil nil [204 254])
            ("GeoFrame" include nil nil [204 254])
            ("CACHE_SIZE" variable nil nil [256 277])
            ("ENCODING" variable nil nil [278 296])
            ("MapAPI" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Interface to the raw protobuf map file with the following features:
        - access to element using ID is O(1);
        - access to coordinates in world ref system for a set of elements is O(1) after first access (lru cache)
        - object support iteration using __getitem__ protocol

        Args:
            protobuf_map_path (str): path to the protobuf file
            world_to_ecef (np.ndarray): transformation matrix from world coordinates to ECEF (dataset dependent)
        \"\"\"" code nil (reparse-symbol indented_block_body) [396 899])
                            ("self" variable nil (reparse-symbol indented_block_body) [908 950])
                            ("self" variable nil (reparse-symbol indented_block_body) [959 1008])
                            ("with" code nil (reparse-symbol indented_block_body) [1018 1141])
                            ("self" variable nil (reparse-symbol indented_block_body) [1150 1177])
                            ("self" variable nil (reparse-symbol indented_block_body) [1186 1271]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [330 334])
                            ("str" variable nil (reparse-symbol function_parameters) [355 358])
                            ("ndarray" variable nil (reparse-symbol function_parameters) [378 385]))                          
                        :documentation "
        Interface to the raw protobuf map file with the following features:
        - access to element using ID is O(1);
        - access to coordinates in world ref system for a set of elements is O(1) after first access (lru cache)
        - object support iteration using __getitem__ protocol

        Args:
            protobuf_map_path (str): path to the protobuf file
            world_to_ecef (np.ndarray): transformation matrix from world coordinates to ECEF (dataset dependent)
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [317 1297])
                    ("" code nil (reparse-symbol indented_block_body) [3627 3647])
                    ("" code nil (reparse-symbol indented_block_body) [5288 5308]))                  
                :type "class")
                nil [299 7702]))          
      :file "map_api.py"
      :pointmax 7702
      :fsize 7701
      :lastmodtime '(24391 29138 352434 490000)
      :unmatched-syntax '((INDENT_BLOCK 7641 . 7702) (NEWLINE 7640 . 7641) (COLON 7639 . 7640) (MINUS 7628 . 7629) (GT 7629 . 7630) (INDENT_BLOCK 7570 . 7604) (NEWLINE 7569 . 7570) (COLON 7568 . 7569) (MINUS 7562 . 7563) (GT 7563 . 7564) (INDENT_BLOCK 7165 . 7539) (NEWLINE 7164 . 7165) (COLON 7163 . 7164) (MINUS 7150 . 7151) (GT 7151 . 7152) (BRACK_BLOCK 7131 . 7148) (NAME 7120 . 7124) (COLON 7124 . 7125) (INDENT_BLOCK 6146 . 7074) (NEWLINE 6145 . 6146) (COLON 6144 . 6145) (MINUS 6137 . 6138) (GT 6138 . 6139) (NAME 6124 . 6130) (COLON 6130 . 6131) (NAME 6107 . 6117) (COLON 6117 . 6118) (INDENT_BLOCK 5370 . 6069) (NEWLINE 5369 . 5370) (COLON 5368 . 5369) (DEF 5313 . 5316) (MINUS 5361 . 5362) (GT 5362 . 5363) (NAME 5344 . 5354) (COLON 5354 . 5355) (INDENT_BLOCK 4785 . 5273) (NEWLINE 4784 . 4785) (COLON 4783 . 4784) (MINUS 4776 . 4777) (GT 4777 . 4778) (NAME 4755 . 4762) (COLON 4762 . 4763) (INDENT_BLOCK 3704 . 4696) (NEWLINE 3703 . 3704) (COLON 3702 . 3703) (DEF 3652 . 3655) (MINUS 3695 . 3696) (GT 3696 . 3697) (NAME 3678 . 3688) (COLON 3688 . 3689) (INDENT_BLOCK 3348 . 3612) (NEWLINE 3347 . 3348) (COLON 3346 . 3347) (MINUS 3339 . 3340) (GT 3340 . 3341) (NAME 3318 . 3325) (COLON 3325 . 3326) (INDENT_BLOCK 2220 . 3264) (NEWLINE 2219 . 2220) (COLON 2218 . 2219) (MINUS 2205 . 2206) (GT 2206 . 2207) (COLON 2193 . 2194) (COMMA 2186 . 2187) (BRACK_BLOCK 2181 . 2186) (COLON 2171 . 2172) (COMMA 2167 . 2168) (BRACK_BLOCK 2162 . 2167) (COLON 2152 . 2153) (COMMA 2148 . 2149) (BRACK_BLOCK 2143 . 2148) (NAME 2131 . 2133) (COLON 2133 . 2134) (INDENT_BLOCK 1767 . 2080) (NEWLINE 1766 . 1767) (COLON 1765 . 1766) (MINUS 1757 . 1758) (GT 1758 . 1759) (NAME 1743 . 1748) (COLON 1748 . 1749) (INDENT_BLOCK 1383 . 1707) (NEWLINE 1382 . 1383) (COLON 1381 . 1382) (AT 1302 . 1303) (MINUS 1375 . 1376) (GT 1376 . 1377) (NAME 1353 . 1363) (COLON 1363 . 1364) (PERIOD 377 . 378) (NAME 360 . 373) (COLON 373 . 374) (NAME 336 . 353) (COLON 353 . 354) (FROM 175 . 179) (PERIOD 180 . 181) (PERIOD 141 . 142) (FROM 135 . 139) (PERIOD 140 . 141))))
  :file "!home!xli4217!Xiao!postdoc!TRI!prediction!datasets!LyftL5!l5kit!l5kit!l5kit!data!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
