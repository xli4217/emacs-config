;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("gym" include nil nil [1 11])
            ("gym" include nil nil [12 33])
            ("gym.utils" include nil nil [34 62])
            ("env_closer" variable nil nil [64 92])
            ("Env" type
               (:superclasses ("object")
                :members 
                  ( ("r\"\"\"The main OpenAI Gym class. It encapsulates an environment with
    arbitrary behind-the-scenes dynamics. An environment can be
    partially or fully observed.

    The main API methods that users of this class need to know are:

        step
        reset
        render
        close
        seed

    And set the following attributes:

        action_space: The Space object corresponding to valid actions
        observation_space: The Space object corresponding to valid observations
        reward_range: A tuple corresponding to the min and max possible rewards

    Note: a default reward range set to [-inf,+inf] already exists. Set it if you want a narrower range.

    The methods are accessed publicly as \"step\", \"reset\", etc.. The
    non-underscored versions are wrapper methods to which we may add
    functionality over time.
    \"\"\"" code nil (reparse-symbol indented_block_body) [118 971])
                    ("metadata" variable nil (reparse-symbol indented_block_body) [1010 1041])
                    ("reward_range" variable nil (reparse-symbol indented_block_body) [1046 1090])
                    ("spec" variable nil (reparse-symbol indented_block_body) [1095 1106])
                    ("action_space" variable nil (reparse-symbol indented_block_body) [1146 1165])
                    ("observation_space" variable nil (reparse-symbol indented_block_body) [1170 1194])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1209 1213])
                            ("action" variable nil (reparse-symbol function_parameters) [1215 1221]))                          
                        :documentation "Run one timestep of the environment's dynamics. When end of
        episode is reached, you are responsible for calling `reset()`
        to reset this environment's state.

        Accepts an action and returns a tuple (observation, reward, done, info).

        Args:
            action (object): an action provided by the agent

        Returns:
            observation (object): agent's observation of the current environment
            reward (float) : amount of reward returned after previous action
            done (bool): whether the episode has ended, in which case further step() calls will return undefined results
            info (dict): contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)
        ")
                        (reparse-symbol indented_block_body) [1200 2024])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2039 2043]))                          
                        :documentation "Resets the state of the environment and returns an initial observation.

        Returns:
            observation (object): the initial observation.
        ")
                        (reparse-symbol indented_block_body) [2029 2252])
                    ("render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2268 2272])
                            ("mode" variable nil (reparse-symbol function_parameters) [2274 2278]))                          
                        :documentation "Renders the environment.

        The set of supported modes varies per environment. (And some
        environments do not support rendering at all.) By convention,
        if mode is:

        - human: render to the current display or terminal and
          return nothing. Usually for human consumption.
        - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
          representing RGB values for an x-by-y pixel image, suitable
          for turning into a video.
        - ansi: Return a string (str) or StringIO.StringIO containing a
          terminal-style text representation. The text can include newlines
          and ANSI escape sequences (e.g. for colors).

        Note:
            Make sure that your class's metadata 'render.modes' key includes
              the list of supported modes. It's recommended to call super()
              in implementations to use the functionality of this method.

        Args:
            mode (str): the mode to render with

        Example:

        class MyEnv(Env):
            metadata = {'render.modes': ['human', 'rgb_array']}

            def render(self, mode='human'):
                if mode == 'rgb_array':
                    return np.array(...) # return RGB frame suitable for video
                elif mode == 'human':
                    ... # pop up a window and render
                else:
                    super(MyEnv, self).render(mode=mode) # just raise an exception
        ")
                        (reparse-symbol indented_block_body) [2257 3802])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3817 3821]))                          
                        :documentation "Override close in your subclass to perform any necessary cleanup.

        Environments will automatically close() themselves when
        garbage collected or when the program exits.
        ")
                        (reparse-symbol indented_block_body) [3807 4044])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4058 4062])
                            ("seed" variable nil (reparse-symbol function_parameters) [4064 4068]))                          
                        :documentation "Sets the seed for this env's random number generator(s).

        Note:
            Some environments use multiple pseudorandom number generators.
            We want to capture all such seeds used in order to ensure that
            there aren't accidental correlations between multiple generators.

        Returns:
            list<bigint>: Returns the list of seeds used in this env's random
              number generators. The first value in the list should be the
              \"main\" seed, or the value which a reproducer should pass to
              'seed'. Often, the main seed equals the provided 'seed', but
              this won't be true if seed=None, for example.
        ")
                        (reparse-symbol indented_block_body) [4049 4794])
                    ("unwrapped" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4827 4831]))                          
                        :documentation "Completely unwrap this env.

        Returns:
            gym.Env: The base non-wrapped gym.Env instance
        ")
                        (reparse-symbol indented_block_body) [4799 4982])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4999 5003]))                          )
                        (reparse-symbol indented_block_body) [4987 5185])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5204 5208]))                          )
                        (reparse-symbol indented_block_body) [5190 5231])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5249 5253])
                            ("args" variable nil (reparse-symbol function_parameters) [5255 5260]))                          )
                        (reparse-symbol indented_block_body) [5236 5335]))                  
                :type "class")
                nil [95 5335])
            ("GoalEnv" type
               (:documentation "A goal-based environment. It functions just as any regular OpenAI Gym environment but it
    imposes a required structure on the observation_space. More concretely, the observation
    space is required to contain at least three elements, namely `observation`, `desired_goal`, and
    `achieved_goal`. Here, `desired_goal` specifies the goal that the agent should attempt to achieve.
    `achieved_goal` is the goal that it currently achieved instead. `observation` contains the
    actual observations of the environment as per usual.
    "
                :superclasses ("Env")
                :members 
                  ( ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5923 5927]))                          )
                        (reparse-symbol indented_block_body) [5913 6418])
                    ("compute_reward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6442 6446])
                            ("achieved_goal" variable nil (reparse-symbol function_parameters) [6448 6461])
                            ("desired_goal" variable nil (reparse-symbol function_parameters) [6463 6475])
                            ("info" variable nil (reparse-symbol function_parameters) [6477 6481]))                          
                        :documentation "Compute the step reward. This externalizes the reward function and makes
        it dependent on an a desired goal and the one that was achieved. If you wish to include
        additional rewards that are independent of the goal, you can include the necessary values
        to derive it in info and compute it accordingly.

        Args:
            achieved_goal (object): the goal that was achieved during execution
            desired_goal (object): the desired goal that we asked the agent to attempt to achieve
            info (dict): an info dictionary with additional information

        Returns:
            float: The reward that corresponds to the provided achieved goal w.r.t. to the desired
            goal. Note that the following should always hold true:

                ob, reward, done, info = env.step()
                assert reward == env.compute_reward(ob['achieved_goal'], ob['goal'], info)
        ")
                        (reparse-symbol indented_block_body) [6423 7458]))                  
                :type "class")
                nil [5337 7458])
            ("Wrapper" type
               (:superclasses ("Env")
                :members 
                  ( ("r\"\"\"Wraps the environment to allow a modular transformation.

    This class is the base class for all wrappers. The subclass could override
    some methods to change the behavior of the original environment without touching the
    original code.

    .. note::

        Don't forget to call ``super().__init__(env)`` if the subclass overrides :meth:`__init__`.

    \"\"\"" code nil (reparse-symbol indented_block_body) [7484 7856])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7894 7908])
                            ("self" variable nil (reparse-symbol indented_block_body) [7917 7958])
                            ("self" variable nil (reparse-symbol indented_block_body) [7967 8018])
                            ("self" variable nil (reparse-symbol indented_block_body) [8027 8068])
                            ("self" variable nil (reparse-symbol indented_block_body) [8077 8110]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7874 7878])
                            ("env" variable nil (reparse-symbol function_parameters) [7880 7883]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7861 8111])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8132 8136])
                            ("name" variable nil (reparse-symbol function_parameters) [8138 8142]))                          )
                        (reparse-symbol indented_block_body) [8116 8314])
                    ("spec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8342 8346]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8319 8378])
                    ("class_name" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [8415 8418]))                          )
                        (reparse-symbol indented_block_body) [8383 8449])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8463 8467])
                            ("action" variable nil (reparse-symbol function_parameters) [8469 8475]))                          )
                        (reparse-symbol indented_block_body) [8454 8515])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8530 8534])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8536 8544]))                          )
                        (reparse-symbol indented_block_body) [8520 8587])
                    ("render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8603 8607])
                            ("mode" variable nil (reparse-symbol function_parameters) [8609 8613])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8623 8631]))                          )
                        (reparse-symbol indented_block_body) [8592 8681])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8696 8700]))                          )
                        (reparse-symbol indented_block_body) [8686 8735])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8749 8753])
                            ("seed" variable nil (reparse-symbol function_parameters) [8755 8759]))                          )
                        (reparse-symbol indented_block_body) [8740 8802])
                    ("compute_reward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8826 8830])
                            ("achieved_goal" variable nil (reparse-symbol function_parameters) [8832 8845])
                            ("desired_goal" variable nil (reparse-symbol function_parameters) [8847 8859])
                            ("info" variable nil (reparse-symbol function_parameters) [8861 8865]))                          )
                        (reparse-symbol indented_block_body) [8807 8942])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8959 8963]))                          )
                        (reparse-symbol indented_block_body) [8947 9028])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9046 9050]))                          )
                        (reparse-symbol indented_block_body) [9033 9078])
                    ("unwrapped" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9111 9115]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9083 9152]))                  
                :type "class")
                nil [7460 9152])
            ("ObservationWrapper" type
               (:superclasses ("Wrapper")
                :members 
                  ( ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9203 9207])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9209 9217]))                          )
                        (reparse-symbol indented_block_body) [9193 9312])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9326 9330])
                            ("action" variable nil (reparse-symbol function_parameters) [9332 9338]))                          )
                        (reparse-symbol indented_block_body) [9317 9470])
                    ("observation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9491 9495])
                            ("observation" variable nil (reparse-symbol function_parameters) [9497 9508]))                          )
                        (reparse-symbol indented_block_body) [9475 9545]))                  
                :type "class")
                nil [9154 9545])
            ("RewardWrapper" type
               (:superclasses ("Wrapper")
                :members 
                  ( ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9591 9595])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9597 9605]))                          )
                        (reparse-symbol indented_block_body) [9581 9648])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9662 9666])
                            ("action" variable nil (reparse-symbol function_parameters) [9668 9674]))                          )
                        (reparse-symbol indented_block_body) [9653 9801])
                    ("reward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9817 9821])
                            ("reward" variable nil (reparse-symbol function_parameters) [9823 9829]))                          )
                        (reparse-symbol indented_block_body) [9806 9866]))                  
                :type "class")
                nil [9547 9866])
            ("ActionWrapper" type
               (:superclasses ("Wrapper")
                :members 
                  ( ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9912 9916])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9918 9926]))                          )
                        (reparse-symbol indented_block_body) [9902 9969])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9983 9987])
                            ("action" variable nil (reparse-symbol function_parameters) [9989 9995]))                          )
                        (reparse-symbol indented_block_body) [9974 10048])
                    ("action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10064 10068])
                            ("action" variable nil (reparse-symbol function_parameters) [10070 10076]))                          )
                        (reparse-symbol indented_block_body) [10053 10113])
                    ("reverse_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10137 10141])
                            ("action" variable nil (reparse-symbol function_parameters) [10143 10149]))                          )
                        (reparse-symbol indented_block_body) [10118 10186]))                  
                :type "class")
                nil [9868 10186]))          
      :file "core.py"
      :pointmax 10186
      :fsize 10185
      :lastmodtime '(24579 55494 676805 443000)
      :unmatched-syntax nil))
  :file "!home!xli4217!miniconda3!envs!lof!lib!python3.7!site-packages!gym!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
