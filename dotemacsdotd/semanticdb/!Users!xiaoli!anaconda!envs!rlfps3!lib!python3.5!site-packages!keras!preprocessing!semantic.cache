;; Object preprocessing/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "preprocessing/"
  :tables
  (list
    (semanticdb-table "image.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Fairly basic set of tools for real-time data augmentation on image data.
Can easily be extended to include new transformations,
new preprocessing methods, etc...
\"\"\"" code nil nil [1 169])
            ("__future__" include nil nil [170 208])
            ("__future__" include nil nil [209 246])
            ("numpy" include nil nil [248 266])
            ("re" include nil nil [267 276])
            ("scipy" include nil nil [277 301])
            ("scipy.ndimage" include nil nil [302 329])
            ("six.moves" include nil nil [330 357])
            ("os" include nil nil [358 367])
            ("threading" include nil nil [368 384])
            ("warnings" include nil nil [385 400])
            ("backend" include nil nil [410 429])
            ("try" code nil nil [431 516])
            ("random_rotation" function
               (:documentation "Performs a random rotation of a Numpy image tensor.

    # Arguments
        x: Input tensor. Must be 3D.
        rg: Rotation range, in degrees.
        row_axis: Index of axis for rows in the input tensor.
        col_axis: Index of axis for columns in the input tensor.
        channel_axis: Index of axis for channels in the input tensor.
        fill_mode: Points outside the boundaries of the input
            are filled according to the given mode
            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).
        cval: Value used for points outside the boundaries
            of the input if `mode='constant'`.

    # Returns
        Rotated Numpy image tensor.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [538 539])
                    ("rg" variable nil (reparse-symbol function_parameters) [541 543])
                    ("row_axis" variable nil (reparse-symbol function_parameters) [545 553])
                    ("col_axis" variable nil (reparse-symbol function_parameters) [557 565])
                    ("channel_axis" variable nil (reparse-symbol function_parameters) [569 581])
                    ("fill_mode" variable nil (reparse-symbol function_parameters) [605 614])
                    ("cval" variable nil (reparse-symbol function_parameters) [626 630]))                  )
                nil [518 1778])
            ("random_shift" function
               (:documentation "Performs a random spatial shift of a Numpy image tensor.

    # Arguments
        x: Input tensor. Must be 3D.
        wrg: Width shift range, as a float fraction of the width.
        hrg: Height shift range, as a float fraction of the height.
        row_axis: Index of axis for rows in the input tensor.
        col_axis: Index of axis for columns in the input tensor.
        channel_axis: Index of axis for channels in the input tensor.
        fill_mode: Points outside the boundaries of the input
            are filled according to the given mode
            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).
        cval: Value used for points outside the boundaries
            of the input if `mode='constant'`.

    # Returns
        Shifted Numpy image tensor.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("wrg" variable nil (reparse-symbol function_parameters) [1800 1803])
                    ("hrg" variable nil (reparse-symbol function_parameters) [1805 1808])
                    ("row_axis" variable nil (reparse-symbol function_parameters) [1810 1818])
                    ("col_axis" variable nil (reparse-symbol function_parameters) [1822 1830])
                    ("channel_axis" variable nil (reparse-symbol function_parameters) [1834 1846])
                    ("fill_mode" variable nil (reparse-symbol function_parameters) [1867 1876])
                    ("cval" variable nil (reparse-symbol function_parameters) [1888 1892]))                  )
                nil [1780 3121])
            ("random_shear" function
               (:documentation "Performs a random spatial shear of a Numpy image tensor.

    # Arguments
        x: Input tensor. Must be 3D.
        intensity: Transformation intensity.
        row_axis: Index of axis for rows in the input tensor.
        col_axis: Index of axis for columns in the input tensor.
        channel_axis: Index of axis for channels in the input tensor.
        fill_mode: Points outside the boundaries of the input
            are filled according to the given mode
            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).
        cval: Value used for points outside the boundaries
            of the input if `mode='constant'`.

    # Returns
        Sheared Numpy image tensor.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [3140 3141])
                    ("intensity" variable nil (reparse-symbol function_parameters) [3143 3152])
                    ("row_axis" variable nil (reparse-symbol function_parameters) [3154 3162])
                    ("col_axis" variable nil (reparse-symbol function_parameters) [3166 3174])
                    ("channel_axis" variable nil (reparse-symbol function_parameters) [3178 3190])
                    ("fill_mode" variable nil (reparse-symbol function_parameters) [3211 3220])
                    ("cval" variable nil (reparse-symbol function_parameters) [3232 3236]))                  )
                nil [3123 4358])
            ("random_zoom" function
               (:documentation "Performs a random spatial zoom of a Numpy image tensor.

    # Arguments
        x: Input tensor. Must be 3D.
        zoom_range: Tuple of floats; zoom range for width and height.
        row_axis: Index of axis for rows in the input tensor.
        col_axis: Index of axis for columns in the input tensor.
        channel_axis: Index of axis for channels in the input tensor.
        fill_mode: Points outside the boundaries of the input
            are filled according to the given mode
            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).
        cval: Value used for points outside the boundaries
            of the input if `mode='constant'`.

    # Returns
        Zoomed Numpy image tensor.

    # Raises
        ValueError: if `zoom_range` isn't a tuple.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [4376 4377])
                    ("zoom_range" variable nil (reparse-symbol function_parameters) [4379 4389])
                    ("row_axis" variable nil (reparse-symbol function_parameters) [4391 4399])
                    ("col_axis" variable nil (reparse-symbol function_parameters) [4403 4411])
                    ("channel_axis" variable nil (reparse-symbol function_parameters) [4415 4427])
                    ("fill_mode" variable nil (reparse-symbol function_parameters) [4447 4456])
                    ("cval" variable nil (reparse-symbol function_parameters) [4468 4472]))                  )
                nil [4360 5917])
            ("random_channel_shift" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5944 5945])
                ("intensity" variable nil (reparse-symbol function_parameters) [5947 5956])
                ("channel_axis" variable nil (reparse-symbol function_parameters) [5958 5970]))              ) nil [5919 6293])
            ("transform_matrix_offset_center" function (:arguments 
              ( ("matrix" variable nil (reparse-symbol function_parameters) [6330 6336])
                ("x" variable nil (reparse-symbol function_parameters) [6338 6339])
                ("y" variable nil (reparse-symbol function_parameters) [6341 6342]))              ) nil [6295 6643])
            ("apply_transform" function
               (:documentation "Apply the image transformation specified by a matrix.

    # Arguments
        x: 2D numpy array, single image.
        transform_matrix: Numpy array specifying the geometric transformation.
        channel_axis: Index of axis for channels in the input tensor.
        fill_mode: Points outside the boundaries of the input
            are filled according to the given mode
            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).
        cval: Value used for points outside the boundaries
            of the input if `mode='constant'`.

    # Returns
        The transformed version of the input.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [6665 6666])
                    ("transform_matrix" variable nil (reparse-symbol function_parameters) [6688 6704])
                    ("channel_axis" variable nil (reparse-symbol function_parameters) [6726 6738])
                    ("fill_mode" variable nil (reparse-symbol function_parameters) [6762 6771])
                    ("cval" variable nil (reparse-symbol function_parameters) [6803 6807]))                  )
                nil [6645 7876])
            ("flip_axis" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7892 7893])
                ("axis" variable nil (reparse-symbol function_parameters) [7895 7899]))              ) nil [7878 8004])
            ("array_to_img" function
               (:documentation "Converts a 3D Numpy array to a PIL Image instance.

    # Arguments
        x: Input Numpy array.
        data_format: Image data format.
        scale: Whether to rescale image values
            to be within [0, 255].

    # Returns
        A PIL Image instance.

    # Raises
        ImportError: if PIL is not available.
        ValueError: if invalid `x` or `data_format` is passed.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8023 8024])
                    ("data_format" variable nil (reparse-symbol function_parameters) [8026 8037])
                    ("scale" variable nil (reparse-symbol function_parameters) [8044 8049]))                  )
                nil [8006 9675])
            ("img_to_array" function
               (:documentation "Converts a PIL Image instance to a Numpy array.

    # Arguments
        img: PIL Image instance.
        data_format: Image data format.

    # Returns
        A 3D Numpy array.

    # Raises
        ValueError: if invalid `img` or `data_format` is passed.
    "
                :arguments 
                  ( ("img" variable nil (reparse-symbol function_parameters) [9694 9697])
                    ("data_format" variable nil (reparse-symbol function_parameters) [9699 9710]))                  )
                nil [9677 10775])
            ("load_img" function
               (:documentation "Loads an image into PIL format.

    # Arguments
        path: Path to image file
        grayscale: Boolean, whether to load the image as grayscale.
        target_size: Either `None` (default to original size)
            or tuple of ints `(img_height, img_width)`.

    # Returns
        A PIL Image instance.

    # Raises
        ImportError: if PIL is not available.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10790 10794])
                    ("grayscale" variable nil (reparse-symbol function_parameters) [10796 10805])
                    ("target_size" variable nil (reparse-symbol function_parameters) [10813 10824]))                  )
                nil [10777 11720])
            ("list_pictures" function (:arguments 
              ( ("directory" variable nil (reparse-symbol function_parameters) [11740 11749])
                ("ext" variable nil (reparse-symbol function_parameters) [11751 11754]))              ) nil [11722 11935])
            ("ImageDataGenerator" type
               (:documentation "Generate minibatches of image data with real-time data augmentation.

    # Arguments
        featurewise_center: set input mean to 0 over the dataset.
        samplewise_center: set each sample mean to 0.
        featurewise_std_normalization: divide inputs by std of the dataset.
        samplewise_std_normalization: divide each input by its std.
        zca_whitening: apply ZCA whitening.
        rotation_range: degrees (0 to 180).
        width_shift_range: fraction of total width.
        height_shift_range: fraction of total height.
        shear_range: shear intensity (shear angle in radians).
        zoom_range: amount of zoom. if scalar z, zoom will be randomly picked
            in the range [1-z, 1+z]. A sequence of two can be passed instead
            to select this range.
        channel_shift_range: shift range for each channels.
        fill_mode: points outside the boundaries are filled according to the
            given mode ('constant', 'nearest', 'reflect' or 'wrap'). Default
            is 'nearest'.
        cval: value used for points outside the boundaries when fill_mode is
            'constant'. Default is 0.
        horizontal_flip: whether to randomly flip images horizontally.
        vertical_flip: whether to randomly flip images vertically.
        rescale: rescaling factor. If None or 0, no rescaling is applied,
            otherwise we multiply the data by the value provided
            (before applying any other transformation).
        preprocessing_function: function that will be implied on each input.
            The function will run before any other modification on it.
            The function should take one argument:
            one image (Numpy tensor with rank 3),
            and should output a Numpy tensor with the same shape.
        data_format: 'channels_first' or 'channels_last'. In 'channels_first' mode, the channels dimension
            (the depth) is at index 1, in 'channels_last' mode it is at index 3.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [14904 14976])
                            ("self" variable nil (reparse-symbol indented_block_body) [14984 15028])
                            ("self" variable nil (reparse-symbol indented_block_body) [15037 15079])
                            ("self" variable nil (reparse-symbol indented_block_body) [15088 15154])
                            ("self" variable nil (reparse-symbol indented_block_body) [15163 15227])
                            ("self" variable nil (reparse-symbol indented_block_body) [15236 15270])
                            ("self" variable nil (reparse-symbol indented_block_body) [15279 15315])
                            ("self" variable nil (reparse-symbol indented_block_body) [15324 15366])
                            ("self" variable nil (reparse-symbol indented_block_body) [15375 15419])
                            ("self" variable nil (reparse-symbol indented_block_body) [15428 15458])
                            ("self" variable nil (reparse-symbol indented_block_body) [15467 15495])
                            ("self" variable nil (reparse-symbol indented_block_body) [15504 15550])
                            ("self" variable nil (reparse-symbol indented_block_body) [15559 15585])
                            ("self" variable nil (reparse-symbol indented_block_body) [15594 15610])
                            ("self" variable nil (reparse-symbol indented_block_body) [15619 15657])
                            ("self" variable nil (reparse-symbol indented_block_body) [15666 15700])
                            ("self" variable nil (reparse-symbol indented_block_body) [15709 15731])
                            ("self" variable nil (reparse-symbol indented_block_body) [15740 15792])
                            ("if" code nil (reparse-symbol indented_block_body) [15802 16107])
                            ("self" variable nil (reparse-symbol indented_block_body) [16115 16145])
                            ("if" code nil (reparse-symbol indented_block_body) [16154 16284])
                            ("if" code nil (reparse-symbol indented_block_body) [16292 16421])
                            ("self" variable nil (reparse-symbol indented_block_body) [16430 16446])
                            ("self" variable nil (reparse-symbol indented_block_body) [16455 16470])
                            ("self" variable nil (reparse-symbol indented_block_body) [16479 16511])
                            ("if" code nil (reparse-symbol indented_block_body) [16521 16908]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14184 14188])
                            ("featurewise_center" variable nil (reparse-symbol function_parameters) [14207 14225])
                            ("samplewise_center" variable nil (reparse-symbol function_parameters) [14250 14267])
                            ("featurewise_std_normalization" variable nil (reparse-symbol function_parameters) [14292 14321])
                            ("samplewise_std_normalization" variable nil (reparse-symbol function_parameters) [14346 14374])
                            ("zca_whitening" variable nil (reparse-symbol function_parameters) [14399 14412])
                            ("rotation_range" variable nil (reparse-symbol function_parameters) [14437 14451])
                            ("width_shift_range" variable nil (reparse-symbol function_parameters) [14473 14490])
                            ("height_shift_range" variable nil (reparse-symbol function_parameters) [14512 14530])
                            ("shear_range" variable nil (reparse-symbol function_parameters) [14552 14563])
                            ("zoom_range" variable nil (reparse-symbol function_parameters) [14585 14595])
                            ("channel_shift_range" variable nil (reparse-symbol function_parameters) [14617 14636])
                            ("fill_mode" variable nil (reparse-symbol function_parameters) [14658 14667])
                            ("cval" variable nil (reparse-symbol function_parameters) [14696 14700])
                            ("horizontal_flip" variable nil (reparse-symbol function_parameters) [14722 14737])
                            ("vertical_flip" variable nil (reparse-symbol function_parameters) [14762 14775])
                            ("rescale" variable nil (reparse-symbol function_parameters) [14800 14807])
                            ("preprocessing_function" variable nil (reparse-symbol function_parameters) [14831 14853])
                            ("data_format" variable nil (reparse-symbol function_parameters) [14877 14888]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14171 16908])
                    ("flow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16922 16926])
                            ("x" variable nil (reparse-symbol function_parameters) [16928 16929])
                            ("y" variable nil (reparse-symbol function_parameters) [16931 16932])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [16939 16949])
                            ("shuffle" variable nil (reparse-symbol function_parameters) [16954 16961])
                            ("seed" variable nil (reparse-symbol function_parameters) [16968 16972])
                            ("save_to_dir" variable nil (reparse-symbol function_parameters) [16992 17003])
                            ("save_prefix" variable nil (reparse-symbol function_parameters) [17010 17021])
                            ("save_format" variable nil (reparse-symbol function_parameters) [17026 17037]))                          )
                        (reparse-symbol indented_block_body) [16913 17346])
                    ("flow_from_directory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17375 17379])
                            ("directory" variable nil (reparse-symbol function_parameters) [17381 17390])
                            ("target_size" variable nil (reparse-symbol function_parameters) [17420 17431])
                            ("color_mode" variable nil (reparse-symbol function_parameters) [17444 17454])
                            ("classes" variable nil (reparse-symbol function_parameters) [17490 17497])
                            ("class_mode" variable nil (reparse-symbol function_parameters) [17504 17514])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [17558 17568])
                            ("shuffle" variable nil (reparse-symbol function_parameters) [17573 17580])
                            ("seed" variable nil (reparse-symbol function_parameters) [17587 17591])
                            ("save_to_dir" variable nil (reparse-symbol function_parameters) [17626 17637])
                            ("save_prefix" variable nil (reparse-symbol function_parameters) [17672 17683])
                            ("save_format" variable nil (reparse-symbol function_parameters) [17716 17727])
                            ("follow_links" variable nil (reparse-symbol function_parameters) [17764 17776]))                          )
                        (reparse-symbol indented_block_body) [17351 18215])
                    ("standardize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18236 18240])
                            ("x" variable nil (reparse-symbol function_parameters) [18242 18243]))                          
                        :documentation "Apply the normalization configuration to a batch of inputs.

        # Arguments
            x: batch of inputs to be normalized.

        # Returns
            The inputs, normalized.
        ")
                        (reparse-symbol indented_block_body) [18220 20353])
                    ("random_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20379 20383])
                            ("x" variable nil (reparse-symbol function_parameters) [20385 20386]))                          
                        :documentation "Randomly augment a single image tensor.

        # Arguments
            x: 3D tensor, single image.

        # Returns
            A randomly transformed version of the input (same shape).
        ")
                        (reparse-symbol indented_block_body) [20358 23757])
                    ("fit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23770 23774])
                            ("x" variable nil (reparse-symbol function_parameters) [23776 23777])
                            ("augment" variable nil (reparse-symbol function_parameters) [23791 23798])
                            ("rounds" variable nil (reparse-symbol function_parameters) [23818 23824])
                            ("seed" variable nil (reparse-symbol function_parameters) [23840 23844]))                          
                        :documentation "Fits internal statistics to some sample data.

        Required for featurewise_center, featurewise_std_normalization
        and zca_whitening.

        # Arguments
            x: Numpy array, the data to fit on. Should have rank 4.
                In case of grayscale data,
                the channels axis should have value 1, and in case
                of RGB data, it should have value 3.
            augment: Whether to fit on randomly augmented samples
            rounds: If `augment`,
                how many augmentation passes to do over the data
            seed: random seed.

        # Raises
            ValueError: in case of invalid input `x`.
        ")
                        (reparse-symbol indented_block_body) [23762 26659]))                  
                :type "class")
                nil [11937 26659])
            ("Iterator" type
               (:documentation "Abstract base class for image data iterators.

    # Arguments
        n: Integer, total number of samples in the dataset to loop over.
        batch_size: Integer, size of a batch.
        shuffle: Boolean, whether to shuffle the data between epochs.
        seed: Random seeding for data shuffling.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [27064 27074])
                            ("self" variable nil (reparse-symbol indented_block_body) [27083 27111])
                            ("self" variable nil (reparse-symbol indented_block_body) [27120 27142])
                            ("self" variable nil (reparse-symbol indented_block_body) [27151 27171])
                            ("self" variable nil (reparse-symbol indented_block_body) [27180 27207])
                            ("self" variable nil (reparse-symbol indented_block_body) [27216 27244])
                            ("self" variable nil (reparse-symbol indented_block_body) [27253 27322]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27019 27023])
                            ("n" variable nil (reparse-symbol function_parameters) [27025 27026])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [27028 27038])
                            ("shuffle" variable nil (reparse-symbol function_parameters) [27040 27047])
                            ("seed" variable nil (reparse-symbol function_parameters) [27049 27053]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27006 27323])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27338 27342]))                          )
                        (reparse-symbol indented_block_body) [27328 27374])
                    ("_flow_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27395 27399])
                            ("n" variable nil (reparse-symbol function_parameters) [27401 27402])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [27404 27414])
                            ("shuffle" variable nil (reparse-symbol function_parameters) [27419 27426])
                            ("seed" variable nil (reparse-symbol function_parameters) [27434 27438]))                          )
                        (reparse-symbol indented_block_body) [27379 28274])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28292 28296]))                          )
                        (reparse-symbol indented_block_body) [28279 28411])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28429 28433])
                            ("args" variable nil (reparse-symbol function_parameters) [28435 28440])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28442 28450]))                          )
                        (reparse-symbol indented_block_body) [28416 28495]))                  
                :type "class")
                nil [26661 28495])
            ("NumpyArrayIterator" type
               (:documentation "Iterator yielding data from a Numpy array.

    # Arguments
        x: Numpy array of input data.
        y: Numpy array of targets data.
        image_data_generator: Instance of `ImageDataGenerator`
            to use for random transformations and normalization.
        batch_size: Integer, size of a batch.
        shuffle: Boolean, whether to shuffle the data between epochs.
        seed: Random seed for data shuffling.
        data_format: String, one of `channels_first`, `channels_last`.
        save_to_dir: Optional directory where to save the pictures
            being yielded, in a viewable format. This is useful
            for visualizing the random transformations being
            applied, for debugging purposes.
        save_prefix: String prefix to use for saving sample
            images (if `save_to_dir` is set).
        save_format: Format to use for saving sample images
            (if `save_to_dir` is set).
    "
                :superclasses ("Iterator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [29714 30019])
                            ("if" code nil (reparse-symbol indented_block_body) [30028 30100])
                            ("self" variable nil (reparse-symbol indented_block_body) [30108 30148])
                            ("if" code nil (reparse-symbol indented_block_body) [30158 30375])
                            ("1" code nil (reparse-symbol indented_block_body) [30440 30441])
                            ("if" code nil (reparse-symbol indented_block_body) [30450 31015])
                            ("if" code nil (reparse-symbol indented_block_body) [31023 31116])
                            ("self" variable nil (reparse-symbol indented_block_body) [31124 31172])
                            ("self" variable nil (reparse-symbol indented_block_body) [31181 31211])
                            ("self" variable nil (reparse-symbol indented_block_body) [31220 31250])
                            ("self" variable nil (reparse-symbol indented_block_body) [31259 31289])
                            ("self" variable nil (reparse-symbol indented_block_body) [31298 31328])
                            ("super" code nil (reparse-symbol indented_block_body) [31337 31416]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29507 29511])
                            ("x" variable nil (reparse-symbol function_parameters) [29513 29514])
                            ("y" variable nil (reparse-symbol function_parameters) [29516 29517])
                            ("image_data_generator" variable nil (reparse-symbol function_parameters) [29519 29539])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [29558 29568])
                            ("shuffle" variable nil (reparse-symbol function_parameters) [29573 29580])
                            ("seed" variable nil (reparse-symbol function_parameters) [29588 29592])
                            ("data_format" variable nil (reparse-symbol function_parameters) [29616 29627])
                            ("save_to_dir" variable nil (reparse-symbol function_parameters) [29651 29662])
                            ("save_prefix" variable nil (reparse-symbol function_parameters) [29669 29680])
                            ("save_format" variable nil (reparse-symbol function_parameters) [29685 29696]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29494 31417])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31431 31435]))                          
                        :documentation "For python 2.x.

        # Returns
            The next batch.
        ")
                        (reparse-symbol indented_block_body) [31422 32883]))                  
                :type "class")
                nil [28497 32883])
            ("DirectoryIterator" type
               (:documentation "Iterator capable of reading images from a directory on disk.

    # Arguments
        directory: Path to the directory to read images from.
            Each subdirectory in this directory will be
            considered to contain images from one class,
            or alternatively you could specify class subdirectories
            via the `classes` argument.
        image_data_generator: Instance of `ImageDataGenerator`
            to use for random transformations and normalization.
        target_size: tuple of integers, dimensions to resize input images to.
        color_mode: One of `\"rgb\"`, `\"grayscale\"`. Color mode to read images.
        classes: Optional list of strings, names of sudirectories
            containing images from each class (e.g. `[\"dogs\", \"cats\"]`).
            It will be computed automatically if not set.
        class_mode: Mode for yielding the targets:
            `\"binary\"`: binary targets (if there are only two classes),
            `\"categorical\"`: categorical targets,
            `\"sparse\"`: integer targets,
            `None`: no targets get yielded (only input images are yielded).
        batch_size: Integer, size of a batch.
        shuffle: Boolean, whether to shuffle the data between epochs.
        seed: Random seed for data shuffling.
        data_format: String, one of `channels_first`, `channels_last`.
        save_to_dir: Optional directory where to save the pictures
            being yielded, in a viewable format. This is useful
            for visualizing the random transformations being
            applied, for debugging purposes.
        save_prefix: String prefix to use for saving sample
            images (if `save_to_dir` is set).
        save_format: Format to use for saving sample images
            (if `save_to_dir` is set).
    "
                :superclasses ("Iterator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [35124 35196])
                            ("self" variable nil (reparse-symbol indented_block_body) [35204 35230])
                            ("self" variable nil (reparse-symbol indented_block_body) [35239 35287])
                            ("self" variable nil (reparse-symbol indented_block_body) [35296 35333])
                            ("if" code nil (reparse-symbol indented_block_body) [35342 35514])
                            ("self" variable nil (reparse-symbol indented_block_body) [35522 35550])
                            ("self" variable nil (reparse-symbol indented_block_body) [35559 35589])
                            ("if" code nil (reparse-symbol indented_block_body) [35598 36017])
                            ("self" variable nil (reparse-symbol indented_block_body) [36025 36047])
                            ("if" code nil (reparse-symbol indented_block_body) [36056 36310])
                            ("self" variable nil (reparse-symbol indented_block_body) [36318 36346])
                            ("self" variable nil (reparse-symbol indented_block_body) [36355 36385])
                            ("self" variable nil (reparse-symbol indented_block_body) [36394 36424])
                            ("self" variable nil (reparse-symbol indented_block_body) [36433 36463])
                            ("white_list_formats" variable nil (reparse-symbol indented_block_body) [36473 36523])
                            ("self" variable nil (reparse-symbol indented_block_body) [36590 36606])
                            ("if" code nil (reparse-symbol indented_block_body) [36616 36824])
                            ("self" variable nil (reparse-symbol indented_block_body) [36832 36861])
                            ("self" variable nil (reparse-symbol indented_block_body) [36870 36930])
                            ("_recursive_list" function (:arguments 
                              ( ("subpath" variable nil (reparse-symbol function_parameters) [36960 36967]))                              ) (reparse-symbol indented_block_body) [36940 37064])
                            ("for" code nil (reparse-symbol indented_block_body) [37073 37561])
                            ("print" code nil (reparse-symbol indented_block_body) [37569 37651])
                            ("self" variable nil (reparse-symbol indented_block_body) [37742 37761])
                            ("self" variable nil (reparse-symbol indented_block_body) [37770 37825])
                            ("i" variable nil (reparse-symbol indented_block_body) [37834 37839])
                            ("for" code nil (reparse-symbol indented_block_body) [37848 38610])
                            ("super" code nil (reparse-symbol indented_block_body) [38618 38698]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34760 34764])
                            ("directory" variable nil (reparse-symbol function_parameters) [34766 34775])
                            ("image_data_generator" variable nil (reparse-symbol function_parameters) [34777 34797])
                            ("target_size" variable nil (reparse-symbol function_parameters) [34816 34827])
                            ("color_mode" variable nil (reparse-symbol function_parameters) [34840 34850])
                            ("classes" variable nil (reparse-symbol function_parameters) [34875 34882])
                            ("class_mode" variable nil (reparse-symbol function_parameters) [34889 34899])
                            ("batch_size" variable nil (reparse-symbol function_parameters) [34932 34942])
                            ("shuffle" variable nil (reparse-symbol function_parameters) [34947 34954])
                            ("seed" variable nil (reparse-symbol function_parameters) [34961 34965])
                            ("data_format" variable nil (reparse-symbol function_parameters) [34989 35000])
                            ("save_to_dir" variable nil (reparse-symbol function_parameters) [35024 35035])
                            ("save_prefix" variable nil (reparse-symbol function_parameters) [35042 35053])
                            ("save_format" variable nil (reparse-symbol function_parameters) [35058 35069])
                            ("follow_links" variable nil (reparse-symbol function_parameters) [35095 35107]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34747 38699])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38713 38717]))                          
                        :documentation "For python 2.x.

        # Returns
            The next batch.
        ")
                        (reparse-symbol indented_block_body) [38704 40852]))                  
                :type "class")
                nil [32885 40852]))          
      :file "image.py"
      :pointmax 40852
      :fsize 40851
      :lastmodtime '(22736 18222 0 0)
      :unmatched-syntax '((NAME 30383 . 30396) (IF 30401 . 30403) (ELSE 30435 . 30439) (NAME 22858 . 22874) (IF 22889 . 22891) (ELSE 22917 . 22921) (NAME 22566 . 22582) (IF 22598 . 22600) (ELSE 22626 . 22630) (NAME 22258 . 22274) (IF 22290 . 22292) (ELSE 22318 . 22322) (PERIOD 408 . 409) (FROM 402 . 406) (PERIOD 407 . 408))))
  :file "!Users!xiaoli!anaconda!envs!rlfps3!lib!python3.5!site-packages!keras!preprocessing!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
