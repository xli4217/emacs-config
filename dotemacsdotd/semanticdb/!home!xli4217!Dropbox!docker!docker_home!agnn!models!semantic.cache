;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("torch" include nil nil [1 13])
            ("utils.utils" include nil nil [14 50])
            ("create_polynomial_features" function
               (:documentation "

    Parameters
    ----------
    ln_coords: list, list of lane coordinates.
    horizon: float, the horizon for which we want the approximation to be good.
    stepsize: float, the step size for sample points.
    degree: int, the degree of the polynomial

    Returns
    -------
    result_polynomial_features: np.array, of size n_points x (2xdegree), to capture polynomial coefficients on x,y.
    "
                :arguments 
                  ( ("ln_coords" variable nil (reparse-symbol function_parameters) [84 93])
                    ("horizon" variable nil (reparse-symbol function_parameters) [95 102])
                    ("stepsize" variable nil (reparse-symbol function_parameters) [106 114])
                    ("degree" variable nil (reparse-symbol function_parameters) [120 126]))                  )
                nil [53 1629])
            ("second_order_unicycle_one_step" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1665 1666])
                ("u" variable nil (reparse-symbol function_parameters) [1668 1669])
                ("dt" variable nil (reparse-symbol function_parameters) [1671 1673]))              ) nil [1630 2790])
            ("get_single_integrator_ctrl_from_traj" function (:arguments 
              ( ("Tensor" variable nil (reparse-symbol function_parameters) [2844 2850]))              ) nil [2791 3025])
            ("get_estimated_yaw_from_pos_traj" function (:arguments 
              ( ("Tensor" variable nil (reparse-symbol function_parameters) [3078 3084])
                ("float" variable nil (reparse-symbol function_parameters) [3098 3103]))              ) nil [3026 3486])
            ("get_unicycle_ctrl_from_traj" function (:arguments 
              ( ("Tensor" variable nil (reparse-symbol function_parameters) [3539 3545])
                ("float" variable nil (reparse-symbol function_parameters) [3553 3558])
                ("int" variable nil (reparse-symbol function_parameters) [3572 3575]))              ) nil [3495 3923])
            ("get_unicycle_ctrl_from_2d_traj" function (:arguments 
              ( ("Tensor" variable nil (reparse-symbol function_parameters) [3971 3977])
                ("float" variable nil (reparse-symbol function_parameters) [3985 3990])
                ("float" variable nil (reparse-symbol function_parameters) [4004 4009]))              ) nil [3924 4689])
            ("single_integrator" function (:arguments 
              ( ("Tensor" variable nil (reparse-symbol function_parameters) [4721 4727])
                ("Tensor" variable nil (reparse-symbol function_parameters) [4738 4744])
                ("float" variable nil (reparse-symbol function_parameters) [4749 4754]))              ) nil [4690 4975])
            ("unicycle" function (:arguments 
              ( ("Tensor" variable nil (reparse-symbol function_parameters) [5003 5009])
                ("Tensor" variable nil (reparse-symbol function_parameters) [5033 5039])
                ("float" variable nil (reparse-symbol function_parameters) [5058 5063])
                ("frame" variable nil (reparse-symbol function_parameters) [5078 5083]))              ) nil [4981 5959])
            ("create_traj_from_control" function (:arguments 
              ( ("Tensor" variable nil (reparse-symbol function_parameters) [6003 6009])
                ("Tensor" variable nil (reparse-symbol function_parameters) [6048 6054])
                ("float" variable nil (reparse-symbol function_parameters) [6089 6094])
                ("model" variable nil (reparse-symbol function_parameters) [6125 6130])
                ("frame" variable nil (reparse-symbol function_parameters) [6181 6186]))              ) nil [5964 7140]))          
      :file "dynamics.py"
      :pointmax 7140
      :fsize 7139
      :lastmodtime '(24627 19273 316558 302000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("torch" include nil nil [1 13])
            ("torch" include nil nil [14 34])
            ("os" include nil nil [35 44])
            ("numpy" include nil nil [45 63])
            ("pytorch_lightning" include nil nil [64 94])
            ("pytorch_lightning" include nil nil [95 133])
            ("pandas" include nil nil [184 203])
            ("cloudpickle" include nil nil [204 222])
            ("utils.utils" include nil nil [223 290])
            ("utils.configuration" include nil nil [291 336])
            ("future.utils" include nil nil [337 371])
            ("loguru" include nil nil [372 397])
            ("copy" include nil nil [399 410])
            ("ModelBase" type
               (:superclasses ("pl.LightningModule")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [540 684])
                            ("self" code nil (reparse-symbol indented_block_body) [693 722])
                            ("pl" code nil (reparse-symbol indented_block_body) [732 765])
                            ("self" variable nil (reparse-symbol indented_block_body) [774 797])
                            ("if" code nil (reparse-symbol indented_block_body) [815 1085])
                            ("self" variable nil (reparse-symbol indented_block_body) [1094 1120])
                            ("self" variable nil (reparse-symbol indented_block_body) [1129 1155])
                            ("if" code nil (reparse-symbol indented_block_body) [1165 1430])
                            ("if" code nil (reparse-symbol indented_block_body) [1464 1641]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [468 472])
                            ("config" variable nil (reparse-symbol function_parameters) [474 480])
                            ("py_logger" variable nil (reparse-symbol function_parameters) [485 494])
                            ("tb_logger" variable nil (reparse-symbol function_parameters) [501 510])
                            ("hparams" variable nil (reparse-symbol function_parameters) [517 524]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [455 1641])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1671 1675]))                          )
                        (reparse-symbol indented_block_body) [1658 1703])
                    ("update_all_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1728 1732]))                          )
                        (reparse-symbol indented_block_body) [1708 1773])
                    ("save_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1794 1798])
                            ("str" variable nil (reparse-symbol function_parameters) [1817 1820]))                          )
                        (reparse-symbol indented_block_body) [1778 1936])
                    ("get_example_model_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1969 1973]))                          )
                        (reparse-symbol indented_block_body) [1941 2014])
                    ("_on_validation_epoch_end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2060 2064]))                          )
                        (reparse-symbol indented_block_body) [2031 2080]))                  
                :type "class")
                nil [413 2080]))          
      :file "model_base.py"
      :pointmax 2080
      :fsize 2079
      :lastmodtime '(24612 60259 795808 644000)
      :unmatched-syntax '((NAME 1800 . 1816) (COLON 1816 . 1817)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("torch" include nil nil [1 13])
            ("torch.nn" include nil nil [14 35])
            ("os" include nil nil [36 45])
            ("numpy" include nil nil [46 64])
            ("pytorch_lightning" include nil nil [65 95])
            ("utils.utils" include nil nil [96 132])
            ("Encoder" type
               (:superclasses ("pl.LightningModule")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cell_size is the size of cell_state.
        hidden_size is the size of hidden_state, or say the output_state of each step
        \"\"\"" code nil (reparse-symbol indented_block_body) [258 404])
                            ("self" variable nil (reparse-symbol indented_block_body) [413 535])
                            ("self" code nil (reparse-symbol indented_block_body) [553 579])
                            ("super" code nil (reparse-symbol indented_block_body) [596 632])
                            ("self" code nil (reparse-symbol indented_block_body) [642 725])
                            ("self" variable nil (reparse-symbol indented_block_body) [735 837])
                            ("self" variable nil (reparse-symbol indented_block_body) [913 934]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [231 235])
                            ("config" variable nil (reparse-symbol function_parameters) [238 244]))                          
                        :documentation "
        cell_size is the size of cell_state.
        hidden_size is the size of hidden_state, or say the output_state of each step
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [216 935])
                    ("get_sample_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [970 974])
                            ("seq_len" variable nil (reparse-symbol function_parameters) [976 983])
                            ("feature_dim" variable nil (reparse-symbol function_parameters) [985 996]))                          )
                        (reparse-symbol indented_block_body) [949 1050])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1077 1081])
                            ("Tensor" variable nil (reparse-symbol function_parameters) [1098 1104])
                            ("Tensor" variable nil (reparse-symbol function_parameters) [1126 1132])
                            ("Tensor" variable nil (reparse-symbol function_parameters) [1157 1163]))                          )
                        (reparse-symbol indented_block_body) [1063 1925]))                  
                :type "class")
                nil [177 1925])
            ("Decoder" type
               (:superclasses ("pl.LightningModule")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cell_size is the size of cell_state.
        hidden_size is the size of hidden_state, or say the output_state of each step
        \"\"\"" code nil (reparse-symbol indented_block_body) [2010 2156])
                            ("self" variable nil (reparse-symbol indented_block_body) [2166 2317])
                            ("self" code nil (reparse-symbol indented_block_body) [2326 2352])
                            ("super" code nil (reparse-symbol indented_block_body) [2361 2397])
                            ("input_size" variable nil (reparse-symbol indented_block_body) [2407 2445])
                            ("output_size" variable nil (reparse-symbol indented_block_body) [2454 2494])
                            ("hidden_size_per_layer" variable nil (reparse-symbol indented_block_body) [2503 2563])
                            ("num_layers" variable nil (reparse-symbol indented_block_body) [2572 2610])
                            ("self" code nil (reparse-symbol indented_block_body) [2628 2681])
                            ("self" variable nil (reparse-symbol indented_block_body) [2691 2763])
                            ("self" variable nil (reparse-symbol indented_block_body) [2772 2832]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1982 1986])
                            ("config" variable nil (reparse-symbol function_parameters) [1989 1995]))                          
                        :documentation "
        cell_size is the size of cell_state.
        hidden_size is the size of hidden_state, or say the output_state of each step
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1967 2833])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2860 2864])
                            ("Tensor" variable nil (reparse-symbol function_parameters) [2881 2887])
                            ("Tensor" variable nil (reparse-symbol function_parameters) [2909 2915])
                            ("Tensor" variable nil (reparse-symbol function_parameters) [2935 2941]))                          )
                        (reparse-symbol indented_block_body) [2846 3495]))                  
                :type "class")
                nil [1928 3495])
            ("make_mlp" function (:arguments 
              ( ("dim_list" variable nil (reparse-symbol function_parameters) [3514 3522])
                ("activation" variable nil (reparse-symbol function_parameters) [3524 3534])
                ("batch_norm" variable nil (reparse-symbol function_parameters) [3543 3553])
                ("dropout" variable nil (reparse-symbol function_parameters) [3561 3568])
                ("output_activation" variable nil (reparse-symbol function_parameters) [3572 3589])
                ("output_scale" variable nil (reparse-symbol function_parameters) [3596 3608]))              ) nil [3501 4286]))          
      :file "model_utils.py"
      :pointmax 4286
      :fsize 4285
      :lastmodtime '(24594 23734 848907 882000)
      :unmatched-syntax '((PERIOD 2934 . 2935) (NAME 2917 . 2927) (COLON 2927 . 2928) (PERIOD 2908 . 2909) (NAME 2889 . 2901) (COLON 2901 . 2902) (PERIOD 2880 . 2881) (NAME 2867 . 2873) (COLON 2873 . 2874) (PERIOD 1156 . 1157) (NAME 1139 . 1149) (COLON 1149 . 1150) (PERIOD 1125 . 1126) (NAME 1106 . 1118) (COLON 1118 . 1119) (PERIOD 1097 . 1098) (NAME 1084 . 1090) (COLON 1090 . 1091) (PERIOD 2934 . 2935) (NAME 2917 . 2927) (COLON 2927 . 2928) (PERIOD 2908 . 2909) (NAME 2889 . 2901) (COLON 2901 . 2902) (PERIOD 2880 . 2881) (NAME 2867 . 2873) (COLON 2873 . 2874) (PERIOD 1156 . 1157) (NAME 1139 . 1149) (COLON 1149 . 1150) (PERIOD 1125 . 1126) (NAME 1106 . 1118) (COLON 1118 . 1119) (PERIOD 1097 . 1098) (NAME 1084 . 1090) (COLON 1090 . 1091))))
  :file "!home!xli4217!Dropbox!docker!docker_home!agnn!models!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
