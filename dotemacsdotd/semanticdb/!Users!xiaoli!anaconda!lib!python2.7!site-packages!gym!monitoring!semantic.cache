;; Object monitoring/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "monitoring/"
  :tables
  (list
    (semanticdb-table "monitor.py"
      :major-mode 'python-mode
      :tags 
        '( ("atexit" include nil nil [1 14])
            ("logging" include nil nil [15 29])
            ("json" include nil nil [30 41])
            ("numpy" include nil nil [42 60])
            ("os" include nil nil [61 70])
            ("six" include nil nil [71 81])
            ("sys" include nil nil [82 92])
            ("threading" include nil nil [93 109])
            ("weakref" include nil nil [110 124])
            ("gym" include nil nil [126 156])
            ("gym.monitoring" include nil nil [157 214])
            ("gym.utils" include nil nil [215 266])
            ("logger" variable nil nil [268 304])
            ("FILE_PREFIX" variable nil nil [306 331])
            ("MANIFEST_PREFIX" code nil nil [332 375])
            ("detect_training_manifests" function (:arguments 
              ( ("training_dir" variable nil (reparse-symbol function_parameters) [407 419]))              ) nil [377 538])
            ("detect_monitor_files" function (:arguments 
              ( ("training_dir" variable nil (reparse-symbol function_parameters) [564 576]))              ) nil [539 691])
            ("clear_monitor_files" function (:arguments 
              ( ("training_dir" variable nil (reparse-symbol function_parameters) [716 728]))              ) nil [692 974])
            ("capped_cubic_video_schedule" function (:arguments 
              ( ("episode_id" variable nil (reparse-symbol function_parameters) [1007 1017]))              ) nil [975 1163])
            ("disable_videos" function (:arguments 
              ( ("episode_id" variable nil (reparse-symbol function_parameters) [1183 1193]))              ) nil [1164 1213])
            ("monitor_closer" variable nil nil [1214 1246])
            ("_open_monitors" function nil nil [1370 1444])
            ("Monitor" type
               (:documentation "A configurable monitor for your training runs.

    Every env has an attached monitor, which you can access as
    'env.monitor'. Simple usage is just to call 'monitor.start(dir)'
    to begin monitoring and 'monitor.close()' when training is
    complete. This will record stats and will periodically record a video.

    For finer-grained control over how often videos are collected, use the
    video_callable argument, e.g.
    'monitor.start(video_callable=lambda count: count % 100 == 0)'
    to record every 100 episodes. ('count' is how many episodes have completed)

    Depending on the environment, video can slow down execution. You
    can also use 'monitor.configure(video_callable=lambda count: False)' to disable
    video.

    Monitor supports multiple threads and multiple processes writing
    to the same directory of training data. The data will later be
    joined by scoreboard.upload_training_data and on the server.

    Args:
        env (gym.Env): The environment instance to monitor.

    Attributes:
        id (Optional[str]): The ID of the monitored environment

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2616 2630])
                            ("self" variable nil (reparse-symbol indented_block_body) [2639 2655])
                            ("self" variable nil (reparse-symbol indented_block_body) [2665 2691])
                            ("self" variable nil (reparse-symbol indented_block_body) [2700 2726])
                            ("self" variable nil (reparse-symbol indented_block_body) [2735 2755])
                            ("self" variable nil (reparse-symbol indented_block_body) [2764 2783])
                            ("self" variable nil (reparse-symbol indented_block_body) [2792 2815])
                            ("self" variable nil (reparse-symbol indented_block_body) [2824 2841]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2596 2600])
                            ("env" variable nil (reparse-symbol function_parameters) [2602 2605]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2583 2842])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2857 2861])
                            ("directory" variable nil (reparse-symbol function_parameters) [2863 2872])
                            ("video_callable" variable nil (reparse-symbol function_parameters) [2874 2888])
                            ("force" variable nil (reparse-symbol function_parameters) [2895 2900])
                            ("resume" variable nil (reparse-symbol function_parameters) [2908 2914])
                            ("seed" variable nil (reparse-symbol function_parameters) [2922 2926]))                          
                        :documentation "Start monitoring.

        Args:
            directory (str): A per-training run directory where to record stats.
            video_callable (Optional[function, False]): function that takes in the index of the episode and outputs a boolean, indicating whether we should record a video on this episode. The default (for video_callable is None) is to take perfect cubes, capped at 1000. False disables video recording.
            force (bool): Clear out existing training data from this directory (by deleting every file prefixed with \"openaigym.\").
            resume (bool): Retain the training data already in this directory, which will be merged with our new data
            seed (Optional[int]): The seed to run this environment with. By default, a random seed will be chosen.
        ")
                        (reparse-symbol indented_block_body) [2847 5683])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5698 5702]))                          
                        :documentation "Flush all relevant monitor information to disk.")
                        (reparse-symbol indented_block_body) [5688 6715])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6730 6734]))                          
                        :documentation "Flush all monitor data to disk and close any open rending windows.")
                        (reparse-symbol indented_block_body) [6720 7976])
                    ("configure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7995 7999])
                            ("video_callable" variable nil (reparse-symbol function_parameters) [8001 8015]))                          
                        :documentation "Reconfigure the monitor.

            video_callable (function): Whether to record video to upload to the scoreboard.
        ")
                        (reparse-symbol indented_block_body) [7981 8253])
                    ("_before_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8275 8279])
                            ("action" variable nil (reparse-symbol function_parameters) [8281 8287]))                          )
                        (reparse-symbol indented_block_body) [8258 8374])
                    ("_after_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8395 8399])
                            ("observation" variable nil (reparse-symbol function_parameters) [8401 8412])
                            ("reward" variable nil (reparse-symbol function_parameters) [8414 8420])
                            ("done" variable nil (reparse-symbol function_parameters) [8422 8426])
                            ("info" variable nil (reparse-symbol function_parameters) [8428 8432]))                          )
                        (reparse-symbol indented_block_body) [8379 8961])
                    ("_before_reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8985 8989]))                          )
                        (reparse-symbol indented_block_body) [8967 9071])
                    ("_after_reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9093 9097])
                            ("observation" variable nil (reparse-symbol function_parameters) [9099 9110]))                          )
                        (reparse-symbol indented_block_body) [9076 9951])
                    ("_close_video_recorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9982 9986]))                          )
                        (reparse-symbol indented_block_body) [9956 10162])
                    ("_video_enabled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10186 10190]))                          )
                        (reparse-symbol indented_block_body) [10167 10245])
                    ("_env_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10264 10268]))                          )
                        (reparse-symbol indented_block_body) [10250 10446])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10463 10467]))                          )
                        (reparse-symbol indented_block_body) [10451 10556]))                  
                :type "class")
                nil [1445 10556])
            ("load_results" function (:arguments 
              ( ("training_dir" variable nil (reparse-symbol function_parameters) [10574 10586]))              ) nil [10557 12154])
            ("merge_stats_files" function (:arguments 
              ( ("stats_files" variable nil (reparse-symbol function_parameters) [12177 12188]))              ) nil [12155 12989])
            ("collapse_env_infos" function (:arguments 
              ( ("env_infos" variable nil (reparse-symbol function_parameters) [13013 13022])
                ("training_dir" variable nil (reparse-symbol function_parameters) [13024 13036]))              ) nil [12990 13636]))          
      :file "monitor.py"
      :pointmax 13636
      :fsize 13635
      :lastmodtime '(22352 35268 0 0)
      :unmatched-syntax '((INDENT_BLOCK 7333 . 7642) (NEWLINE 7332 . 7333) (COLON 7331 . 7332) (TRY 7257 . 7260) (AS 7327 . 7329))))
  :file "!Users!xiaoli!anaconda!lib!python2.7!site-packages!gym!monitoring!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
