;; Object gym/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "gym/"
  :tables
  (list
    (semanticdb-table "core.py"
      :major-mode 'python-mode
      :tags 
        '( ("logging" include nil nil [1 15])
            ("logger" variable nil nil [16 52])
            ("numpy" include nil nil [54 72])
            ("weakref" include nil nil [73 87])
            ("gym" include nil nil [89 122])
            ("gym.utils" include nil nil [123 160])
            ("env_closer" variable nil nil [162 190])
            ("Env" type
               (:documentation "The main OpenAI Gym class. It encapsulates an environment with
    arbitrary behind-the-scenes dynamics. An environment can be
    partially or fully observed.

    The main API methods that users of this class need to know are:

        step
        reset
        render
        close
        configure
        seed

    When implementing an environment, override the following methods
    in your subclass:

        _step
        _reset
        _render
        _close
        _configure
        _seed

    And set the following attributes:

        action_space: The Space object corresponding to valid actions
        observation_space: The Space object corresponding to valid observations
        reward_range: A tuple corresponding to the min and max possible rewards

    Note: a default reward range set to [-inf,+inf] already exists. Set it if you want a narrower range.

    The methods are accessed publicly as \"step\", \"reset\", etc.. The
    non-underscored versions are wrapper methods to which we may add
    functionality over time.
    "
                :superclasses ("object")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1317 1320])
                        ("args" variable nil (reparse-symbol function_parameters) [1322 1327])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [1329 1337]))                      ) (reparse-symbol indented_block_body) [1305 1778])
                    ("metadata" variable nil (reparse-symbol indented_block_body) [1817 1848])
                    ("reward_range" variable nil (reparse-symbol indented_block_body) [1853 1885])
                    ("_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1936 1940]))                          )
                        (reparse-symbol indented_block_body) [1925 1956])
                    ("_configure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1976 1980]))                          )
                        (reparse-symbol indented_block_body) [1961 1996])
                    ("action_space" variable nil (reparse-symbol indented_block_body) [2035 2054])
                    ("observation_space" variable nil (reparse-symbol indented_block_body) [2059 2083])
                    ("_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2132 2136])
                            ("action" variable nil (reparse-symbol function_parameters) [2138 2144]))                          )
                        (reparse-symbol indented_block_body) [2122 2173])
                    ("_reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2188 2192]))                          )
                        (reparse-symbol indented_block_body) [2177 2221])
                    ("_render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2237 2241])
                            ("mode" variable nil (reparse-symbol function_parameters) [2243 2247])
                            ("close" variable nil (reparse-symbol function_parameters) [2257 2262]))                          )
                        (reparse-symbol indented_block_body) [2225 2342])
                    ("_seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2356 2360])
                            ("seed" variable nil (reparse-symbol function_parameters) [2362 2366]))                          )
                        (reparse-symbol indented_block_body) [2346 2384])
                    ("_owns_render" variable nil (reparse-symbol indented_block_body) [2411 2430])
                    ("monitor" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2462 2466]))                          
                        :documentation "Lazily creates a monitor instance.

        We do this lazily rather than at environment creation time
        since when the monitor closes, we need remove the existing
        monitor but also make it easy to start a new one. We could
        still just forcibly create a new monitor instance on old
        monitor close, but that seems less clean.
        ")
                        (reparse-symbol indented_block_body) [2436 2968])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2982 2986])
                            ("action" variable nil (reparse-symbol function_parameters) [2988 2994]))                          
                        :documentation "Run one timestep of the environment's dynamics. When end of
        episode is reached, you are responsible for calling `reset()`
        to reset this environment's state.

        Accepts an action and returns a tuple (observation, reward, done, info).

        Args:
            action (object): an action provided by the environment

        Returns:
            observation (object): agent's observation of the current environment
            reward (float) : amount of reward returned after previous action
            done (boolean): whether the episode has ended, in which case further step() calls will return undefined results
            info (dict): contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)
        ")
                        (reparse-symbol indented_block_body) [2973 3996])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4011 4015]))                          
                        :documentation "Resets the state of the environment and returns an initial
        observation. Will call 'configure()' if not already called.

        Returns: observation (object): the initial observation of the
            space. (Initial reward is assumed to be 0.)
        ")
                        (reparse-symbol indented_block_body) [4001 4690])
                    ("render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4706 4710])
                            ("mode" variable nil (reparse-symbol function_parameters) [4712 4716])
                            ("close" variable nil (reparse-symbol function_parameters) [4726 4731]))                          
                        :documentation "Renders the environment.

        The set of supported modes varies per environment. (And some
        environments do not support rendering at all.) By convention,
        if mode is:

        - human: render to the current display or terminal and
          return nothing. Usually for human consumption.
        - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
          representing RGB values for an x-by-y pixel image, suitable
          for turning into a video.
        - ansi: Return a string (str) or StringIO.StringIO containing a
          terminal-style text representation. The text can include newlines
          and ANSI escape sequences (e.g. for colors).

        Note:
            Make sure that your class's metadata 'render.modes' key includes
              the list of supported modes. It's recommended to call super()
              in implementations to use the functionality of this method.

        Args:
            mode (str): the mode to render with
            close (bool): close all open renderings

        Example:

        class MyEnv(Env):
            metadata = {'render.modes': ['human', 'rgb_array']}

            def render(self, mode='human'):
                if mode == 'rgb_array':
                    return np.array(...) # return RGB frame suitable for video
                elif mode is 'human':
                    ... # pop up a window and render
                else:
                    super(MyEnv, self).render(mode=mode) # just raise an exception
        ")
                        (reparse-symbol indented_block_body) [4695 6814])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6829 6833]))                          
                        :documentation "Override _close in your subclass to perform any necessary cleanup.

        Environments will automatically close() themselves when
        garbage collected or when the program exits.
        ")
                        (reparse-symbol indented_block_body) [6819 7609])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7623 7627])
                            ("seed" variable nil (reparse-symbol function_parameters) [7629 7633]))                          
                        :documentation "Sets the seed for this env's random number generator(s).

        Note:
            Some environments use multiple pseudorandom number generators.
            We want to capture all such seeds used in order to ensure that
            there aren't accidental correlations between multiple generators.

        Returns:
            list<bigint>: Returns the list of seeds used in this env's random
              number generators. The first value in the list should be the
              \"main\" seed, or the value which a reproducer should pass to
              'seed'. Often, the main seed equals the provided 'seed', but
              this won't be true if seed=None, for example.
        ")
                        (reparse-symbol indented_block_body) [7614 8376])
                    ("configure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8395 8399])
                            ("args" variable nil (reparse-symbol function_parameters) [8401 8406])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8408 8416]))                          
                        :documentation "Provides runtime configuration to the environment.

        This configuration should consist of data that tells your
        environment how to run (such as an address of a remote server,
        or path to your ImageNet data). It should not affect the
        semantics of the environment.
        ")
                        (reparse-symbol indented_block_body) [8381 9174])
                    ("unwrapped" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9207 9211]))                          
                        :documentation "Completely unwrap this env.

        Notes:
            EXPERIMENTAL: may be removed in a later version of Gym

            This is a dynamic property in order to avoid refcycles.

        Returns:
            gym.Env: The base non-wrapped gym.Env instance
        ")
                        (reparse-symbol indented_block_body) [9179 9607])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9624 9628]))                          )
                        (reparse-symbol indented_block_body) [9612 9652])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9669 9673]))                          )
                        (reparse-symbol indented_block_body) [9657 9735]))                  
                :type "class")
                nil [220 9735])
            ("Space" type
               (:documentation "Defines the observation and action spaces, so you can write generic
    code that applies to any Env. For example, you can choose a random
    action.
    "
                :superclasses ("object")
                :members 
                  ( ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9969 9973])
                            ("seed" variable nil (reparse-symbol function_parameters) [9975 9979]))                          
                        :documentation "
        Uniformly randomly sample a random elemnt of this space
        ")
                        (reparse-symbol indented_block_body) [9958 10106])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10124 10128])
                            ("x" variable nil (reparse-symbol function_parameters) [10130 10131]))                          
                        :documentation "
        Return boolean specifying if x is a valid
        member of this space
        ")
                        (reparse-symbol indented_block_body) [10111 10271])
                    ("to_jsonable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10292 10296])
                            ("sample_n" variable nil (reparse-symbol function_parameters) [10298 10306]))                          
                        :documentation "Convert a batch of samples from this space to a JSONable data type.")
                        (reparse-symbol indented_block_body) [10276 10465])
                    ("from_jsonable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10488 10492])
                            ("sample_n" variable nil (reparse-symbol function_parameters) [10494 10502]))                          
                        :documentation "Convert a JSONable data type to a batch of samples from this space.")
                        (reparse-symbol indented_block_body) [10470 10661]))                  
                :type "class")
                nil [9766 10661])
            ("Wrapper" type
               (:superclasses ("Env")
                :members 
                  ( ("metadata" variable nil (reparse-symbol indented_block_body) [10749 10762])
                    ("_owns_render" variable nil (reparse-symbol indented_block_body) [10768 10788])
                    ("env" variable nil (reparse-symbol indented_block_body) [10872 10882])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10926 10940])
                            ("metadata" variable nil (reparse-symbol indented_block_body) [10988 11012])
                            ("self" variable nil (reparse-symbol indented_block_body) [11021 11061])
                            ("self" code nil (reparse-symbol indented_block_body) [11070 11100])
                            ("self" variable nil (reparse-symbol indented_block_body) [11110 11151])
                            ("self" variable nil (reparse-symbol indented_block_body) [11160 11211])
                            ("self" variable nil (reparse-symbol indented_block_body) [11220 11261])
                            ("self" variable nil (reparse-symbol indented_block_body) [11270 11296])
                            ("self" variable nil (reparse-symbol indented_block_body) [11305 11341]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10901 10905])
                            ("env" variable nil (reparse-symbol function_parameters) [10907 10910]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10888 11342])
                    ("_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11357 11361])
                            ("action" variable nil (reparse-symbol function_parameters) [11363 11369]))                          )
                        (reparse-symbol indented_block_body) [11347 11409])
                    ("_reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11425 11429]))                          )
                        (reparse-symbol indented_block_body) [11414 11464])
                    ("_render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11481 11485])
                            ("mode" variable nil (reparse-symbol function_parameters) [11487 11491])
                            ("close" variable nil (reparse-symbol function_parameters) [11501 11506]))                          )
                        (reparse-symbol indented_block_body) [11469 11607])
                    ("_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11623 11627]))                          )
                        (reparse-symbol indented_block_body) [11612 11710])
                    ("_configure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11730 11734])
                            ("args" variable nil (reparse-symbol function_parameters) [11736 11741])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11743 11751]))                          )
                        (reparse-symbol indented_block_body) [11715 11805])
                    ("_seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11820 11824])
                            ("seed" variable nil (reparse-symbol function_parameters) [11826 11830]))                          )
                        (reparse-symbol indented_block_body) [11810 11873])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11890 11894]))                          )
                        (reparse-symbol indented_block_body) [11878 11959])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11977 11981]))                          )
                        (reparse-symbol indented_block_body) [11964 12009])
                    ("spec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12037 12041]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12014 12140])
                    ("spec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12171 12175])
                            ("spec" variable nil (reparse-symbol function_parameters) [12177 12181]))                          
                        :decorators 
                          ( ("spec.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12145 12343]))                  
                :type "class")
                nil [10662 12343])
            ("ObservationWrapper" type
               (:superclasses ("Wrapper")
                :members 
                  ( ("_reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12394 12398]))                          )
                        (reparse-symbol indented_block_body) [12383 12486])
                    ("_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12501 12505])
                            ("action" variable nil (reparse-symbol function_parameters) [12507 12513]))                          )
                        (reparse-symbol indented_block_body) [12491 12645])
                    ("observation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12666 12670])
                            ("observation" variable nil (reparse-symbol function_parameters) [12672 12683]))                          )
                        (reparse-symbol indented_block_body) [12650 12732])
                    ("_observation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12754 12758])
                            ("observation" variable nil (reparse-symbol function_parameters) [12760 12771]))                          )
                        (reparse-symbol indented_block_body) [12737 12808]))                  
                :type "class")
                nil [12344 12808])
            ("RewardWrapper" type
               (:superclasses ("Wrapper")
                :members 
                  ( ("_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12853 12857])
                            ("action" variable nil (reparse-symbol function_parameters) [12859 12865]))                          )
                        (reparse-symbol indented_block_body) [12843 12992])
                    ("reward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13008 13012])
                            ("reward" variable nil (reparse-symbol function_parameters) [13014 13020]))                          )
                        (reparse-symbol indented_block_body) [12997 13059])
                    ("_reward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13076 13080])
                            ("reward" variable nil (reparse-symbol function_parameters) [13082 13088]))                          )
                        (reparse-symbol indented_block_body) [13064 13125]))                  
                :type "class")
                nil [12809 13125])
            ("ActionWrapper" type
               (:superclasses ("Wrapper")
                :members 
                  ( ("_step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13170 13174])
                            ("action" variable nil (reparse-symbol function_parameters) [13176 13182]))                          )
                        (reparse-symbol indented_block_body) [13160 13259])
                    ("action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13275 13279])
                            ("action" variable nil (reparse-symbol function_parameters) [13281 13287]))                          )
                        (reparse-symbol indented_block_body) [13264 13326])
                    ("_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13343 13347])
                            ("action" variable nil (reparse-symbol function_parameters) [13349 13355]))                          )
                        (reparse-symbol indented_block_body) [13331 13392])
                    ("reverse_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13416 13420])
                            ("action" variable nil (reparse-symbol function_parameters) [13422 13428]))                          )
                        (reparse-symbol indented_block_body) [13397 13475])
                    ("_reverse_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13500 13504])
                            ("action" variable nil (reparse-symbol function_parameters) [13506 13512]))                          )
                        (reparse-symbol indented_block_body) [13480 13549]))                  
                :type "class")
                nil [13126 13549]))          
      :file "core.py"
      :pointmax 13549
      :unmatched-syntax '((INDENT_BLOCK 9044 . 9174) (NEWLINE 8856 . 8857) (COLON 8855 . 8856) (TRY 8776 . 8779) (AS 8851 . 8853)))
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("distutils.version" include nil nil [1 25])
            ("logging" include nil nil [26 40])
            ("sys" include nil nil [41 51])
            ("gym" include nil nil [53 74])
            ("gym.configuration" include nil nil [75 136])
            ("gym.utils" include nil nil [137 166])
            ("logger" variable nil nil [168 204])
            ("sanity_check_dependencies" function nil nil [311 924])
            ("logger_setup" code nil nil [1827 1841])
            ("del" code nil nil [1842 1858])
            ("sanity_check_dependencies" code nil nil [1860 1887])
            ("gym.core" include nil nil [1889 1979])
            ("gym.benchmarks" include nil nil [1980 2021])
            ("gym.envs" include nil nil [2022 2053])
            ("gym.scoreboard.api" include nil nil [2054 2091])
            ("__all__" variable nil nil [2093 2156]))          
      :file "__init__.py"
      :pointmax 2157
      :unmatched-syntax nil)


    (semanticdb-table "setup.py"
      :major-mode 'python-mode
      :tags 
        '( ("setuptools" include nil nil [1 44])
            ("os.path" include nil nil [45 64])
            ("sys" include nil nil [45 64])
            ("sys" code nil nil [130 196])
            ("version" include nil nil [197 224])
            ("extras" variable nil nil [263 520])
            ("all_deps" variable nil nil [548 561])
            ("for" code nil nil [562 623])
            ("extras" variable nil nil [623 647])
            ("setup" code nil nil [649 1314]))          
      :file "setup.py"
      :pointmax 1315
      :fsize 1314
      :lastmodtime '(22791 23400 0 0)
      :unmatched-syntax nil))
  :file "!Users!xiaoli!Dropbox!PHD_research!projects!RLFPS!gym!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
