;; Object gps/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "gps/"
  :tables
  (list
    (semanticdb-table "gps_main.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\" This file defines the main object that runs experiments. \"\"\"" code nil nil [1 65])
            ("matplotlib" include nil nil [67 91])
            ("mpl" code nil nil [92 109])
            ("logging" include nil nil [111 125])
            ("imp" include nil nil [126 136])
            ("os" include nil nil [137 146])
            ("os.path" include nil nil [147 161])
            ("sys" include nil nil [162 172])
            ("copy" include nil nil [173 184])
            ("argparse" include nil nil [185 200])
            ("threading" include nil nil [201 217])
            ("time" include nil nil [218 229])
            ("sys" code nil nil [278 334])
            ("gps.gui.gps_training_gui" include nil nil [335 386])
            ("gps.utility.data_logger" include nil nil [387 433])
            ("gps.sample.sample_list" include nil nil [434 479])
            ("GPSMain" type
               (:documentation " Main class to run algorithms and experiments. "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize GPSMain
        Args:
            config: Hyperparameters for experiment
            quit_on_end: When true, quit automatically on completion
        \"\"\"" code nil (reparse-symbol indented_block_body) [622 798])
                            ("self" variable nil (reparse-symbol indented_block_body) [807 838])
                            ("self" variable nil (reparse-symbol indented_block_body) [847 873])
                            ("self" variable nil (reparse-symbol indented_block_body) [882 931])
                            ("if" code nil (reparse-symbol indented_block_body) [940 1347])
                            ("self" variable nil (reparse-symbol indented_block_body) [1356 1413])
                            ("self" variable nil (reparse-symbol indented_block_body) [1423 1476])
                            ("self" variable nil (reparse-symbol indented_block_body) [1485 1516])
                            ("None" code nil (reparse-symbol indented_block_body) [1594 1598])
                            ("config" variable nil (reparse-symbol indented_block_body) [1608 1649])
                            ("self" variable nil (reparse-symbol indented_block_body) [1658 1723]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [580 584])
                            ("config" variable nil (reparse-symbol function_parameters) [586 592])
                            ("quit_on_end" variable nil (reparse-symbol function_parameters) [594 605]))                          
                        :documentation "
        Initialize GPSMain
        Args:
            config: Hyperparameters for experiment
            quit_on_end: When true, quit automatically on completion
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [567 1724])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1737 1741])
                            ("itr_load" variable nil (reparse-symbol function_parameters) [1743 1751]))                          
                        :documentation "
        Run training by iteratively sampling and taking an iteration.
        Args:
            itr_load: If specified, loads algorithm state from that
                iteration, and resumes training at the next iteration.
        Returns: None
        ")
                        (reparse-symbol indented_block_body) [1729 2760])
                    ("test_policy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2781 2785])
                            ("itr" variable nil (reparse-symbol function_parameters) [2787 2790])
                            ("N" variable nil (reparse-symbol function_parameters) [2792 2793]))                          
                        :documentation "
        Take N policy samples of the algorithm state at iteration itr,
        for testing the policy to see how it is behaving.
        (Called directly from the command line --policy flag).
        Args:
            itr: the iteration from which to take policy samples
            N: the number of policy samples to take
        Returns: None
        ")
                        (reparse-symbol indented_block_body) [2765 4156])
                    ("_initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4177 4181])
                            ("itr_load" variable nil (reparse-symbol function_parameters) [4183 4191]))                          
                        :documentation "
        Initialize from the specified iteration.
        Args:
            itr_load: If specified, loads algorithm state from that
                iteration, and resumes training at the next iteration.
        Returns:
            itr_start: Iteration to start from.
        ")
                        (reparse-symbol indented_block_body) [4161 5648])
                    ("_take_sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5670 5674])
                            ("itr" variable nil (reparse-symbol function_parameters) [5676 5679])
                            ("cond" variable nil (reparse-symbol function_parameters) [5681 5685])
                            ("i" variable nil (reparse-symbol function_parameters) [5687 5688]))                          
                        :documentation "
        Collect a sample from the agent.
        Args:
            itr: Iteration number.
            cond: Condition number.
            i: Sample number.
        Returns: None
        ")
                        (reparse-symbol indented_block_body) [5653 7714])
                    ("_take_iteration" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7739 7743])
                            ("itr" variable nil (reparse-symbol function_parameters) [7745 7748])
                            ("sample_lists" variable nil (reparse-symbol function_parameters) [7750 7762]))                          
                        :documentation "
        Take an iteration of the algorithm.
        Args:
            itr: Iteration number.
        Returns: None
        ")
                        (reparse-symbol indented_block_body) [7719 8143])
                    ("_take_policy_samples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8173 8177])
                            ("N" variable nil (reparse-symbol function_parameters) [8179 8180]))                          
                        :documentation "
        Take samples from the policy to see how it's doing.
        Args:
            N  : number of policy samples to take per condition
        Returns: None
        ")
                        (reparse-symbol indented_block_body) [8148 9149])
                    ("_log_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9168 9172])
                            ("itr" variable nil (reparse-symbol function_parameters) [9174 9177])
                            ("traj_sample_lists" variable nil (reparse-symbol function_parameters) [9179 9196])
                            ("pol_sample_lists" variable nil (reparse-symbol function_parameters) [9198 9214]))                          
                        :documentation "
        Log data and algorithm, and update the GUI.
        Args:
            itr: Iteration number.
            traj_sample_lists: trajectory samples as SampleList object
            pol_sample_lists: policy samples as SampleList object
        Returns: None
        ")
                        (reparse-symbol indented_block_body) [9154 10414])
                    ("_end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10428 10432]))                          
                        :documentation " Finish running and exit. ")
                        (reparse-symbol indented_block_body) [10419 10718]))                  
                :type "class")
                nil [482 10718])
            ("main" function (:documentation " Main function to be run. ") nil [10719 15865])
            ("if" code nil nil [15867 15905]))          
      :file "gps_main.py"
      :pointmax 15905
      :fsize 15904
      :lastmodtime '(22662 41196 0 0)
      :unmatched-syntax nil))
  :file "!Users!xiaoli!Dropbox!PHD_research!projects!RLFPS!gps!python!gps!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
