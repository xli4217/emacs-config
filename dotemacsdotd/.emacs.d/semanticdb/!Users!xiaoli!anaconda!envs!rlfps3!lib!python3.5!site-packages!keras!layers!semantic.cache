;; Object layers/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "layers/"
  :tables
  (list
    (semanticdb-table "convolutional.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [25 63])
            ("backend" include nil nil [73 92])
            ("activations" include nil nil [101 119])
            ("initializers" include nil nil [128 147])
            ("regularizers" include nil nil [156 175])
            ("constraints" include nil nil [184 202])
            ("Layer" include nil nil [217 229])
            ("InputSpec" include nil nil [244 260])
            ("conv_utils" include nil nil [274 291])
            ("interfaces" include nil nil [306 323])
            ("AveragePooling1D" include nil nil [387 410])
            ("AveragePooling2D" include nil nil [425 448])
            ("AveragePooling3D" include nil nil [463 486])
            ("MaxPooling1D" include nil nil [501 520])
            ("MaxPooling2D" include nil nil [535 554])
            ("MaxPooling3D" include nil nil [569 588])
            ("AtrousConvolution1D" include nil nil [611 637])
            ("AtrousConvolution2D" include nil nil [659 685])
            ("_Conv" type
               (:documentation "Abstract nD convolution layer (private, used as implementation base).

    This layer creates a convolution kernel that is convolved
    with the layer input to produce a tensor of outputs.
    If `use_bias` is True, a bias vector is created and added to the outputs.
    Finally, if `activation` is not `None`,
    it is applied to the outputs as well.

    # Arguments
        rank: An integer, the rank of the convolution,
            e.g. \"2\" for 2D convolution.
        filters: Integer, the dimensionality of the output space
            (i.e. the number output of filters in the convolution).
        kernel_size: An integer or tuple/list of n integers, specifying the
            dimensions of the convolution window.
        strides: An integer or tuple/list of n integers,
            specifying the strides of the convolution.
            Specifying any stride value != 1 is incompatible with specifying
            any `dilation_rate` value != 1.
        padding: One of `\"valid\"` or `\"same\"` (case-insensitive).
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, ..., channels)` while `channels_first` corresponds to
            inputs with shape `(batch, channels, ...)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".
        dilation_rate: An integer or tuple/list of n integers, specifying
            the dilation rate to use for dilated convolution.
            Currently, specifying any `dilation_rate` value != 1 is
            incompatible with specifying any `strides` value != 1.
        activation: Activation function to use
            (see [activations](../activations.md)).
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: `a(x) = x`).
        use_bias: Boolean, whether the layer uses a bias vector.
        kernel_initializer: Initializer for the `kernel` weights matrix
            (see [initializers](../initializers.md)).
        bias_initializer: Initializer for the bias vector
            (see [initializers](../initializers.md)).
        kernel_regularizer: Regularizer function applied to
            the `kernel` weights matrix
            (see [regularizer](../regularizers.md)).
        bias_regularizer: Regularizer function applied to the bias vector
            (see [regularizer](../regularizers.md)).
        activity_regularizer: Regularizer function applied to
            the output of the layer (its \"activation\").
            (see [regularizer](../regularizers.md)).
        kernel_constraint: Constraint function applied to the kernel matrix
            (see [constraints](../constraints.md)).
        bias_constraint: Constraint function applied to the bias vector
            (see [constraints](../constraints.md)).
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [4405 4442])
                            ("self" variable nil (reparse-symbol indented_block_body) [4451 4467])
                            ("self" variable nil (reparse-symbol indented_block_body) [4476 4498])
                            ("self" variable nil (reparse-symbol indented_block_body) [4507 4586])
                            ("self" variable nil (reparse-symbol indented_block_body) [4595 4662])
                            ("self" variable nil (reparse-symbol indented_block_body) [4671 4723])
                            ("self" variable nil (reparse-symbol indented_block_body) [4732 4796])
                            ("self" variable nil (reparse-symbol indented_block_body) [4805 4890])
                            ("self" variable nil (reparse-symbol indented_block_body) [4899 4944])
                            ("self" variable nil (reparse-symbol indented_block_body) [4953 4977])
                            ("self" variable nil (reparse-symbol indented_block_body) [4986 5048])
                            ("self" variable nil (reparse-symbol indented_block_body) [5057 5115])
                            ("self" variable nil (reparse-symbol indented_block_body) [5124 5186])
                            ("self" variable nil (reparse-symbol indented_block_body) [5195 5253])
                            ("self" variable nil (reparse-symbol indented_block_body) [5262 5328])
                            ("self" variable nil (reparse-symbol indented_block_body) [5337 5396])
                            ("self" variable nil (reparse-symbol indented_block_body) [5405 5460])
                            ("self" variable nil (reparse-symbol indented_block_body) [5469 5516]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3801 3805])
                            ("rank" variable nil (reparse-symbol function_parameters) [3807 3811])
                            ("filters" variable nil (reparse-symbol function_parameters) [3830 3837])
                            ("kernel_size" variable nil (reparse-symbol function_parameters) [3856 3867])
                            ("strides" variable nil (reparse-symbol function_parameters) [3886 3893])
                            ("padding" variable nil (reparse-symbol function_parameters) [3914 3921])
                            ("data_format" variable nil (reparse-symbol function_parameters) [3948 3959])
                            ("dilation_rate" variable nil (reparse-symbol function_parameters) [3983 3996])
                            ("activation" variable nil (reparse-symbol function_parameters) [4017 4027])
                            ("use_bias" variable nil (reparse-symbol function_parameters) [4051 4059])
                            ("kernel_initializer" variable nil (reparse-symbol function_parameters) [4083 4101])
                            ("bias_initializer" variable nil (reparse-symbol function_parameters) [4137 4153])
                            ("kernel_regularizer" variable nil (reparse-symbol function_parameters) [4180 4198])
                            ("bias_regularizer" variable nil (reparse-symbol function_parameters) [4222 4238])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [4262 4282])
                            ("kernel_constraint" variable nil (reparse-symbol function_parameters) [4306 4323])
                            ("bias_constraint" variable nil (reparse-symbol function_parameters) [4347 4362])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4386 4394]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3788 5517])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5532 5536])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [5538 5549]))                          )
                        (reparse-symbol indented_block_body) [5522 6874])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6888 6892])
                            ("inputs" variable nil (reparse-symbol function_parameters) [6894 6900]))                          )
                        (reparse-symbol indented_block_body) [6879 8028])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8058 8062])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [8064 8075]))                          )
                        (reparse-symbol indented_block_body) [8033 9142])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9162 9166]))                          )
                        (reparse-symbol indented_block_body) [9147 10274]))                  
                :type "class")
                nil [688 10274])
            ("Conv1D" type
               (:documentation "1D convolution layer (e.g. temporal convolution).

    This layer creates a convolution kernel that is convolved
    with the layer input over a single spatial (or temporal) dimension
    to produce a tensor of outputs.
    If `use_bias` is True, a bias vector is created and added to the outputs.
    Finally, if `activation` is not `None`,
    it is applied to the outputs as well.

    When using this layer as the first layer in a model,
    provide an `input_shape` argument
    (tuple of integers or `None`, e.g.
    `(10, 128)` for sequences of 10 vectors of 128-dimensional vectors,
    or `(None, 128)` for variable-length sequences of 128-dimensional vectors.

    # Arguments
        filters: Integer, the dimensionality of the output space
            (i.e. the number output of filters in the convolution).
        kernel_size: An integer or tuple/list of a single integer,
            specifying the length of the 1D convolution window.
        strides: An integer or tuple/list of a single integer,
            specifying the stride length of the convolution.
            Specifying any stride value != 1 is incompatible with specifying
            any `dilation_rate` value != 1.
        padding: One of `\"valid\"`, `\"causal\"` or `\"same\"` (case-insensitive).
            `\"causal\"` results in causal (dilated) convolutions, e.g. output[t]
            depends solely on input[:t-1]. Useful when modeling temporal data
            where the model should not violate the temporal order.
            See [WaveNet: A Generative Model for Raw Audio, section 2.1](https://arxiv.org/abs/1609.03499).
        dilation_rate: an integer or tuple/list of a single integer, specifying
            the dilation rate to use for dilated convolution.
            Currently, specifying any `dilation_rate` value != 1 is
            incompatible with specifying any `strides` value != 1.
        activation: Activation function to use
            (see [activations](../activations.md)).
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: `a(x) = x`).
        use_bias: Boolean, whether the layer uses a bias vector.
        kernel_initializer: Initializer for the `kernel` weights matrix
            (see [initializers](../initializers.md)).
        bias_initializer: Initializer for the bias vector
            (see [initializers](../initializers.md)).
        kernel_regularizer: Regularizer function applied to
            the `kernel` weights matrix
            (see [regularizer](../regularizers.md)).
        bias_regularizer: Regularizer function applied to the bias vector
            (see [regularizer](../regularizers.md)).
        activity_regularizer: Regularizer function applied to
            the output of the layer (its \"activation\").
            (see [regularizer](../regularizers.md)).
        kernel_constraint: Constraint function applied to the kernel matrix
            (see [constraints](../constraints.md)).
        bias_constraint: Constraint function applied to the bias vector
            (see [constraints](../constraints.md)).

    # Input shape
        3D tensor with shape: `(batch_size, steps, input_dim)`

    # Output shape
        3D tensor with shape: `(batch_size, new_steps, filters)`
        `steps` value might have changed due to padding or strides.
    "
                :superclasses ("_Conv")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [14257 14945])
                            ("self" variable nil (reparse-symbol indented_block_body) [14954 14989]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13711 13715])
                            ("filters" variable nil (reparse-symbol function_parameters) [13717 13724])
                            ("kernel_size" variable nil (reparse-symbol function_parameters) [13743 13754])
                            ("strides" variable nil (reparse-symbol function_parameters) [13773 13780])
                            ("padding" variable nil (reparse-symbol function_parameters) [13801 13808])
                            ("dilation_rate" variable nil (reparse-symbol function_parameters) [13835 13848])
                            ("activation" variable nil (reparse-symbol function_parameters) [13869 13879])
                            ("use_bias" variable nil (reparse-symbol function_parameters) [13903 13911])
                            ("kernel_initializer" variable nil (reparse-symbol function_parameters) [13935 13953])
                            ("bias_initializer" variable nil (reparse-symbol function_parameters) [13989 14005])
                            ("kernel_regularizer" variable nil (reparse-symbol function_parameters) [14032 14050])
                            ("bias_regularizer" variable nil (reparse-symbol function_parameters) [14074 14090])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [14114 14134])
                            ("kernel_constraint" variable nil (reparse-symbol function_parameters) [14158 14175])
                            ("bias_constraint" variable nil (reparse-symbol function_parameters) [14199 14214])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14238 14246]))                          
                        :decorators 
                          ( ("interfaces.legacy_conv1d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13660 14990])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15010 15014]))                          )
                        (reparse-symbol indented_block_body) [14995 15150]))                  
                :type "class")
                nil [10276 15150])
            ("Conv2D" type
               (:documentation "2D convolution layer (e.g. spatial convolution over images).

    This layer creates a convolution kernel that is convolved
    with the layer input to produce a tensor of
    outputs. If `use_bias` is True,
    a bias vector is created and added to the outputs. Finally, if
    `activation` is not `None`, it is applied to the outputs as well.

    When using this layer as the first layer in a model,
    provide the keyword argument `input_shape`
    (tuple of integers, does not include the sample axis),
    e.g. `input_shape=(128, 128, 3)` for 128x128 RGB pictures
    in `data_format=\"channels_last\"`.

    # Arguments
        filters: Integer, the dimensionality of the output space
            (i.e. the number output of filters in the convolution).
        kernel_size: An integer or tuple/list of 2 integers, specifying the
            width and height of the 2D convolution window.
            Can be a single integer to specify the same value for
            all spatial dimensions.
        strides: An integer or tuple/list of 2 integers,
            specifying the strides of the convolution along the width and height.
            Can be a single integer to specify the same value for
            all spatial dimensions.
            Specifying any stride value != 1 is incompatible with specifying
            any `dilation_rate` value != 1.
        padding: one of `\"valid\"` or `\"same\"` (case-insensitive).
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".
        dilation_rate: an integer or tuple/list of 2 integers, specifying
            the dilation rate to use for dilated convolution.
            Can be a single integer to specify the same value for
            all spatial dimensions.
            Currently, specifying any `dilation_rate` value != 1 is
            incompatible with specifying any stride value != 1.
        activation: Activation function to use
            (see [activations](../activations.md)).
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: `a(x) = x`).
        use_bias: Boolean, whether the layer uses a bias vector.
        kernel_initializer: Initializer for the `kernel` weights matrix
            (see [initializers](../initializers.md)).
        bias_initializer: Initializer for the bias vector
            (see [initializers](../initializers.md)).
        kernel_regularizer: Regularizer function applied to
            the `kernel` weights matrix
            (see [regularizer](../regularizers.md)).
        bias_regularizer: Regularizer function applied to the bias vector
            (see [regularizer](../regularizers.md)).
        activity_regularizer: Regularizer function applied to
            the output of the layer (its \"activation\").
            (see [regularizer](../regularizers.md)).
        kernel_constraint: Constraint function applied to the kernel matrix
            (see [constraints](../constraints.md)).
        bias_constraint: Constraint function applied to the bias vector
            (see [constraints](../constraints.md)).

    # Input shape
        4D tensor with shape:
        `(samples, channels, rows, cols)` if data_format='channels_first'
        or 4D tensor with shape:
        `(samples, rows, cols, channels)` if data_format='channels_last'.

    # Output shape
        4D tensor with shape:
        `(samples, filters, new_rows, new_cols)` if data_format='channels_first'
        or 4D tensor with shape:
        `(samples, new_rows, new_cols, filters)` if data_format='channels_last'.
        `rows` and `cols` values might have changed due to padding.
    "
                :superclasses ("_Conv")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [19968 20652])
                            ("self" variable nil (reparse-symbol indented_block_body) [20661 20696]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19377 19381])
                            ("filters" variable nil (reparse-symbol function_parameters) [19383 19390])
                            ("kernel_size" variable nil (reparse-symbol function_parameters) [19409 19420])
                            ("strides" variable nil (reparse-symbol function_parameters) [19439 19446])
                            ("padding" variable nil (reparse-symbol function_parameters) [19472 19479])
                            ("data_format" variable nil (reparse-symbol function_parameters) [19506 19517])
                            ("dilation_rate" variable nil (reparse-symbol function_parameters) [19541 19554])
                            ("activation" variable nil (reparse-symbol function_parameters) [19580 19590])
                            ("use_bias" variable nil (reparse-symbol function_parameters) [19614 19622])
                            ("kernel_initializer" variable nil (reparse-symbol function_parameters) [19646 19664])
                            ("bias_initializer" variable nil (reparse-symbol function_parameters) [19700 19716])
                            ("kernel_regularizer" variable nil (reparse-symbol function_parameters) [19743 19761])
                            ("bias_regularizer" variable nil (reparse-symbol function_parameters) [19785 19801])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [19825 19845])
                            ("kernel_constraint" variable nil (reparse-symbol function_parameters) [19869 19886])
                            ("bias_constraint" variable nil (reparse-symbol function_parameters) [19910 19925])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19949 19957]))                          
                        :decorators 
                          ( ("interfaces.legacy_conv2d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19326 20697])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20717 20721]))                          )
                        (reparse-symbol indented_block_body) [20702 20823]))                  
                :type "class")
                nil [15152 20823])
            ("Conv3D" type
               (:documentation "3D convolution layer (e.g. spatial convolution over volumes).

    This layer creates a convolution kernel that is convolved
    with the layer input to produce a tensor of
    outputs. If `use_bias` is True,
    a bias vector is created and added to the outputs. Finally, if
    `activation` is not `None`, it is applied to the outputs as well.

    When using this layer as the first layer in a model,
    provide the keyword argument `input_shape`
    (tuple of integers, does not include the sample axis),
    e.g. `input_shape=(128, 128, 128, 3)` for 128x128x128 volumes
    with a single channel,
    in `data_format=\"channels_last\"`.

    # Arguments
        filters: Integer, the dimensionality of the output space
            (i.e. the number output of filters in the convolution).
        kernel_size: An integer or tuple/list of 3 integers, specifying the
            width and height of the 3D convolution window.
            Can be a single integer to specify the same value for
            all spatial dimensions.
        strides: An integer or tuple/list of 3 integers,
            specifying the strides of the convolution along each spatial dimension.
            Can be a single integer to specify the same value for
            all spatial dimensions.
            Specifying any stride value != 1 is incompatible with specifying
            any `dilation_rate` value != 1.
        padding: one of `\"valid\"` or `\"same\"` (case-insensitive).
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
            while `channels_first` corresponds to inputs with shape
            `(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".
        dilation_rate: an integer or tuple/list of 3 integers, specifying
            the dilation rate to use for dilated convolution.
            Can be a single integer to specify the same value for
            all spatial dimensions.
            Currently, specifying any `dilation_rate` value != 1 is
            incompatible with specifying any stride value != 1.
        activation: Activation function to use
            (see [activations](../activations.md)).
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: `a(x) = x`).
        use_bias: Boolean, whether the layer uses a bias vector.
        kernel_initializer: Initializer for the `kernel` weights matrix
            (see [initializers](../initializers.md)).
        bias_initializer: Initializer for the bias vector
            (see [initializers](../initializers.md)).
        kernel_regularizer: Regularizer function applied to
            the `kernel` weights matrix
            (see [regularizer](../regularizers.md)).
        bias_regularizer: Regularizer function applied to the bias vector
            (see [regularizer](../regularizers.md)).
        activity_regularizer: Regularizer function applied to
            the output of the layer (its \"activation\").
            (see [regularizer](../regularizers.md)).
        kernel_constraint: Constraint function applied to the kernel matrix
            (see [constraints](../constraints.md)).
        bias_constraint: Constraint function applied to the bias vector
            (see [constraints](../constraints.md)).

    # Input shape
        5D tensor with shape:
        `(samples, channels, conv_dim1, conv_dim2, conv_dim3)` if data_format='channels_first'
        or 5D tensor with shape:
        `(samples, conv_dim1, conv_dim2, conv_dim3, channels)` if data_format='channels_last'.

    # Output shape
        5D tensor with shape:
        `(samples, filters, new_conv_dim1, new_conv_dim2, new_conv_dim3)` if data_format='channels_first'
        or 5D tensor with shape:
        `(samples, new_conv_dim1, new_conv_dim2, new_conv_dim3, filters)` if data_format='channels_last'.
        `new_conv_dim1`, `new_conv_dim2` and `new_conv_dim3` values might have changed due to padding.
    "
                :superclasses ("_Conv")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [25862 26546])
                            ("self" variable nil (reparse-symbol indented_block_body) [26555 26590]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25265 25269])
                            ("filters" variable nil (reparse-symbol function_parameters) [25271 25278])
                            ("kernel_size" variable nil (reparse-symbol function_parameters) [25297 25308])
                            ("strides" variable nil (reparse-symbol function_parameters) [25327 25334])
                            ("padding" variable nil (reparse-symbol function_parameters) [25363 25370])
                            ("data_format" variable nil (reparse-symbol function_parameters) [25397 25408])
                            ("dilation_rate" variable nil (reparse-symbol function_parameters) [25432 25445])
                            ("activation" variable nil (reparse-symbol function_parameters) [25474 25484])
                            ("use_bias" variable nil (reparse-symbol function_parameters) [25508 25516])
                            ("kernel_initializer" variable nil (reparse-symbol function_parameters) [25540 25558])
                            ("bias_initializer" variable nil (reparse-symbol function_parameters) [25594 25610])
                            ("kernel_regularizer" variable nil (reparse-symbol function_parameters) [25637 25655])
                            ("bias_regularizer" variable nil (reparse-symbol function_parameters) [25679 25695])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [25719 25739])
                            ("kernel_constraint" variable nil (reparse-symbol function_parameters) [25763 25780])
                            ("bias_constraint" variable nil (reparse-symbol function_parameters) [25804 25819])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25843 25851]))                          
                        :decorators 
                          ( ("interfaces.legacy_conv3d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25214 26591])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26611 26615]))                          )
                        (reparse-symbol indented_block_body) [26596 26717]))                  
                :type "class")
                nil [20825 26717])
            ("Conv2DTranspose" type
               (:documentation "Transposed convolution layer (sometimes called Deconvolution).

    The need for transposed convolutions generally arises
    from the desire to use a transformation going in the opposite direction
    of a normal convolution, i.e., from something that has the shape of the
    output of some convolution to something that has the shape of its input
    while maintaining a connectivity pattern that is compatible with
    said convolution.

    When using this layer as the first layer in a model,
    provide the keyword argument `input_shape`
    (tuple of integers, does not include the sample axis),
    e.g. `input_shape=(128, 128, 3)` for 128x128 RGB pictures
    in `data_format=\"channels_last\"`.

    # Arguments
        filters: Integer, the dimensionality of the output space
            (i.e. the number output of filters in the convolution).
        kernel_size: An integer or tuple/list of 2 integers, specifying the
            width and height of the 2D convolution window.
            Can be a single integer to specify the same value for
            all spatial dimensions.
        strides: An integer or tuple/list of 2 integers,
            specifying the strides of the convolution along the width and height.
            Can be a single integer to specify the same value for
            all spatial dimensions.
            Specifying any stride value != 1 is incompatible with specifying
            any `dilation_rate` value != 1.
        padding: one of `\"valid\"` or `\"same\"` (case-insensitive).
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".
        dilation_rate: an integer or tuple/list of 2 integers, specifying
            the dilation rate to use for dilated convolution.
            Can be a single integer to specify the same value for
            all spatial dimensions.
            Currently, specifying any `dilation_rate` value != 1 is
            incompatible with specifying any stride value != 1.
        activation: Activation function to use
            (see [activations](../activations.md)).
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: `a(x) = x`).
        use_bias: Boolean, whether the layer uses a bias vector.
        kernel_initializer: Initializer for the `kernel` weights matrix
            (see [initializers](../initializers.md)).
        bias_initializer: Initializer for the bias vector
            (see [initializers](../initializers.md)).
        kernel_regularizer: Regularizer function applied to
            the `kernel` weights matrix
            (see [regularizer](../regularizers.md)).
        bias_regularizer: Regularizer function applied to the bias vector
            (see [regularizer](../regularizers.md)).
        activity_regularizer: Regularizer function applied to
            the output of the layer (its \"activation\").
            (see [regularizer](../regularizers.md)).
        kernel_constraint: Constraint function applied to the kernel matrix
            (see [constraints](../constraints.md)).
        bias_constraint: Constraint function applied to the bias vector
            (see [constraints](../constraints.md)).

    # Input shape
        4D tensor with shape:
        `(batch, channels, rows, cols)` if data_format='channels_first'
        or 4D tensor with shape:
        `(batch, rows, cols, channels)` if data_format='channels_last'.

    # Output shape
        4D tensor with shape:
        `(batch, filters, new_rows, new_cols)` if data_format='channels_first'
        or 4D tensor with shape:
        `(batch, new_rows, new_cols, filters)` if data_format='channels_last'.
        `rows` and `cols` values might have changed due to padding.

    # References
        - [A guide to convolution arithmetic for deep learning](https://arxiv.org/abs/1603.07285v1)
        - [Deconvolutional Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)
    "
                :superclasses ("Conv2D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [31819 32431])
                            ("self" variable nil (reparse-symbol indented_block_body) [32440 32475]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31256 31260])
                            ("filters" variable nil (reparse-symbol function_parameters) [31262 31269])
                            ("kernel_size" variable nil (reparse-symbol function_parameters) [31288 31299])
                            ("strides" variable nil (reparse-symbol function_parameters) [31318 31325])
                            ("padding" variable nil (reparse-symbol function_parameters) [31351 31358])
                            ("data_format" variable nil (reparse-symbol function_parameters) [31385 31396])
                            ("activation" variable nil (reparse-symbol function_parameters) [31431 31441])
                            ("use_bias" variable nil (reparse-symbol function_parameters) [31465 31473])
                            ("kernel_initializer" variable nil (reparse-symbol function_parameters) [31497 31515])
                            ("bias_initializer" variable nil (reparse-symbol function_parameters) [31551 31567])
                            ("kernel_regularizer" variable nil (reparse-symbol function_parameters) [31594 31612])
                            ("bias_regularizer" variable nil (reparse-symbol function_parameters) [31636 31652])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [31676 31696])
                            ("kernel_constraint" variable nil (reparse-symbol function_parameters) [31720 31737])
                            ("bias_constraint" variable nil (reparse-symbol function_parameters) [31761 31776])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31800 31808]))                          
                        :decorators 
                          ( ("interfaces.legacy_deconv2d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31203 32476])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32491 32495])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [32497 32508]))                          )
                        (reparse-symbol indented_block_body) [32481 33989])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34003 34007])
                            ("inputs" variable nil (reparse-symbol function_parameters) [34009 34015]))                          )
                        (reparse-symbol indented_block_body) [33994 35468])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35498 35502])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [35504 35515]))                          )
                        (reparse-symbol indented_block_body) [35473 36131])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36151 36155]))                          )
                        (reparse-symbol indented_block_body) [36136 36275]))                  
                :type "class")
                nil [26719 36275])
            ("SeparableConv2D" type
               (:documentation "Depthwise separable 2D convolution.

    Separable convolutions consist in first performing
    a depthwise spatial convolution
    (which acts on each input channel separately)
    followed by a pointwise convolution which mixes together the resulting
    output channels. The `depth_multiplier` argument controls how many
    output channels are generated per input channel in the depthwise step.

    Intuitively, separable convolutions can be understood as
    a way to factorize a convolution kernel into two smaller kernels,
    or as an extreme version of an Inception block.

    # Arguments
        filters: Integer, the dimensionality of the output space
            (i.e. the number output of filters in the convolution).
        kernel_size: An integer or tuple/list of 2 integers, specifying the
            width and height of the 2D convolution window.
            Can be a single integer to specify the same value for
            all spatial dimensions.
        strides: An integer or tuple/list of 2 integers,
            specifying the strides of the convolution along the width and height.
            Can be a single integer to specify the same value for
            all spatial dimensions.
            Specifying any stride value != 1 is incompatible with specifying
            any `dilation_rate` value != 1.
        padding: one of `\"valid\"` or `\"same\"` (case-insensitive).
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".
        depth_multiplier: The number of depthwise convolution output channels
            for each input channel.
            The total number of depthwise convolution output
            channels will be equal to `filterss_in * depth_multiplier`.
        activation: Activation function to use
            (see [activations](../activations.md)).
            If you don't specify anything, no activation is applied
            (ie. \"linear\" activation: `a(x) = x`).
        use_bias: Boolean, whether the layer uses a bias vector.
        depthwise_initializer: Initializer for the depthwise kernel matrix
            (see [initializers](../initializers.md)).
        pointwise_initializer: Initializer for the pointwise kernel matrix
            (see [initializers](../initializers.md)).
        bias_initializer: Initializer for the bias vector
            (see [initializers](../initializers.md)).
        depthwise_regularizer: Regularizer function applied to
            the depthwise kernel matrix
            (see [regularizer](../regularizers.md)).
        pointwise_regularizer: Regularizer function applied to
            the depthwise kernel matrix
            (see [regularizer](../regularizers.md)).
        bias_regularizer: Regularizer function applied to the bias vector
            (see [regularizer](../regularizers.md)).
        activity_regularizer: Regularizer function applied to
            the output of the layer (its \"activation\").
            (see [regularizer](../regularizers.md)).
        depthwise_constraint: Constraint function applied to
            the depthwise kernel matrix
            (see [constraints](../constraints.md)).
        pointwise_constraint: Constraint function applied to
            the pointwise kernel matrix
            (see [constraints](../constraints.md)).
        bias_constraint: Constraint function applied to the bias vector
            (see [constraints](../constraints.md)).

    # Input shape
        4D tensor with shape:
        `(batch, channels, rows, cols)` if data_format='channels_first'
        or 4D tensor with shape:
        `(batch, rows, cols, channels)` if data_format='channels_last'.

    # Output shape
        4D tensor with shape:
        `(batch, filters, new_rows, new_cols)` if data_format='channels_first'
        or 4D tensor with shape:
        `(batch, new_rows, new_cols, filters)` if data_format='channels_last'.
        `rows` and `cols` values might have changed due to padding.
    "
                :superclasses ("Conv2D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [41578 42012])
                            ("self" variable nil (reparse-symbol indented_block_body) [42021 42061])
                            ("self" variable nil (reparse-symbol indented_block_body) [42070 42138])
                            ("self" variable nil (reparse-symbol indented_block_body) [42147 42215])
                            ("self" variable nil (reparse-symbol indented_block_body) [42224 42292])
                            ("self" variable nil (reparse-symbol indented_block_body) [42301 42369])
                            ("self" variable nil (reparse-symbol indented_block_body) [42378 42443])
                            ("self" variable nil (reparse-symbol indented_block_body) [42452 42517]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40834 40838])
                            ("filters" variable nil (reparse-symbol function_parameters) [40840 40847])
                            ("kernel_size" variable nil (reparse-symbol function_parameters) [40866 40877])
                            ("strides" variable nil (reparse-symbol function_parameters) [40896 40903])
                            ("padding" variable nil (reparse-symbol function_parameters) [40929 40936])
                            ("data_format" variable nil (reparse-symbol function_parameters) [40963 40974])
                            ("depth_multiplier" variable nil (reparse-symbol function_parameters) [40998 41014])
                            ("activation" variable nil (reparse-symbol function_parameters) [41035 41045])
                            ("use_bias" variable nil (reparse-symbol function_parameters) [41069 41077])
                            ("depthwise_initializer" variable nil (reparse-symbol function_parameters) [41101 41122])
                            ("pointwise_initializer" variable nil (reparse-symbol function_parameters) [41158 41179])
                            ("bias_initializer" variable nil (reparse-symbol function_parameters) [41215 41231])
                            ("depthwise_regularizer" variable nil (reparse-symbol function_parameters) [41258 41279])
                            ("pointwise_regularizer" variable nil (reparse-symbol function_parameters) [41303 41324])
                            ("bias_regularizer" variable nil (reparse-symbol function_parameters) [41348 41364])
                            ("activity_regularizer" variable nil (reparse-symbol function_parameters) [41388 41408])
                            ("depthwise_constraint" variable nil (reparse-symbol function_parameters) [41432 41452])
                            ("pointwise_constraint" variable nil (reparse-symbol function_parameters) [41476 41496])
                            ("bias_constraint" variable nil (reparse-symbol function_parameters) [41520 41535])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41559 41567]))                          
                        :decorators 
                          ( ("interfaces.legacy_separable_conv2d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40773 42518])
                    ("build" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42533 42537])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [42539 42550]))                          )
                        (reparse-symbol indented_block_body) [42523 44595])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44609 44613])
                            ("inputs" variable nil (reparse-symbol function_parameters) [44615 44621]))                          )
                        (reparse-symbol indented_block_body) [44600 45125])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45155 45159])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [45161 45172]))                          )
                        (reparse-symbol indented_block_body) [45130 46020])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46040 46044]))                          )
                        (reparse-symbol indented_block_body) [46025 46861]))                  
                :type "class")
                nil [36277 46861])
            ("UpSampling1D" type
               (:documentation "Upsampling layer for 1D inputs.

    Repeats each temporal step `size` times along the time axis.

    # Arguments
        size: integer. Upsampling factor.

    # Input shape
        3D tensor with shape: `(batch, steps, features)`.

    # Output shape
        3D tensor with shape: `(batch, upsampled_steps, features)`.
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [47322 47366])
                            ("self" variable nil (reparse-symbol indented_block_body) [47375 47396])
                            ("self" variable nil (reparse-symbol indented_block_body) [47405 47440]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47289 47293])
                            ("size" variable nil (reparse-symbol function_parameters) [47295 47299])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47303 47311]))                          
                        :decorators 
                          ( ("interfaces.legacy_upsampling1d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47232 47441])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47471 47475])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [47477 47488]))                          )
                        (reparse-symbol indented_block_body) [47446 47627])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47641 47645])
                            ("inputs" variable nil (reparse-symbol function_parameters) [47647 47653]))                          )
                        (reparse-symbol indented_block_body) [47632 47740])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47760 47764]))                          )
                        (reparse-symbol indented_block_body) [47745 47935]))                  
                :type "class")
                nil [46863 47935])
            ("UpSampling2D" type
               (:documentation "Upsampling layer for 2D inputs.

    Repeats the rows and columns of the data
    by size[0] and size[1] respectively.

    # Arguments
        size: int, or tuple of 2 integers.
            The upsampling factors for rows and columns.
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        4D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, rows, cols, channels)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, channels, rows, cols)`

    # Output shape
        4D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, upsampled_rows, upsampled_cols, channels)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, channels, upsampled_rows, upsampled_cols)`
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [49418 49462])
                            ("self" variable nil (reparse-symbol indented_block_body) [49471 49535])
                            ("self" variable nil (reparse-symbol indented_block_body) [49544 49599])
                            ("self" variable nil (reparse-symbol indented_block_body) [49608 49643]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49362 49366])
                            ("size" variable nil (reparse-symbol function_parameters) [49368 49372])
                            ("data_format" variable nil (reparse-symbol function_parameters) [49381 49392])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49399 49407]))                          
                        :decorators 
                          ( ("interfaces.legacy_upsampling2d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49305 49644])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49674 49678])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [49680 49691]))                          )
                        (reparse-symbol indented_block_body) [49649 50409])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50423 50427])
                            ("inputs" variable nil (reparse-symbol function_parameters) [50429 50435]))                          )
                        (reparse-symbol indented_block_body) [50414 50554])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50574 50578]))                          )
                        (reparse-symbol indented_block_body) [50559 50800]))                  
                :type "class")
                nil [47937 50800])
            ("UpSampling3D" type
               (:documentation "Upsampling layer for 3D inputs.

    Repeats the 1st, 2nd and 3rd dimensions
    of the data by size[0], size[1] and size[2] respectively.

    # Arguments
        size: int, or tuple of 3 integers.
            The upsampling factors for dim1, dim2 and dim3.
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
            while `channels_first` corresponds to inputs with shape
            `(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        5D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, dim1, dim2, dim3, channels)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, channels, dim1, dim2, dim3)`

    # Output shape
        5D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, upsampled_dim1, upsampled_dim2, upsampled_dim3, channels)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, channels, upsampled_dim1, upsampled_dim2, upsampled_dim3)`
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [52407 52471])
                            ("self" variable nil (reparse-symbol indented_block_body) [52480 52535])
                            ("self" variable nil (reparse-symbol indented_block_body) [52544 52579])
                            ("super" code nil (reparse-symbol indented_block_body) [52588 52632]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52348 52352])
                            ("size" variable nil (reparse-symbol function_parameters) [52354 52358])
                            ("data_format" variable nil (reparse-symbol function_parameters) [52370 52381])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52388 52396]))                          
                        :decorators 
                          ( ("interfaces.legacy_upsampling3d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52291 52633])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52663 52667])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [52669 52680]))                          )
                        (reparse-symbol indented_block_body) [52638 53616])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53630 53634])
                            ("inputs" variable nil (reparse-symbol function_parameters) [53636 53642]))                          )
                        (reparse-symbol indented_block_body) [53621 53809])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53829 53833]))                          )
                        (reparse-symbol indented_block_body) [53814 54055]))                  
                :type "class")
                nil [50802 54055])
            ("ZeroPadding1D" type
               (:documentation "Zero-padding layer for 1D input (e.g. temporal sequence).

    # Arguments
        padding: int, or tuple of int (length 2), or dictionary.
            - If int:
            How many zeros to add at the beginning and end of
            the padding dimension (axis 1).
            - If tuple of int (length 2):
            How many zeros to add at the beginning and at the end of
            the padding dimension (`(left_pad, right_pad)`).

    # Input shape
        3D tensor with shape `(batch, axis_to_pad, features)`

    # Output shape
        3D tensor with shape `(batch, padded_axis, features)`
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [54757 54802])
                            ("self" variable nil (reparse-symbol indented_block_body) [54811 54875])
                            ("self" variable nil (reparse-symbol indented_block_body) [54884 54919]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54721 54725])
                            ("padding" variable nil (reparse-symbol function_parameters) [54727 54734])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [54738 54746]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54708 54920])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54950 54954])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [54956 54967]))                          )
                        (reparse-symbol indented_block_body) [54925 55166])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55180 55184])
                            ("inputs" variable nil (reparse-symbol function_parameters) [55186 55192]))                          )
                        (reparse-symbol indented_block_body) [55171 55259])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55279 55283]))                          )
                        (reparse-symbol indented_block_body) [55264 55461]))                  
                :type "class")
                nil [54057 55461])
            ("ZeroPadding2D" type
               (:documentation "Zero-padding layer for 2D input (e.g. picture).

    This layer can add rows and columns or zeros
    at the top, bottom, left and right side of an image tensor.

    # Arguments
        padding: int, or tuple of 2 ints, or tuple of 2 tuples of 2 ints.
            - If int: the same symmetric padding
                is applied to width and height.
            - If tuple of 2 ints:
                interpreted as two different
                symmetric padding values for height and width:
                `(symmetric_height_pad, symmetrc_width_pad)`.
            - If tuple of 2 tuples of 2 ints:
                interpreted as
                `((top_pad, bottom_pad), (left_pad, right_pad))`
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        4D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, rows, cols, channels)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, channels, rows, cols)`

    # Output shape
        4D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, padded_rows, padded_cols, channels)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, channels, padded_rows, padded_cols)`
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [57448 57493])
                            ("self" variable nil (reparse-symbol indented_block_body) [57502 57566])
                            ("if" code nil (reparse-symbol indented_block_body) [57575 58646])
                            ("self" variable nil (reparse-symbol indented_block_body) [58654 58689]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57338 57342])
                            ("padding" variable nil (reparse-symbol function_parameters) [57361 57368])
                            ("data_format" variable nil (reparse-symbol function_parameters) [57394 57405])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57429 57437]))                          
                        :decorators 
                          ( ("interfaces.legacy_zeropadding2d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [57280 58690])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58720 58724])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [58726 58737]))                          )
                        (reparse-symbol indented_block_body) [58695 59551])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59565 59569])
                            ("inputs" variable nil (reparse-symbol function_parameters) [59571 59577]))                          )
                        (reparse-symbol indented_block_body) [59556 59748])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59768 59772]))                          )
                        (reparse-symbol indented_block_body) [59753 60001]))                  
                :type "class")
                nil [55463 60001])
            ("ZeroPadding3D" type
               (:documentation "Zero-padding layer for 3D data (spatial or spatio-temporal).

    # Arguments
        padding: int, or tuple of 2 ints, or tuple of 2 tuples of 2 ints.
            - If int: the same symmetric padding
                is applied to width and height.
            - If tuple of 2 ints:
                interpreted as two different
                symmetric padding values for height and width:
                `(symmetric_dim1_pad, symmetric_dim2_pad, symmetric_dim3_pad)`.
            - If tuple of 2 tuples of 2 ints:
                interpreted as
                `((left_dim1_pad, right_dim1_pad), (left_dim2_pad, right_dim2_pad), (left_dim3_pad, right_dim3_pad))`
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
            while `channels_first` corresponds to inputs with shape
            `(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        5D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, first_axis_to_pad, second_axis_to_pad, third_axis_to_pad, depth)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, depth, first_axis_to_pad, second_axis_to_pad, third_axis_to_pad)`

    # Output shape
        5D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, first_padded_axis, second_padded_axis, third_axis_to_pad, depth)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, depth, first_padded_axis, second_padded_axis, third_axis_to_pad)`
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [62108 62153])
                            ("self" variable nil (reparse-symbol indented_block_body) [62162 62226])
                            ("if" code nil (reparse-symbol indented_block_body) [62235 63610])
                            ("self" variable nil (reparse-symbol indented_block_body) [63618 63653]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62046 62050])
                            ("padding" variable nil (reparse-symbol function_parameters) [62052 62059])
                            ("data_format" variable nil (reparse-symbol function_parameters) [62071 62082])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [62089 62097]))                          
                        :decorators 
                          ( ("interfaces.legacy_zeropadding3d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61988 63654])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63684 63688])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [63690 63701]))                          )
                        (reparse-symbol indented_block_body) [63659 64697])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64711 64715])
                            ("inputs" variable nil (reparse-symbol function_parameters) [64717 64723]))                          )
                        (reparse-symbol indented_block_body) [64702 64894])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64914 64918]))                          )
                        (reparse-symbol indented_block_body) [64899 65147]))                  
                :type "class")
                nil [60003 65147])
            ("Cropping1D" type
               (:documentation "Cropping layer for 1D input (e.g. temporal sequence).

    It crops along the time dimension (axis 1).

    # Arguments
        cropping: int or tuple of int (length 2)
            How many units should be trimmed off at the beginning and end of
            the cropping dimension (axis 1).
            If a single int is provided,
            the same value will be used for both.

    # Input shape
        3D tensor with shape `(batch, axis_to_crop, features)`

    # Output shape
        3D tensor with shape `(batch, cropped_axis, features)`
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [65796 65838])
                            ("self" variable nil (reparse-symbol indented_block_body) [65847 65914])
                            ("self" variable nil (reparse-symbol indented_block_body) [65923 65958]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65754 65758])
                            ("cropping" variable nil (reparse-symbol function_parameters) [65760 65768])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [65777 65785]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [65741 65959])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65989 65993])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [65995 66006]))                          )
                        (reparse-symbol indented_block_body) [65964 66250])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66264 66268])
                            ("inputs" variable nil (reparse-symbol function_parameters) [66270 66276]))                          )
                        (reparse-symbol indented_block_body) [66255 66447])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66467 66471]))                          )
                        (reparse-symbol indented_block_body) [66452 66648]))                  
                :type "class")
                nil [65149 66648])
            ("Cropping2D" type
               (:documentation "Cropping layer for 2D input (e.g. picture).

    It crops along spatial dimensions, i.e. width and height.

    # Arguments
        cropping: int, or tuple of 2 ints, or tuple of 2 tuples of 2 ints.
            - If int: the same symmetric cropping
                is applied to width and height.
            - If tuple of 2 ints:
                interpreted as two different
                symmetric cropping values for height and width:
                `(symmetric_height_crop, symmetrc_width_crop)`.
            - If tuple of 2 tuples of 2 ints:
                interpreted as
                `((top_crop, bottom_crop), (left_crop, right_crop))`
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        4D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, rows, cols, channels)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, channels, rows, cols)`

    # Output shape
        4D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, cropped_rows, cropped_cols, channels)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, channels, cropped_rows, cropped_cols)`

    # Examples

    ```python
        # Crop the input 2D images or feature maps
        model = Sequential()
        model.add(Cropping2D(cropping=((2, 2), (4, 4)),
                             input_shape=(28, 28, 3)))
        # now model.output_shape == (None, 24, 20, 3)
        model.add(Conv2D(64, (3, 3), padding='same))
        model.add(Cropping2D(cropping=((2, 2), (2, 2))))
        # now model.output_shape == (None, 20, 16. 64)
    ```
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [69013 69055])
                            ("self" variable nil (reparse-symbol indented_block_body) [69064 69128])
                            ("if" code nil (reparse-symbol indented_block_body) [69137 70190])
                            ("self" variable nil (reparse-symbol indented_block_body) [70198 70233]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68926 68930])
                            ("cropping" variable nil (reparse-symbol function_parameters) [68932 68940])
                            ("data_format" variable nil (reparse-symbol function_parameters) [68976 68987])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [68994 69002]))                          
                        :decorators 
                          ( ("interfaces.legacy_cropping2d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [68871 70234])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70264 70268])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [70270 70281]))                          )
                        (reparse-symbol indented_block_body) [70239 70959])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70973 70977])
                            ("inputs" variable nil (reparse-symbol function_parameters) [70979 70985]))                          )
                        (reparse-symbol indented_block_body) [70964 72883])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72903 72907]))                          )
                        (reparse-symbol indented_block_body) [72888 73135]))                  
                :type "class")
                nil [66650 73135])
            ("Cropping3D" type
               (:documentation "Cropping layer for 3D data (e.g. spatial or spatio-temporal).

    # Arguments
        cropping: int, or tuple of 2 ints, or tuple of 2 tuples of 2 ints.
            - If int: the same symmetric cropping
                is applied to width and height.
            - If tuple of 2 ints:
                interpreted as two different
                symmetric cropping values for height and width:
                `(symmetric_dim1_crop, symmetric_dim2_crop, symmetric_dim3_crop)`.
            - If tuple of 2 tuples of 2 ints:
                interpreted as
                `((left_dim1_crop, right_dim1_crop), (left_dim2_crop, right_dim2_crop), (left_dim3_crop, right_dim3_crop))`
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
            while `channels_first` corresponds to inputs with shape
            `(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        5D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, first_axis_to_crop, second_axis_to_crop, third_axis_to_crop, depth)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, depth, first_axis_to_crop, second_axis_to_crop, third_axis_to_crop)`

    # Output shape
        5D tensor with shape:
        - If `data_format` is `\"channels_last\"`:
            `(batch, first_cropped_axis, second_cropped_axis, third_cropped_axis, depth)`
        - If `data_format` is `\"channels_first\"`:
            `(batch, depth, first_cropped_axis, second_cropped_axis, third_cropped_axis)`
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [75294 75336])
                            ("self" variable nil (reparse-symbol indented_block_body) [75345 75409])
                            ("if" code nil (reparse-symbol indented_block_body) [75418 76890])
                            ("self" variable nil (reparse-symbol indented_block_body) [76898 76933]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75199 75203])
                            ("cropping" variable nil (reparse-symbol function_parameters) [75205 75213])
                            ("data_format" variable nil (reparse-symbol function_parameters) [75257 75268])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [75275 75283]))                          
                        :decorators 
                          ( ("interfaces.legacy_cropping3d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [75144 76934])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76964 76968])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [76970 76981]))                          )
                        (reparse-symbol indented_block_body) [76939 78091])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78105 78109])
                            ("inputs" variable nil (reparse-symbol function_parameters) [78111 78117]))                          )
                        (reparse-symbol indented_block_body) [78096 83063])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83083 83087]))                          )
                        (reparse-symbol indented_block_body) [83068 83315]))                  
                :type "class")
                nil [73137 83315])
            ("Convolution1D" variable nil nil [83328 83350])
            ("Convolution2D" variable nil nil [83351 83373])
            ("Convolution3D" variable nil nil [83374 83396])
            ("SeparableConvolution2D" variable nil nil [83397 83437])
            ("Convolution2DTranspose" variable nil nil [83438 83478])
            ("Deconvolution2D" variable nil nil [83479 83523])
            ("AtrousConv1D" variable nil nil [83542 83576])
            ("AtrousConv2D" variable nil nil [83577 83611]))          
      :file "convolutional.py"
      :pointmax 83612
      :fsize 83611
      :lastmodtime '(22734 26003 0 0)
      :unmatched-syntax '((NAME 77835 . 77839) (IF 77901 . 77903) (ELSE 77931 . 77935) (NAME 77717 . 77721) (IF 77783 . 77785) (ELSE 77813 . 77817) (NAME 77599 . 77603) (IF 77665 . 77667) (ELSE 77695 . 77699) (NAME 77281 . 77285) (IF 77347 . 77349) (ELSE 77377 . 77381) (NAME 77163 . 77167) (IF 77229 . 77231) (ELSE 77259 . 77263) (NAME 77045 . 77049) (IF 77111 . 77113) (ELSE 77141 . 77145) (NAME 64460 . 64464) (IF 64507 . 64509) (ELSE 64537 . 64541) (NAME 64361 . 64365) (IF 64408 . 64410) (ELSE 64438 . 64442) (NAME 64262 . 64266) (IF 64309 . 64311) (ELSE 64339 . 64343) (NAME 63963 . 63967) (IF 64010 . 64012) (ELSE 64040 . 64044) (NAME 63864 . 63868) (IF 63911 . 63913) (ELSE 63941 . 63945) (NAME 63765 . 63769) (IF 63812 . 63814) (ELSE 63842 . 63846) (NAME 59323 . 59327) (IF 59387 . 59389) (ELSE 59417 . 59421) (NAME 59207 . 59211) (IF 59271 . 59273) (ELSE 59301 . 59305) (NAME 58917 . 58921) (IF 58981 . 58983) (ELSE 59011 . 59015) (NAME 58801 . 58805) (IF 58865 . 58867) (ELSE 58895 . 58899) (NAME 54978 . 54984) (IF 55038 . 55040) (ELSE 55068 . 55072) (NAME 53389 . 53393) (IF 53426 . 53428) (ELSE 53456 . 53460) (NAME 53300 . 53304) (IF 53337 . 53339) (ELSE 53367 . 53371) (NAME 53211 . 53215) (IF 53248 . 53250) (ELSE 53278 . 53282) (NAME 52922 . 52926) (IF 52959 . 52961) (ELSE 52989 . 52993) (NAME 52833 . 52837) (IF 52870 . 52872) (ELSE 52900 . 52904) (NAME 52744 . 52748) (IF 52781 . 52783) (ELSE 52811 . 52815) (NAME 50204 . 50209) (IF 50242 . 50244) (ELSE 50272 . 50276) (NAME 50113 . 50119) (IF 50152 . 50154) (ELSE 50182 . 50186) (NAME 49846 . 49851) (IF 49884 . 49886) (ELSE 49914 . 49918) (NAME 49755 . 49761) (IF 49794 . 49796) (ELSE 49824 . 49828) (NAME 47499 . 47503) (IF 47533 . 47535) (ELSE 47563 . 47567) (PERIOD 644 . 645) (FROM 638 . 642) (PERIOD 643 . 644) (PERIOD 596 . 597) (FROM 590 . 594) (PERIOD 595 . 596) (FROM 555 . 559) (PERIOD 560 . 561) (FROM 521 . 525) (PERIOD 526 . 527) (FROM 487 . 491) (PERIOD 492 . 493) (FROM 449 . 453) (PERIOD 454 . 455) (FROM 411 . 415) (PERIOD 416 . 417) (FROM 373 . 377) (PERIOD 378 . 379) (PERIOD 298 . 299) (FROM 292 . 296) (PERIOD 297 . 298) (PERIOD 267 . 268) (FROM 261 . 265) (PERIOD 266 . 267) (PERIOD 236 . 237) (FROM 230 . 234) (PERIOD 235 . 236) (PERIOD 209 . 210) (FROM 203 . 207) (PERIOD 208 . 209) (PERIOD 182 . 183) (FROM 176 . 180) (PERIOD 181 . 182) (PERIOD 154 . 155) (FROM 148 . 152) (PERIOD 153 . 154) (PERIOD 126 . 127) (FROM 120 . 124) (PERIOD 125 . 126) (PERIOD 99 . 100) (FROM 93 . 97) (PERIOD 98 . 99) (PERIOD 71 . 72) (FROM 65 . 69) (PERIOD 70 . 71)))
    (semanticdb-table "pooling.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [25 63])
            ("backend" include nil nil [73 92])
            ("Layer" include nil nil [107 119])
            ("InputSpec" include nil nil [134 150])
            ("conv_utils" include nil nil [164 181])
            ("interfaces" include nil nil [196 213])
            ("_Pooling1D" type
               (:documentation "Abstract class for different pooling 1D layers.
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [408 450])
                            ("if" code nil (reparse-symbol indented_block_body) [459 511])
                            ("self" variable nil (reparse-symbol indented_block_body) [519 589])
                            ("self" variable nil (reparse-symbol indented_block_body) [598 662])
                            ("self" variable nil (reparse-symbol indented_block_body) [671 723])
                            ("self" variable nil (reparse-symbol indented_block_body) [732 767]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [322 326])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [328 337])
                            ("strides" variable nil (reparse-symbol function_parameters) [341 348])
                            ("padding" variable nil (reparse-symbol function_parameters) [372 379])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [389 397]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [309 768])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [798 802])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [804 815]))                          )
                        (reparse-symbol indented_block_body) [773 1128])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1155 1159])
                            ("inputs" variable nil (reparse-symbol function_parameters) [1161 1167])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [1169 1178])
                            ("strides" variable nil (reparse-symbol function_parameters) [1180 1187])
                            ("padding" variable nil (reparse-symbol function_parameters) [1215 1222])
                            ("data_format" variable nil (reparse-symbol function_parameters) [1224 1235]))                          )
                        (reparse-symbol indented_block_body) [1133 1272])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1286 1290])
                            ("inputs" variable nil (reparse-symbol function_parameters) [1292 1298]))                          )
                        (reparse-symbol indented_block_body) [1277 1767])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1787 1791]))                          )
                        (reparse-symbol indented_block_body) [1772 2056]))                  
                :type "class")
                nil [216 2056])
            ("MaxPooling1D" type
               (:documentation "Max pooling operation for temporal data.

    # Arguments
        pool_size: Integer, size of the max pooling windows.
        strides: Integer, or None. Factor by which to downscale.
            E.g. 2 will halve the input.
            If None, it will default to `pool_size`.
        padding: One of `\"valid\"` or `\"same\"` (case-insensitive).

    # Input shape
        3D tensor with shape: `(batch_size, steps, features)`.

    # Output shape
        3D tensor with shape: `(batch_size, downsampled_steps, features)`.
    "
                :superclasses ("_Pooling1D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [2771 2887]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2685 2689])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [2691 2700])
                            ("strides" variable nil (reparse-symbol function_parameters) [2704 2711])
                            ("padding" variable nil (reparse-symbol function_parameters) [2735 2742])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2752 2760]))                          
                        :decorators 
                          ( ("interfaces.legacy_pooling1d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2631 2888])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2915 2919])
                            ("inputs" variable nil (reparse-symbol function_parameters) [2921 2927])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [2929 2938])
                            ("strides" variable nil (reparse-symbol function_parameters) [2940 2947])
                            ("padding" variable nil (reparse-symbol function_parameters) [2975 2982])
                            ("data_format" variable nil (reparse-symbol function_parameters) [2984 2995]))                          )
                        (reparse-symbol indented_block_body) [2893 3139]))                  
                :type "class")
                nil [2058 3139])
            ("AveragePooling1D" type
               (:documentation "Average pooling for temporal data.

    # Arguments
        pool_size: Integer, size of the max pooling windows.
        strides: Integer, or None. Factor by which to downscale.
            E.g. 2 will halve the input.
            If None, it will default to `pool_size`.
        padding: One of `\"valid\"` or `\"same\"` (case-insensitive).

    # Input shape
        3D tensor with shape: `(batch_size, steps, features)`.

    # Output shape
        3D tensor with shape: `(batch_size, downsampled_steps, features)`.
    "
                :superclasses ("_Pooling1D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3852 3976]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3766 3770])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [3772 3781])
                            ("strides" variable nil (reparse-symbol function_parameters) [3785 3792])
                            ("padding" variable nil (reparse-symbol function_parameters) [3816 3823])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3833 3841]))                          
                        :decorators 
                          ( ("interfaces.legacy_pooling1d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3712 3977])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4004 4008])
                            ("inputs" variable nil (reparse-symbol function_parameters) [4010 4016])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [4018 4027])
                            ("strides" variable nil (reparse-symbol function_parameters) [4029 4036])
                            ("padding" variable nil (reparse-symbol function_parameters) [4064 4071])
                            ("data_format" variable nil (reparse-symbol function_parameters) [4073 4084]))                          )
                        (reparse-symbol indented_block_body) [3982 4228]))                  
                :type "class")
                nil [3141 4228])
            ("_Pooling2D" type
               (:documentation "Abstract class for different pooling 2D layers.
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [4445 4487])
                            ("data_format" variable nil (reparse-symbol indented_block_body) [4496 4555])
                            ("if" code nil (reparse-symbol indented_block_body) [4564 4616])
                            ("self" variable nil (reparse-symbol indented_block_body) [4624 4694])
                            ("self" variable nil (reparse-symbol indented_block_body) [4703 4767])
                            ("self" variable nil (reparse-symbol indented_block_body) [4776 4828])
                            ("self" variable nil (reparse-symbol indented_block_body) [4837 4901])
                            ("self" variable nil (reparse-symbol indented_block_body) [4910 4945]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4336 4340])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [4342 4351])
                            ("strides" variable nil (reparse-symbol function_parameters) [4360 4367])
                            ("padding" variable nil (reparse-symbol function_parameters) [4374 4381])
                            ("data_format" variable nil (reparse-symbol function_parameters) [4408 4419])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4426 4434]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4323 4946])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4976 4980])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [4982 4993]))                          )
                        (reparse-symbol indented_block_body) [4951 5750])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5777 5781])
                            ("inputs" variable nil (reparse-symbol function_parameters) [5783 5789])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [5791 5800])
                            ("strides" variable nil (reparse-symbol function_parameters) [5802 5809])
                            ("padding" variable nil (reparse-symbol function_parameters) [5837 5844])
                            ("data_format" variable nil (reparse-symbol function_parameters) [5846 5857]))                          )
                        (reparse-symbol indented_block_body) [5755 5894])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5908 5912])
                            ("inputs" variable nil (reparse-symbol function_parameters) [5914 5920]))                          )
                        (reparse-symbol indented_block_body) [5899 6260])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6280 6284]))                          )
                        (reparse-symbol indented_block_body) [6265 6600]))                  
                :type "class")
                nil [4230 6600])
            ("MaxPooling2D" type
               (:documentation "Max pooling operation for spatial data.

    # Arguments
        pool_size: integer or tuple of 2 integers,
            factors by which to downscale (vertical, horizontal).
            (2, 2) will halve the input in both spatial dimension.
            If only one integer is specified, the same window length
            will be used for both dimensions.
        strides: Integer, tuple of 2 integers, or None.
            Strides values.
            If None, it will default to `pool_size`.
        padding: One of `\"valid\"` or `\"same\"` (case-insensitive).
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        - If `data_format='channels_last'`:
            4D tensor with shape:
            `(batch_size, rows, cols, channels)`
        - If `data_format='channels_first'`:
            4D tensor with shape:
            `(batch_size, channels, rows, cols)`

    # Output shape
        - If `data_format='channels_last'`:
            4D tensor with shape:
            `(batch_size, pooled_rows, pooled_cols, channels)`
        - If `data_format='channels_first'`:
            4D tensor with shape:
            `(batch_size, channels, pooled_rows, pooled_cols)`
    "
                :superclasses ("_Pooling2D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [8525 8654]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8416 8420])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [8422 8431])
                            ("strides" variable nil (reparse-symbol function_parameters) [8440 8447])
                            ("padding" variable nil (reparse-symbol function_parameters) [8454 8461])
                            ("data_format" variable nil (reparse-symbol function_parameters) [8488 8499])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8506 8514]))                          
                        :decorators 
                          ( ("interfaces.legacy_pooling2d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8362 8655])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8682 8686])
                            ("inputs" variable nil (reparse-symbol function_parameters) [8688 8694])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [8696 8705])
                            ("strides" variable nil (reparse-symbol function_parameters) [8707 8714])
                            ("padding" variable nil (reparse-symbol function_parameters) [8742 8749])
                            ("data_format" variable nil (reparse-symbol function_parameters) [8751 8762]))                          )
                        (reparse-symbol indented_block_body) [8660 8932]))                  
                :type "class")
                nil [6602 8932])
            ("AveragePooling2D" type
               (:documentation "Average pooling operation for spatial data.

    # Arguments
        pool_size: integer or tuple of 2 integers,
            factors by which to downscale (vertical, horizontal).
            (2, 2) will halve the input in both spatial dimension.
            If only one integer is specified, the same window length
            will be used for both dimensions.
        strides: Integer, tuple of 2 integers, or None.
            Strides values.
            If None, it will default to `pool_size`.
        padding: One of `\"valid\"` or `\"same\"` (case-insensitive).
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        - If `data_format='channels_last'`:
            4D tensor with shape:
            `(batch_size, rows, cols, channels)`
        - If `data_format='channels_first'`:
            4D tensor with shape:
            `(batch_size, channels, rows, cols)`

    # Output shape
        - If `data_format='channels_last'`:
            4D tensor with shape:
            `(batch_size, pooled_rows, pooled_cols, channels)`
        - If `data_format='channels_first'`:
            4D tensor with shape:
            `(batch_size, channels, pooled_rows, pooled_cols)`
    "
                :superclasses ("_Pooling2D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [10865 11002]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10756 10760])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [10762 10771])
                            ("strides" variable nil (reparse-symbol function_parameters) [10780 10787])
                            ("padding" variable nil (reparse-symbol function_parameters) [10794 10801])
                            ("data_format" variable nil (reparse-symbol function_parameters) [10828 10839])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10846 10854]))                          
                        :decorators 
                          ( ("interfaces.legacy_pooling2d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10702 11003])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11030 11034])
                            ("inputs" variable nil (reparse-symbol function_parameters) [11036 11042])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [11044 11053])
                            ("strides" variable nil (reparse-symbol function_parameters) [11055 11062])
                            ("padding" variable nil (reparse-symbol function_parameters) [11090 11097])
                            ("data_format" variable nil (reparse-symbol function_parameters) [11099 11110]))                          )
                        (reparse-symbol indented_block_body) [11008 11254]))                  
                :type "class")
                nil [8934 11254])
            ("_Pooling3D" type
               (:documentation "Abstract class for different pooling 3D layers.
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [11474 11516])
                            ("if" code nil (reparse-symbol indented_block_body) [11525 11577])
                            ("self" variable nil (reparse-symbol indented_block_body) [11585 11655])
                            ("self" variable nil (reparse-symbol indented_block_body) [11664 11728])
                            ("self" variable nil (reparse-symbol indented_block_body) [11737 11789])
                            ("self" variable nil (reparse-symbol indented_block_body) [11798 11862])
                            ("self" variable nil (reparse-symbol indented_block_body) [11871 11906]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11362 11366])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [11368 11377])
                            ("strides" variable nil (reparse-symbol function_parameters) [11389 11396])
                            ("padding" variable nil (reparse-symbol function_parameters) [11403 11410])
                            ("data_format" variable nil (reparse-symbol function_parameters) [11437 11448])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11455 11463]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11349 11907])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11937 11941])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [11943 11954]))                          )
                        (reparse-symbol indented_block_body) [11912 13101])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13128 13132])
                            ("inputs" variable nil (reparse-symbol function_parameters) [13134 13140])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [13142 13151])
                            ("strides" variable nil (reparse-symbol function_parameters) [13153 13160])
                            ("padding" variable nil (reparse-symbol function_parameters) [13188 13195])
                            ("data_format" variable nil (reparse-symbol function_parameters) [13197 13208]))                          )
                        (reparse-symbol indented_block_body) [13106 13245])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13259 13263])
                            ("inputs" variable nil (reparse-symbol function_parameters) [13265 13271]))                          )
                        (reparse-symbol indented_block_body) [13250 13611])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13631 13635]))                          )
                        (reparse-symbol indented_block_body) [13616 13951]))                  
                :type "class")
                nil [11256 13951])
            ("MaxPooling3D" type
               (:documentation "Max pooling operation for 3D data (spatial or spatio-temporal).

    # Arguments
        pool_size: tuple of 3 integers,
            factors by which to downscale (dim1, dim2, dim3).
            (2, 2, 2) will halve the size of the 3D input in each dimension.
        strides: tuple of 3 integers, or None. Strides values.
        padding: One of `\"valid\"` or `\"same\"` (case-insensitive).
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
            while `channels_first` corresponds to inputs with shape
            `(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        - If `data_format='channels_last'`:
            5D tensor with shape:
            `(batch_size, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
        - If `data_format='channels_first'`:
            5D tensor with shape:
            `(batch_size, channels, spatial_dim1, spatial_dim2, spatial_dim3)`

    # Output shape
        - If `data_format='channels_last'`:
            5D tensor with shape:
            `(batch_size, pooled_dim1, pooled_dim2, pooled_dim3, channels)`
        - If `data_format='channels_first'`:
            5D tensor with shape:
            `(batch_size, channels, pooled_dim1, pooled_dim2, pooled_dim3)`
    "
                :superclasses ("_Pooling3D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [15849 15978]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15737 15741])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [15743 15752])
                            ("strides" variable nil (reparse-symbol function_parameters) [15764 15771])
                            ("padding" variable nil (reparse-symbol function_parameters) [15778 15785])
                            ("data_format" variable nil (reparse-symbol function_parameters) [15812 15823])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15830 15838]))                          
                        :decorators 
                          ( ("interfaces.legacy_pooling3d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15683 15979])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16006 16010])
                            ("inputs" variable nil (reparse-symbol function_parameters) [16012 16018])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [16020 16029])
                            ("strides" variable nil (reparse-symbol function_parameters) [16031 16038])
                            ("padding" variable nil (reparse-symbol function_parameters) [16066 16073])
                            ("data_format" variable nil (reparse-symbol function_parameters) [16075 16086]))                          )
                        (reparse-symbol indented_block_body) [15984 16230]))                  
                :type "class")
                nil [13953 16230])
            ("AveragePooling3D" type
               (:documentation "Average pooling operation for 3D data (spatial or spatio-temporal).

    # Arguments
        pool_size: tuple of 3 integers,
            factors by which to downscale (dim1, dim2, dim3).
            (2, 2, 2) will halve the size of the 3D input in each dimension.
        strides: tuple of 3 integers, or None. Strides values.
        padding: One of `\"valid\"` or `\"same\"` (case-insensitive).
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
            while `channels_first` corresponds to inputs with shape
            `(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        - If `data_format='channels_last'`:
            5D tensor with shape:
            `(batch_size, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
        - If `data_format='channels_first'`:
            5D tensor with shape:
            `(batch_size, channels, spatial_dim1, spatial_dim2, spatial_dim3)`

    # Output shape
        - If `data_format='channels_last'`:
            5D tensor with shape:
            `(batch_size, pooled_dim1, pooled_dim2, pooled_dim3, channels)`
        - If `data_format='channels_first'`:
            5D tensor with shape:
            `(batch_size, channels, pooled_dim1, pooled_dim2, pooled_dim3)`
    "
                :superclasses ("_Pooling3D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [18136 18273]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18024 18028])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [18030 18039])
                            ("strides" variable nil (reparse-symbol function_parameters) [18051 18058])
                            ("padding" variable nil (reparse-symbol function_parameters) [18065 18072])
                            ("data_format" variable nil (reparse-symbol function_parameters) [18099 18110])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18117 18125]))                          
                        :decorators 
                          ( ("interfaces.legacy_pooling3d_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17970 18274])
                    ("_pooling_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18301 18305])
                            ("inputs" variable nil (reparse-symbol function_parameters) [18307 18313])
                            ("pool_size" variable nil (reparse-symbol function_parameters) [18315 18324])
                            ("strides" variable nil (reparse-symbol function_parameters) [18326 18333])
                            ("padding" variable nil (reparse-symbol function_parameters) [18361 18368])
                            ("data_format" variable nil (reparse-symbol function_parameters) [18370 18381]))                          )
                        (reparse-symbol indented_block_body) [18279 18551]))                  
                :type "class")
                nil [16232 18551])
            ("_GlobalPooling1D" type
               (:documentation "Abstract class for different global pooling 1D layers.
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [18697 18745])
                            ("self" variable nil (reparse-symbol indented_block_body) [18754 18789]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18672 18676])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18678 18686]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18659 18790])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18820 18824])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [18826 18837]))                          )
                        (reparse-symbol indented_block_body) [18795 18888])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18902 18906])
                            ("inputs" variable nil (reparse-symbol function_parameters) [18908 18914]))                          )
                        (reparse-symbol indented_block_body) [18893 18951]))                  
                :type "class")
                nil [18553 18951])
            ("GlobalAveragePooling1D" type
               (:documentation "Global average pooling operation for temporal data.

    # Input shape
        3D tensor with shape: `(batch_size, steps, features)`.

    # Output shape
        2D tensor with shape:
        `(batch_size, channels)`
    "
                :superclasses ("_GlobalPooling1D")
                :members 
                  ( ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19247 19251])
                            ("inputs" variable nil (reparse-symbol function_parameters) [19253 19259]))                          )
                        (reparse-symbol indented_block_body) [19238 19300]))                  
                :type "class")
                nil [18953 19300])
            ("GlobalMaxPooling1D" type
               (:documentation "Global max pooling operation for temporal data.

    # Input shape
        3D tensor with shape: `(batch_size, steps, features)`.

    # Output shape
        2D tensor with shape:
        `(batch_size, channels)`
    "
                :superclasses ("_GlobalPooling1D")
                :members 
                  ( ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19588 19592])
                            ("inputs" variable nil (reparse-symbol function_parameters) [19594 19600]))                          )
                        (reparse-symbol indented_block_body) [19579 19640]))                  
                :type "class")
                nil [19302 19640])
            ("_GlobalPooling2D" type
               (:documentation "Abstract class for different global pooling 2D layers.
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [19850 19898])
                            ("self" variable nil (reparse-symbol indented_block_body) [19907 19971])
                            ("self" variable nil (reparse-symbol indented_block_body) [19980 20015]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19807 19811])
                            ("data_format" variable nil (reparse-symbol function_parameters) [19813 19824])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19831 19839]))                          
                        :decorators 
                          ( ("interfaces.legacy_global_pooling_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19748 20016])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20046 20050])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [20052 20063]))                          )
                        (reparse-symbol indented_block_body) [20021 20232])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20246 20250])
                            ("inputs" variable nil (reparse-symbol function_parameters) [20252 20258]))                          )
                        (reparse-symbol indented_block_body) [20237 20295])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20315 20319]))                          )
                        (reparse-symbol indented_block_body) [20300 20508]))                  
                :type "class")
                nil [19642 20508])
            ("GlobalAveragePooling2D" type
               (:documentation "Global average pooling operation for spatial data.

    # Arguments
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        - If `data_format='channels_last'`:
            4D tensor with shape:
            `(batch_size, rows, cols, channels)`
        - If `data_format='channels_first'`:
            4D tensor with shape:
            `(batch_size, channels, rows, cols)`

    # Output shape
        2D tensor with shape:
        `(batch_size, channels)`
    "
                :superclasses ("_GlobalPooling2D")
                :members 
                  ( ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21584 21588])
                            ("inputs" variable nil (reparse-symbol function_parameters) [21590 21596]))                          )
                        (reparse-symbol indented_block_body) [21575 21755]))                  
                :type "class")
                nil [20510 21755])
            ("GlobalMaxPooling2D" type
               (:documentation "Global max pooling operation for spatial data.

    # Arguments
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, height, width, channels)` while `channels_first`
            corresponds to inputs with shape
            `(batch, channels, height, width)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        - If `data_format='channels_last'`:
            4D tensor with shape:
            `(batch_size, rows, cols, channels)`
        - If `data_format='channels_first'`:
            4D tensor with shape:
            `(batch_size, channels, rows, cols)`

    # Output shape
        2D tensor with shape:
        `(batch_size, channels)`
    "
                :superclasses ("_GlobalPooling2D")
                :members 
                  ( ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22823 22827])
                            ("inputs" variable nil (reparse-symbol function_parameters) [22829 22835]))                          )
                        (reparse-symbol indented_block_body) [22814 22992]))                  
                :type "class")
                nil [21757 22992])
            ("_GlobalPooling3D" type
               (:documentation "Abstract class for different global pooling 3D layers.
    "
                :superclasses ("Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [23202 23250])
                            ("self" variable nil (reparse-symbol indented_block_body) [23259 23323])
                            ("self" variable nil (reparse-symbol indented_block_body) [23332 23367]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23159 23163])
                            ("data_format" variable nil (reparse-symbol function_parameters) [23165 23176])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23183 23191]))                          
                        :decorators 
                          ( ("interfaces.legacy_global_pooling_support" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23100 23368])
                    ("compute_output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23398 23402])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [23404 23415]))                          )
                        (reparse-symbol indented_block_body) [23373 23584])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23598 23602])
                            ("inputs" variable nil (reparse-symbol function_parameters) [23604 23610]))                          )
                        (reparse-symbol indented_block_body) [23589 23647])
                    ("get_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23667 23671]))                          )
                        (reparse-symbol indented_block_body) [23652 23860]))                  
                :type "class")
                nil [22994 23860])
            ("GlobalAveragePooling3D" type
               (:documentation "Global Average pooling operation for 3D data.

    # Arguments
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
            while `channels_first` corresponds to inputs with shape
            `(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        - If `data_format='channels_last'`:
            5D tensor with shape:
            `(batch_size, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
        - If `data_format='channels_first'`:
            5D tensor with shape:
            `(batch_size, channels, spatial_dim1, spatial_dim2, spatial_dim3)`

    # Output shape
        2D tensor with shape:
        `(batch_size, channels)`
    "
                :superclasses ("_GlobalPooling3D")
                :members 
                  ( ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25045 25049])
                            ("inputs" variable nil (reparse-symbol function_parameters) [25051 25057]))                          )
                        (reparse-symbol indented_block_body) [25036 25222]))                  
                :type "class")
                nil [23862 25222])
            ("GlobalMaxPooling3D" type
               (:documentation "Global Max pooling operation for 3D data.

    # Arguments
        data_format: A string,
            one of `channels_last` (default) or `channels_first`.
            The ordering of the dimensions in the inputs.
            `channels_last` corresponds to inputs with shape
            `(batch, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
            while `channels_first` corresponds to inputs with shape
            `(batch, channels, spatial_dim1, spatial_dim2, spatial_dim3)`.
            It defaults to the `image_data_format` value found in your
            Keras config file at `~/.keras/keras.json`.
            If you never set it, then it will be \"channels_last\".

    # Input shape
        - If `data_format='channels_last'`:
            5D tensor with shape:
            `(batch_size, spatial_dim1, spatial_dim2, spatial_dim3, channels)`
        - If `data_format='channels_first'`:
            5D tensor with shape:
            `(batch_size, channels, spatial_dim1, spatial_dim2, spatial_dim3)`

    # Output shape
        2D tensor with shape:
        `(batch_size, channels)`
    "
                :superclasses ("_GlobalPooling3D")
                :members 
                  ( ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26399 26403])
                            ("inputs" variable nil (reparse-symbol function_parameters) [26405 26411]))                          )
                        (reparse-symbol indented_block_body) [26390 26574]))                  
                :type "class")
                nil [25224 26574])
            ("AvgPool1D" variable nil nil [26587 26615])
            ("MaxPool1D" variable nil nil [26616 26640])
            ("AvgPool2D" variable nil nil [26641 26669])
            ("MaxPool2D" variable nil nil [26670 26694])
            ("AvgPool3D" variable nil nil [26695 26723])
            ("MaxPool3D" variable nil nil [26724 26748])
            ("GlobalMaxPool1D" variable nil nil [26749 26785])
            ("GlobalMaxPool2D" variable nil nil [26786 26822])
            ("GlobalMaxPool3D" variable nil nil [26823 26859])
            ("GlobalAvgPool1D" variable nil nil [26860 26900])
            ("GlobalAvgPool2D" variable nil nil [26901 26941])
            ("GlobalAvgPool3D" variable nil nil [26942 26982]))          
      :file "pooling.py"
      :pointmax 26983
      :fsize 26982
      :lastmodtime '(22734 26003 0 0)
      :unmatched-syntax '((PERIOD 188 . 189) (FROM 182 . 186) (PERIOD 187 . 188) (PERIOD 157 . 158) (FROM 151 . 155) (PERIOD 156 . 157) (PERIOD 126 . 127) (FROM 120 . 124) (PERIOD 125 . 126) (PERIOD 99 . 100) (FROM 93 . 97) (PERIOD 98 . 99) (PERIOD 71 . 72) (FROM 65 . 69) (PERIOD 70 . 71) (PERIOD 188 . 189) (FROM 182 . 186) (PERIOD 187 . 188) (PERIOD 157 . 158) (FROM 151 . 155) (PERIOD 156 . 157) (PERIOD 126 . 127) (FROM 120 . 124) (PERIOD 125 . 126) (PERIOD 99 . 100) (FROM 93 . 97) (PERIOD 98 . 99) (PERIOD 71 . 72) (FROM 65 . 69) (PERIOD 70 . 71))))
  :file "!Users!xiaoli!anaconda!envs!rlfps3!lib!python3.5!site-packages!keras!layers!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
