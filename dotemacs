;;; Emacs is not a package manager, and here we load its package manager!
(require 'package)
(dolist (source '(("marmalade" . "http://marmalade-repo.org/packages/")
                  ("elpa" . "http://tromey.com/elpa/")
                  ;; TODO: Maybe, use this after emacs24 is released
                  ;; (development versions of packages)
                  ("melpa" . "http://melpa.milkbox.net/packages/")
                  ))
(add-to-list 'package-archives source t))
(package-initialize)

;;;;;;;;;; these are the packages to install at startup ;;;;;;;;;;;

(setq package-list '(key-chord helm jedi jedi-core helm-swoop realgud tabbar tabbar-ruler magit sphinx-doc markdown-mode fold-this))

;list the repositories containing them
;(setq package-archives '(("elpa" . "http://tromey.com/elpa/")
;                         ("gnu" . "http://elpa.gnu.org/packages/")
;                         ("marmalade" . "http://marmalade-repo.org/packages/")))


; activate all the packages (in particular autoloads)
(package-initialize)

; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))


;;; Required packages
;;; everytime emacs starts, it will automatically check if those packages are
;;; missing, it will install them automatically
(when (not package-archive-contents)
  (package-refresh-contents))
(defvar tmtxt/packages
  '(auto-complete yasnippet))
(dolist (p tmtxt/packages)
  (when (not (package-installed-p p))
  (package-install p)))

;-------------------------------------------------------------------------------

(add-to-list 'load-path "~/.emacs.d/auto-complete-clang/")
(require 'auto-complete-clang)

;(global-set-key (kbd "C-`") 'ac-complete-clang)

(set-face-foreground 'font-lock-string-face "red")
(set-face-foreground 'font-lock-comment-face "light pink")
;-------------------------------------------------------------

; this bottom part is useful for auto-complete
(defcustom mycustom-system-include-paths '("./include/" "/opt/local/include" "/usr/include" )
  "This is a list of include paths that are used by the clang auto completion."
  :group 'mycustom
  :type '(repeat directory)
  )
 
(add-to-list 'load-path "~/bin/emacs/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/bin/emacs/auto-complete/ac-dict")
(ac-config-default)
(require 'auto-complete-clang)
(setq clang-completion-suppress-error 't)
(setq ac-clang-flags
      (mapcar (lambda (item)(concat "-I" item))
              (append
               mycustom-system-include-paths
               )
              )
      )
 
(defun my-ac-clang-mode-common-hook()
  (define-key c-mode-base-map (kbd "M-/") 'ac-complete-clang)
)
 
(add-hook 'c-mode-common-hook 'my-ac-clang-mode-common-hook)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("58c6711a3b568437bab07a30385d34aacf64156cc5137ea20e799984f4227265" "9b59e147dbbde5e638ea1cde5ec0a358d5f269d27bd2b893a0947c4a867e14c1" default)))
 '(ecb-options-version "2.40")
 '(inhibit-startup-screen t)
 '(package-selected-packages
   (quote
    (helm sublime-themes smartparens neotree magit key-chord json-mode helm-core ggtags flycheck-pyflakes flycheck-irony flycheck-google-cpplint flycheck-cask elpy ecb dumb-jump csv-mode cppcheck company-anaconda color-theme cmake-project cmake-ide cmake-font-lock buffer-move bracketed-paste auto-complete-c-headers))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil)))))

; auto complete-c-headrs                                                                     
(defun my:ac-c-headers-init ()
  (require 'auto-complete-c-headers)
  (add-to-list 'ac-sources 'ac-source-c-headers))

(add-hook 'c++-mode-hook 'my:ac-c-headers-init)
(add-hook 'c-mode-hook 'my:ac-c-headers-init)


;-------------------- for xml ----------------------------------------------

;path to where nxml is
(set 'nxml-path (concat "~/.emacs.d/" "nxml-mode/"))

(load (concat nxml-path "rng-auto.el"))

 (add-to-list 'auto-mode-alist
              (cons (concat "\\." (regexp-opt '("xml" "xsd" "sch" "rng" "xslt" "svg" "rss" "world" "sdf" "urdf" "launch") t) "\\'")
                    'nxml-mode))

  (unify-8859-on-decoding-mode)

    (setq magic-mode-alist
	  (cons '("<＼＼?xml " . nxml-mode)
	  magic-mode-alist))
   (fset 'xml-mode 'nxml-mode)

   (fset 'html-mode 'nxml-mode)
(setq nxml-slash-auto-complete-flag t)


;-------------------- for code folding -------------------------------------------------------------------------------

(load-library "hideshow")

(add-hook 'python-mode-hook 'hs-minor-mode)

(add-hook 'c-mode-hook 'hs-minor-mode)

(add-hook 'c++-mode-hook 'hs-minor-mode)

;---------- ggtags ----------------------------------
(require 'ggtags)
(add-hook 'c-mode-common-hook
                    (lambda ()
                    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                    (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)

(setq-local imenu-create-index-function #'ggtags-build-imenu-index) ; ggtag with imenu

; ----------------- neotree ---------------------
 (require 'neotree)

(global-set-key [f4] 'neotree-toggle)

; set neotree backgound text color
(setq frame-background-mode 'dark)

; -------------- setup semantic ----------------
 (require 'cc-mode)
 (require 'semantic)

 (global-semanticdb-minor-mode 1)
 (global-semantic-idle-scheduler-mode 1)

 (semantic-mode 1)

; ------------- smartparens ------------------------
 ;; Package: smartparens
  (require 'smartparens-config)
  (show-smartparens-global-mode +1)
  (smartparens-global-mode 1)

 ;; ;; when you press RET, the curly braces automatically
 ;; ;; add another newline
 (sp-with-modes '(c-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
      (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                                  ("* ||\n[i]" "RET"))))
; ---------------- toggle between header and implementation file -------------

(setq cc-other-file-alist
      '(("\\.c"   (".h"))
       ("\\.cpp"   (".h"))
       ("\\.cxx"   (".h"))
       ("\\.h"   (".c"".cpp"".cxx" ".cc"))))

(setq ff-search-directories
      '("." "../src" "../include" "../code" "../include/*"))

;;; Bind the toggle function to a global key
(global-set-key "\M-t" 'ff-find-other-file)

; ---------------- Emacs for python -------------------------------------
(load-file "~/.emacs.d/emacs-for-python/epy-init.el")

; ----------------- flycheck -------------------------------------------------               
(add-hook 'after-init-hook #'global-flycheck-mode)
(setq flycheck-python-pylint-executable "~/pylint-1.4.3/bin/pylint")
;; (add-hook 'c++-mode-hook                                                                  
;;           (lambda () (setq flycheck-clang-include-path                                    
;;                            (list (expand-file-name "~/dev/cisst/cisst-saw/cisst/")))))    

; irony mode                                                                                 
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

;; replace the `completion-at-point' and `complete-symbol bindings in                       
;; irony-modes buffers by irony-modes function                                             
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

(setq flycheck-python-pylint-executable "~/pylint-1.4.3/bin/pylint")
(global-set-key (kbd "M-p") 'flycheck-list-errors)
; ----------------------- cmake mode ----------------------------------------------           
; Add cmake listfile names to the mode list.                                                  
(setq auto-mode-alist
        (append
            '(("CMakeLists\\.txt\\'" . cmake-mode))
               '(("\\.cmake\\'" . cmake-mode))
                  auto-mode-alist))

(autoload 'cmake-mode "/usr/share/emacs/site-lisp/cmake-mode.el" t)

; -------------------- From other source -----------------------
;;;;;;;;;;;; Emacs Basic Setting ;;;;;;;;

;; 'y' for 'yes', 'n' for 'no'
(fset 'yes-or-no-p 'y-or-n-p)


;; hightlight current line
(require 'hl-line)
;(global-hl-line-mode t)

;;;;;;;; cursor ;;;;;;;;;;;;;;;;;
(setq-default cursor-type 'bar)
;;to set the cursor color
(set-cursor-color "blue")
;; move mouse if it's close to the cursor
(mouse-avoidance-mode 'animate)



;;;;;;;;;; Spell Checking ;;;;;;;;;
(setq-default ispell-program-name "aspell")



;; start text-mode by default
(setq default-major-mode 'text-mode)

;;;;;; column & line number ;;;;;;;
;; show column number
;; (setq column-number-mode t)
;; (setq line-number-mode t)
;; (global-linum-mode t)


;;;;;; Emacs Window Size ;;;;;;;;;;
(setq default-frame-alist 
      '((height . 50) (width . 100)
        ;; (top . 1) (left . 1)
        ))


;;;;;;; Disable Welcome ;;;;;;;;;;;;;
(setq inhibit-startup-message t)

;;;;;;;;;;;;; Time ;;;;;;;;;;;;;;;;;
;; display time
(display-time-mode 1)

;; set time display format
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)


;;;;;;; Tab realted setting;;;;;;;;;;
(setq default-tab-width 4)
(setq c-basic-offset 4)
(setq-default indent-tabs-mode nil)
(define-key global-map (kbd "RET") 'newline-and-indent)

(defun set-4offset(&optional arg)
  (interactive "p")
  (setq default-tab-width 4)
  (setq c-basic-offset 4)
  )

(defun set-2offset(&optional arg)
  (interactive "p")
  (setq default-tab-width 2)
  (setq c-basic-offset 2)
  )

;;;;;;; set title "title@Emacs";;
(setq frame-title-format "%b@Emacs")

;;;;;;;;;; Shortcut Keys ;;;;;;;;;;
(global-set-key [f5] 'compile)
(global-set-key [f8] 'calendar)
(global-set-key [f9] 'list-bookmarks)
(global-set-key [f10] 'speedbar)
;(global-set-key [f11] 'todo-mode)

;;; c-perl mode 
(defalias 'perl-mode 'cperl-mode)

(add-hook 'cperl-mode-hook
          (lambda()
            (require 'perl-completion)
            (perl-completion-mode t)))

;;;;;;;;;;;;;; MATLAB ;;;;;;;;;;;;;;;;;;;;;;;;;
(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
(add-to-list
 'auto-mode-alist
 '("\\.m$" . matlab-mode))
(setq matlab-indent-function t)
(setq matlab-shell-command "matlab")




(show-paren-mode 1)




;;; For mixed dos/unix style CF ;;;
(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))

;;;; Markdown files ;;;;
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;;;; Use google-chrome ;;;;
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")

;;;; JavaScripte ;;;;
(setq js-indent-level 2)
;;;; JSON ;;;;
(add-to-list 'auto-mode-alist '("\\.json\\'" . js-mode))


;;;; Google Protobuf ;;;
;; (add-to-list 'load-path "~/.emacs.d/plugins/protobuf")
;; (require 'protobuf-mode)
;; (setq auto-mode-alist  (cons '(".proto$" . protobuf-mode) auto-mode-alist))


;;;; nesC mode ;;;;
(add-to-list 'load-path "~/.emacs.d/plugins/nesc")
(setq load-path (cons (expand-file-name "X") load-path))
(autoload 'nesc-mode "nesc.el")
(add-to-list 'auto-mode-alist '("\\.nc\\'" . nesc-mode))

;;;; smart indent ;;;;
(add-to-list 'load-path "~/.emacs.d/plugins/smarttab")

;;;; Color Theme ;;;;;
(require 'color-theme)
(color-theme-initialize)
(color-theme-calm-forest)

;--------- cursor type -------------
(setq-default cursor-type 'bar)
(set-cursor-color "#8470ff")


;------------------ ECB ---------------------
(add-to-list 'load-path "~/.emacs.d/elpa")
(require 'ecb)

(global-set-key [f6] 'ecb-activate)
(global-set-key [f7] 'ecb-deactivate)
(global-set-key (kbd "C-c 1") 'ecb-goto-window-directories)                                                                                                                                   
(global-set-key (kbd "C-c 2") 'ecb-goto-window-sources)                                                                                                                                       
(global-set-key (kbd "C-c 3") 'ecb-goto-window-methods)                                                                                                                                       
(global-set-key (kbd "C-c 4") 'ecb-goto-window-history)                                                                                                                                       
(global-set-key (kbd "C-c 5") 'ecb-goto-window-edit1)       

; ------------ Split Window Binding ------------
(global-set-key (kbd "C-c e") 'split-window-right)
(global-set-key (kbd "C-c o") 'split-window-below)

;------ resize window ------------
(global-set-key (kbd "C-c k") 'enlarge-window)
(global-set-key (kbd "C-c i") 'shrink-window)
(global-set-key (kbd "C-c j") 'enlarge-window-horizontally)
(global-set-key (kbd "C-c l") 'shrink-window-horizontally)

;—— latex-preview-pane —————
;(setq exec-path (append exec-path '("YOUR/PATH/TO/LATEXB/BIN/")) ) ; if emacs complains “can not find file or directory pdflatex”

; -- windmove -----
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)

;---- anaconda-mode ------
(add-hook 'python-mode-hook 'anaconda-mode)

;----- buffer-move ----------
(global-set-key (kbd "C-c f") 'buf-move-left)
(global-set-key (kbd "C-c h") 'buf-move-right)
(global-set-key (kbd "C-c t") 'buf-move-up)
(global-set-key (kbd "C-c g") 'buf-move-down)

; ----- auto-revert ----------
(global-auto-revert-mode t)

; ------ dumb-jump-------------
(dumb-jump-mode t)
(global-set-key (kbd "C-c s") 'dumb-jump-go)

(global-semantic-idle-summary-mode 1)

; ----- gdb many windows ------
(setq
 ;; use gdb-many-windows by default
 gdb-many-windows t

 ;; Non-nil means display source file containing the main routine at startup
 gdb-show-main t
 )
 
 ;;;;;;;;;; key-chord ;;;;;;;;;;;;                                                                                                                                                                                                              
(require 'key-chord)                                                                                                                                                                                                                           
                                                                                                                                                                                                                                               
(key-chord-define-global "ff" 'find-file-in-project)   
(key-chord-define-global "ms" 'magit-status)                                                                                                                                                                                           
(key-chord-define-global "fs" 'find-file-in-project-by-selected) 
(key-chord-define-global "oo" (lambda() (interactive)(find-file "~/notes.org"))) 
;(key-chord-define-global "oo" 'helm-occur)
(key-chord-define-global "tt" 'helm-top)
(key-chord-define-global "cc" 'compile)
(key-chord-define-global "fd" 'helm-semantic-or-imenu)    
 
(key-chord-mode +1)  

;;;;;;;; helm ;;;;;;;;;
(helm-mode 1)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x C-f") #'helm-find-files)

;;;;;;;; jedi ;;;;;;;;;;;;
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t) 


 ;;;;;;; helm-swoop ;;;;;;
 (global-set-key (kbd "C-s") #'helm-multi-swoop-all)
 
 ;;;;;; tabbar-ruler ;;;;;;
 (tabbar-ruler-up 1)
 
 ;;;;;; auto docstring ;;;;;;;;;
 (add-hook 'python-mode-hook (lambda ()                                                                                                                                                                                                        
                                  (require 'sphinx-doc)                                                                                                                                                                                        
                                  (sphinx-doc-mode t)))                                                                                                                                                                                        
;(key-chord-define-global "dd" 'sphinx-doc)                  
 
 
;;;;;; google stype docstring ;;;;;;;;;;;
(defun chomp (str)
        "Chomp leading and tailing whitespace from STR."
        (let ((s (if (symbolp str) (symbol-name str) str)))
          (replace-regexp-in-string
           "\\(^[[:space:]\n]*\\|[[:space:]\n]*$\\)" "" s)))
 (defun get-function-definition(sentence)
    (if (string-match "def.*(.*):" sentence)
        (match-string 0 sentence)))
 (defun get-parameters(sentence)
    (setq y (get-function-definition sentence))
    (if y
        (if (string-match "(.*)" y)
            (match-string 0 y))))
 (autoload 'thing-at-point "thingatpt" nil t) ;; build-in librairie
 (defun python-insert-docstring()
        (interactive)
        (setq p (get-parameters (thing-at-point 'sentence)))
        (forward-line 1)
        (insert "    \"\"\"\n")
        (insert "\tArgs:\n")
        (setq params (split-string p "[?\,?\(?\)?\ ]"))
        (while params
          (if (/= (length (chomp (car params))) 0)
              (progn
                (insert "        ")
                (insert (chomp (car params)))
                (insert ": \n")))
          (setq params (cdr params)))
        (insert "    Returns:\n    \"\"\"\n"))
      (global-set-key (kbd "<f9>") 'python-insert-docstring)
      
; —— ediff —————
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ediff                                                                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(require 'ediff)
;; don't start another frame
;; this is done by default in preluse
;;(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;; put windows side by side
;;(setq ediff-split-window-function (quote split-window-horizontally))
;;revert windows on exit - needs winner mode
;;(winner-mode)
;;(add-hook 'ediff-after-quit-hook-internal 'winner-undo)
;;----------------------------------------------------------------------------                                                                                                                                     
;; ipdb                                                                                                                                                                                                            
;; from: pedrokroger.net/2010/07/configuring-emacs-as-a-python-ide-2/                                                                                                                                              
;; Highlight ipdb lines:                                                                                                                                                                                           
(defun annotate-pdb ()                                                                                                                                                                                             
  (interactive)                                                                                                                                                                                                    
  (highlight-lines-matching-regexp "import pdb")                                                                                                                                                                   
  (highlight-lines-matching-regexp "pdb.set_trace()"))                                                                                                                                                             
                                                                                                                                                                                                                   
(add-hook 'python-mode-hook 'annotate-pdb)                                                                                                                                                                         
                                                                                                                                                                                                                   
;;----------                                                                                                                                                                                                       
;; Keybinding to add breakpoint:                                                                                                                                                                                   
(defun python-add-breakpoint ()                                                                                                                                                                                    
  (interactive)                                                                                                                                                                                                    
  (newline-and-indent)                                                                                                                                                                                             
  (insert "import ipdb; ipdb.set_trace()")                                                                                                                                                                         
  (highlight-lines-matching-regexp "^[ ]*import ipdb; ipdb.set_trace()"))                                                                                                                                          
                                                                                                                                                                                                                   
(key-chord-define-global "st" 'python-add-breakpoint)                                                                                                                                                              
;;(define-key global-map (kbd "C-c C-t") 'python-add-breakpoint)                                                                                                                                                   
                                                                                                                                                                                                                   
;; (define-key python-mode-map (kbd "C-c C-t") 'python-add-breakpoint)                                                                                                                                             
                                                                               
