;; Object figure_factory/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "figure_factory/"
  :tables
  (list
    (semanticdb-table "_quiver.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [1 39])
            ("math" include nil nil [41 52])
            ("plotly" include nil nil [54 83])
            ("plotly.graph_objs" include nil nil [84 124])
            ("plotly.figure_factory" include nil nil [125 164])
            ("create_quiver" function
               (:documentation "
    Returns data for a quiver plot.

    :param (list|ndarray) x: x coordinates of the arrow locations
    :param (list|ndarray) y: y coordinates of the arrow locations
    :param (list|ndarray) u: x components of the arrow vectors
    :param (list|ndarray) v: y components of the arrow vectors
    :param (float in [0,1]) scale: scales size of the arrows(ideally to
        avoid overlap). Default = .1
    :param (float in [0,1]) arrow_scale: value multiplied to length of barb
        to get length of arrowhead. Default = .3
    :param (angle in radians) angle: angle of arrowhead. Default = pi/9
    :param kwargs: kwargs passed through plotly.graph_objs.Scatter
        for more information on valid kwargs call
        help(plotly.graph_objs.Scatter)

    :rtype (dict): returns a representation of quiver figure.

    Example 1: Trivial Quiver
    ```
    import plotly.plotly as py
    from plotly.figure_factory import create_quiver

    import math

    # 1 Arrow from (0,0) to (1,1)
    fig = create_quiver(x=[0], y=[0], u=[1], v=[1], scale=1)

    py.plot(fig, filename='quiver')
    ```

    Example 2: Quiver plot using meshgrid
    ```
    import plotly.plotly as py
    from plotly.figure_factory import create_quiver

    import numpy as np
    import math

    # Add data
    x,y = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))
    u = np.cos(x)*y
    v = np.sin(x)*y

    #Create quiver
    fig = create_quiver(x, y, u, v)

    # Plot
    py.plot(fig, filename='quiver')
    ```

    Example 3: Styling the quiver plot
    ```
    import plotly.plotly as py
    from plotly.figure_factory import create_quiver
    import numpy as np
    import math

    # Add data
    x, y = np.meshgrid(np.arange(-np.pi, math.pi, .5),
                       np.arange(-math.pi, math.pi, .5))
    u = np.cos(x)*y
    v = np.sin(x)*y

    # Create quiver
    fig = create_quiver(x, y, u, v, scale=.2, arrow_scale=.3, angle=math.pi/6,
                        name='Wind Velocity', line=Line(width=1))

    # Add title to layout
    fig['layout'].update(title='Quiver Plot')

    # Plot
    py.plot(fig, filename='quiver')
    ```
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [185 186])
                    ("y" variable nil (reparse-symbol function_parameters) [188 189])
                    ("u" variable nil (reparse-symbol function_parameters) [191 192])
                    ("v" variable nil (reparse-symbol function_parameters) [194 195])
                    ("scale" variable nil (reparse-symbol function_parameters) [197 202])
                    ("arrow_scale" variable nil (reparse-symbol function_parameters) [207 218])
                    ("angle" variable nil (reparse-symbol function_parameters) [241 246])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [260 268]))                  )
                nil [167 3065])
            ("_Quiver" type
               (:documentation "
    Refer to FigureFactory.create_quiver() for docstring
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("try" code nil (reparse-symbol indented_block_body) [3261 3355])
                            ("try" code nil (reparse-symbol indented_block_body) [3364 3458])
                            ("try" code nil (reparse-symbol indented_block_body) [3467 3561])
                            ("try" code nil (reparse-symbol indented_block_body) [3570 3664])
                            ("self" variable nil (reparse-symbol indented_block_body) [3673 3683])
                            ("self" variable nil (reparse-symbol indented_block_body) [3692 3702])
                            ("self" variable nil (reparse-symbol indented_block_body) [3711 3721])
                            ("self" variable nil (reparse-symbol indented_block_body) [3730 3740])
                            ("self" variable nil (reparse-symbol indented_block_body) [3749 3767])
                            ("self" variable nil (reparse-symbol indented_block_body) [3776 3806])
                            ("self" variable nil (reparse-symbol indented_block_body) [3815 3833])
                            ("self" variable nil (reparse-symbol indented_block_body) [3842 3857])
                            ("self" variable nil (reparse-symbol indented_block_body) [3866 3881])
                            ("self" code nil (reparse-symbol indented_block_body) [3890 3905])
                            ("barb_x, barb_y" code nil (reparse-symbol indented_block_body) [3914 3947])
                            ("arrow_x, arrow_y" code nil (reparse-symbol indented_block_body) [3956 3999]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3180 3184])
                            ("x" variable nil (reparse-symbol function_parameters) [3186 3187])
                            ("y" variable nil (reparse-symbol function_parameters) [3189 3190])
                            ("u" variable nil (reparse-symbol function_parameters) [3192 3193])
                            ("v" variable nil (reparse-symbol function_parameters) [3195 3196])
                            ("scale" variable nil (reparse-symbol function_parameters) [3215 3220])
                            ("arrow_scale" variable nil (reparse-symbol function_parameters) [3222 3233])
                            ("angle" variable nil (reparse-symbol function_parameters) [3235 3240])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3242 3250]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3167 4000])
                    ("scale_uv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4018 4022]))                          
                        :documentation "
        Scales u and v to avoid overlap of the arrows.

        u and v are added to x and y to get the
        endpoints of the arrows so a smaller scale value will
        result in less overlap of arrows.
        ")
                        (reparse-symbol indented_block_body) [4005 4357])
                    ("get_barbs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4376 4380]))                          
                        :documentation "
        Creates x and y startpoint and endpoint pairs

        After finding the endpoint of each barb this zips startpoint and
        endpoint pairs to create 2 lists: x_values for barbs and y values
        for barbs

        :rtype: (list, list) barb_x, barb_y: list of startpoint and endpoint
            x_value pairs separated by a None to create the barb of the arrow,
            and list of startpoint and endpoint y_value pairs separated by a
            None to create the barb of the arrow.
        ")
                        (reparse-symbol indented_block_body) [4362 5226])
                    ("get_quiver_arrows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5253 5257]))                          
                        :documentation "
        Creates lists of x and y values to plot the arrows

        Gets length of each barb then calculates the length of each side of
        the arrow. Gets angle of barb and applies angle to each side of the
        arrowhead. Next uses arrow_scale to scale the length of arrowhead and
        creates x and y values for arrowhead point1 and point2. Finally x and y
        values for point1, endpoint and point2s for each arrowhead are
        separated by a None and zipped to create lists of x and y values for
        the arrows.

        :rtype: (list, list) arrow_x, arrow_y: list of point1, endpoint, point2
            x_values separated by a None to create the arrowhead and list of
            point1, endpoint, point2 y_values separated by a None to create
            the barb of the arrow.
        ")
                        (reparse-symbol indented_block_body) [5231 8270]))                  
                :type "class")
                nil [3067 8270]))          
      :file "_quiver.py"
      :pointmax 8270
      :fsize 8269
      :lastmodtime '(22802 1724 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "_streamline.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [1 39])
            ("math" include nil nil [41 52])
            ("plotly" include nil nil [54 101])
            ("plotly.figure_factory" include nil nil [102 141])
            ("plotly.graph_objs" include nil nil [142 182])
            ("np" variable nil nil [184 225])
            ("validate_streamline" function
               (:documentation "
    Streamline-specific validations

    Specifically, this checks that x and y are both evenly spaced,
    and that the package numpy is available.

    See FigureFactory.create_streamline() for params

    :raises: (ImportError) If numpy is not available.
    :raises: (PlotlyError) If x is not evenly spaced.
    :raises: (PlotlyError) If y is not evenly spaced.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [252 253])
                    ("y" variable nil (reparse-symbol function_parameters) [255 256]))                  )
                nil [228 1223])
            ("create_streamline" function
               (:documentation "
    Returns data for a streamline plot.

    :param (list|ndarray) x: 1 dimensional, evenly spaced list or array
    :param (list|ndarray) y: 1 dimensional, evenly spaced list or array
    :param (ndarray) u: 2 dimensional array
    :param (ndarray) v: 2 dimensional array
    :param (float|int) density: controls the density of streamlines in
        plot. This is multiplied by 30 to scale similiarly to other
        available streamline functions such as matplotlib.
        Default = 1
    :param (angle in radians) angle: angle of arrowhead. Default = pi/9
    :param (float in [0,1]) arrow_scale: value to scale length of arrowhead
        Default = .09
    :param kwargs: kwargs passed through plotly.graph_objs.Scatter
        for more information on valid kwargs call
        help(plotly.graph_objs.Scatter)

    :rtype (dict): returns a representation of streamline figure.

    Example 1: Plot simple streamline and increase arrow size
    ```
    import plotly.plotly as py
    from plotly.figure_factory import create_streamline

    import numpy as np
    import math

    # Add data
    x = np.linspace(-3, 3, 100)
    y = np.linspace(-3, 3, 100)
    Y, X = np.meshgrid(x, y)
    u = -1 - X**2 + Y
    v = 1 + X - Y**2
    u = u.T  # Transpose
    v = v.T  # Transpose

    # Create streamline
    fig = create_streamline(x, y, u, v, arrow_scale=.1)

    # Plot
    py.plot(fig, filename='streamline')
    ```

    Example 2: from nbviewer.ipython.org/github/barbagroup/AeroPython
    ```
    import plotly.plotly as py
    from plotly.figure_factory import create_streamline

    import numpy as np
    import math

    # Add data
    N = 50
    x_start, x_end = -2.0, 2.0
    y_start, y_end = -1.0, 1.0
    x = np.linspace(x_start, x_end, N)
    y = np.linspace(y_start, y_end, N)
    X, Y = np.meshgrid(x, y)
    ss = 5.0
    x_s, y_s = -1.0, 0.0

    # Compute the velocity field on the mesh grid
    u_s = ss/(2*np.pi) * (X-x_s)/((X-x_s)**2 + (Y-y_s)**2)
    v_s = ss/(2*np.pi) * (Y-y_s)/((X-x_s)**2 + (Y-y_s)**2)

    # Create streamline
    fig = create_streamline(x, y, u_s, v_s, density=2, name='streamline')

    # Add source point
    point = Scatter(x=[x_s], y=[y_s], mode='markers',
                    marker=Marker(size=14), name='source point')

    # Plot
    fig['data'].append(point)
    py.plot(fig, filename='streamline')
    ```
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [1247 1248])
                    ("y" variable nil (reparse-symbol function_parameters) [1250 1251])
                    ("u" variable nil (reparse-symbol function_parameters) [1253 1254])
                    ("v" variable nil (reparse-symbol function_parameters) [1256 1257])
                    ("density" variable nil (reparse-symbol function_parameters) [1259 1266])
                    ("angle" variable nil (reparse-symbol function_parameters) [1270 1275])
                    ("arrow_scale" variable nil (reparse-symbol function_parameters) [1311 1322])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [1328 1336]))                  )
                nil [1225 4589])
            ("_Streamline" type
               (:documentation "
    Refer to FigureFactory.create_streamline() for docstring
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4812 4832])
                            ("self" variable nil (reparse-symbol indented_block_body) [4841 4861])
                            ("self" variable nil (reparse-symbol indented_block_body) [4870 4890])
                            ("self" variable nil (reparse-symbol indented_block_body) [4899 4919])
                            ("self" variable nil (reparse-symbol indented_block_body) [4928 4946])
                            ("self" variable nil (reparse-symbol indented_block_body) [4955 4985])
                            ("self" variable nil (reparse-symbol indented_block_body) [4994 5026])
                            ("self" code nil (reparse-symbol indented_block_body) [5073 5109])
                            ("self" code nil (reparse-symbol indented_block_body) [5118 5154])
                            ("self" variable nil (reparse-symbol indented_block_body) [5163 5182])
                            ("self" variable nil (reparse-symbol indented_block_body) [5191 5210])
                            ("self" variable nil (reparse-symbol indented_block_body) [5245 5296])
                            ("self" code nil (reparse-symbol indented_block_body) [5305 5359])
                            ("self" code nil (reparse-symbol indented_block_body) [5368 5422])
                            ("self" variable nil (reparse-symbol indented_block_body) [5431 5453])
                            ("self" code nil (reparse-symbol indented_block_body) [5509 5551])
                            ("self" code nil (reparse-symbol indented_block_body) [5560 5602])
                            ("self" variable nil (reparse-symbol indented_block_body) [5611 5658])
                            ("self" variable nil (reparse-symbol indented_block_body) [5712 5733])
                            ("self" variable nil (reparse-symbol indented_block_body) [5742 5763])
                            ("self" variable nil (reparse-symbol indented_block_body) [5772 5786])
                            ("self" variable nil (reparse-symbol indented_block_body) [5795 5809])
                            ("self" code nil (reparse-symbol indented_block_body) [5818 5840])
                            ("streamline_x, streamline_y" code nil (reparse-symbol indented_block_body) [5849 5900])
                            ("arrows_x, arrows_y" code nil (reparse-symbol indented_block_body) [5909 5958]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4712 4716])
                            ("x" variable nil (reparse-symbol function_parameters) [4718 4719])
                            ("y" variable nil (reparse-symbol function_parameters) [4721 4722])
                            ("u" variable nil (reparse-symbol function_parameters) [4724 4725])
                            ("v" variable nil (reparse-symbol function_parameters) [4727 4728])
                            ("density" variable nil (reparse-symbol function_parameters) [4747 4754])
                            ("angle" variable nil (reparse-symbol function_parameters) [4756 4761])
                            ("arrow_scale" variable nil (reparse-symbol function_parameters) [4780 4791])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4793 4801]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4699 5959])
                    ("blank_pos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5978 5982])
                            ("xi" variable nil (reparse-symbol function_parameters) [5984 5986])
                            ("yi" variable nil (reparse-symbol function_parameters) [5988 5990]))                          
                        :documentation "
        Set up positions for trajectories to be used with rk4 function.
        ")
                        (reparse-symbol indented_block_body) [5964 6189])
                    ("value_at" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6207 6211])
                            ("a" variable nil (reparse-symbol function_parameters) [6213 6214])
                            ("xi" variable nil (reparse-symbol function_parameters) [6216 6218])
                            ("yi" variable nil (reparse-symbol function_parameters) [6220 6222]))                          
                        :documentation "
        Set up for RK4 function, based on Bokeh's streamline code
        ")
                        (reparse-symbol indented_block_body) [6194 6869])
                    ("rk4_integrate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6892 6896])
                            ("x0" variable nil (reparse-symbol function_parameters) [6898 6900])
                            ("y0" variable nil (reparse-symbol function_parameters) [6902 6904]))                          
                        :documentation "
        RK4 forward and back trajectories from the initial conditions.

        Adapted from Bokeh's streamline -uses Runge-Kutta method to fill
        x and y trajectories then checks length of traj (s in units of axes)
        ")
                        (reparse-symbol indented_block_body) [6874 9717])
                    ("traj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9731 9735])
                            ("xb" variable nil (reparse-symbol function_parameters) [9737 9739])
                            ("yb" variable nil (reparse-symbol function_parameters) [9741 9743]))                          
                        :documentation "
        Integrate trajectories

        :param (int) xb: results of passing xi through self.blank_pos
        :param (int) xy: results of passing yi through self.blank_pos

        Calculate each trajectory based on rk4 integrate method.
        ")
                        (reparse-symbol indented_block_body) [9722 10288])
                    ("get_streamlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10313 10317]))                          
                        :documentation "
        Get streamlines by building trajectory set.
        ")
                        (reparse-symbol indented_block_body) [10293 11243])
                    ("get_streamline_arrows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11274 11278]))                          
                        :documentation "
        Makes an arrow for each streamline.

        Gets angle of streamline at 1/3 mark and creates arrow coordinates
        based off of user defined angle and arrow_scale.

        :param (array) st_x: x-values for all streamlines
        :param (array) st_y: y-values for all streamlines
        :param (angle in radians) angle: angle of arrowhead. Default = pi/9
        :param (float in [0,1]) arrow_scale: value to scale length of arrowhead
            Default = .09
        :rtype (list, list) arrows_x: x-values to create arrowhead and
            arrows_y: y-values to create arrowhead
        ")
                        (reparse-symbol indented_block_body) [11248 14439])
                    ("sum_streamlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14464 14468]))                          
                        :documentation "
        Makes all streamlines readable as a single trace.

        :rtype (list, list): streamline_x: all x values for each streamline
            combined into single list and streamline_y: all y values for each
            streamline combined into single list
        ")
                        (reparse-symbol indented_block_body) [14444 14883]))                  
                :type "class")
                nil [4591 14883]))          
      :file "_streamline.py"
      :pointmax 14883
      :fsize 14882
      :lastmodtime '(22802 1724 0 0)
      :unmatched-syntax nil))
  :file "!Users!xiaoli!anaconda!lib!python3.6!site-packages!plotly!figure_factory!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
