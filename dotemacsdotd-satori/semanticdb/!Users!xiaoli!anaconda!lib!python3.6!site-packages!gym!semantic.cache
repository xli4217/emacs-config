;; Object gym/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "gym/"
  :tables
  (list
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("distutils.version" include nil nil [1 25])
            ("os" include nil nil [26 35])
            ("sys" include nil nil [36 46])
            ("warnings" include nil nil [47 62])
            ("gym" include nil nil [64 85])
            ("gym.utils" include nil nil [86 115])
            ("gym.version" include nil nil [116 162])
            ("gym.core" include nil nil [164 263])
            ("gym.envs" include nil nil [264 295])
            ("gym" include nil nil [296 336])
            ("undo_logger_setup" function nil nil [338 477])
            ("__all__" variable nil nil [478 543]))          
      :file "__init__.py"
      :pointmax 544
      :fsize 543
      :lastmodtime '(23188 14174 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "version.py"
      :file "version.py"
      :fsize 19
      :lastmodtime '(23189 5152 0 0))
    (semanticdb-table "core.py"
      :major-mode 'python-mode
      :tags 
        '( ("gym" include nil nil [1 23])
            ("numpy" include nil nil [24 42])
            ("gym" include nil nil [44 54])
            ("gym" include nil nil [55 76])
            ("gym.utils" include nil nil [77 105])
            ("env_closer" variable nil nil [107 135])
            ("Env" type
               (:documentation "The main OpenAI Gym class. It encapsulates an environment with
    arbitrary behind-the-scenes dynamics. An environment can be
    partially or fully observed.

    The main API methods that users of this class need to know are:

        step
        reset
        render
        close
        seed

    And set the following attributes:

        action_space: The Space object corresponding to valid actions
        observation_space: The Space object corresponding to valid observations
        reward_range: A tuple corresponding to the min and max possible rewards

    Note: a default reward range set to [-inf,+inf] already exists. Set it if you want a narrower range.

    The methods are accessed publicly as \"step\", \"reset\", etc.. The
    non-underscored versions are wrapper methods to which we may add
    functionality over time.
    "
                :superclasses ("object")
                :members 
                  ( ("metadata" variable nil (reparse-symbol indented_block_body) [1080 1111])
                    ("reward_range" variable nil (reparse-symbol indented_block_body) [1116 1148])
                    ("spec" variable nil (reparse-symbol indented_block_body) [1153 1164])
                    ("action_space" variable nil (reparse-symbol indented_block_body) [1204 1223])
                    ("observation_space" variable nil (reparse-symbol indented_block_body) [1228 1252])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1267 1271])
                            ("action" variable nil (reparse-symbol function_parameters) [1273 1279]))                          
                        :documentation "Run one timestep of the environment's dynamics. When end of
        episode is reached, you are responsible for calling `reset()`
        to reset this environment's state.

        Accepts an action and returns a tuple (observation, reward, done, info).

        Args:
            action (object): an action provided by the environment

        Returns:
            observation (object): agent's observation of the current environment
            reward (float) : amount of reward returned after previous action
            done (boolean): whether the episode has ended, in which case further step() calls will return undefined results
            info (dict): contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)
        ")
                        (reparse-symbol indented_block_body) [1258 2091])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2106 2110]))                          
                        :documentation "Resets the state of the environment and returns an initial observation.

        Returns: observation (object): the initial observation of the
            space.
        ")
                        (reparse-symbol indented_block_body) [2096 2332])
                    ("render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2348 2352])
                            ("mode" variable nil (reparse-symbol function_parameters) [2354 2358]))                          
                        :documentation "Renders the environment.

        The set of supported modes varies per environment. (And some
        environments do not support rendering at all.) By convention,
        if mode is:

        - human: render to the current display or terminal and
          return nothing. Usually for human consumption.
        - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
          representing RGB values for an x-by-y pixel image, suitable
          for turning into a video.
        - ansi: Return a string (str) or StringIO.StringIO containing a
          terminal-style text representation. The text can include newlines
          and ANSI escape sequences (e.g. for colors).

        Note:
            Make sure that your class's metadata 'render.modes' key includes
              the list of supported modes. It's recommended to call super()
              in implementations to use the functionality of this method.

        Args:
            mode (str): the mode to render with
            close (bool): close all open renderings

        Example:

        class MyEnv(Env):
            metadata = {'render.modes': ['human', 'rgb_array']}

            def render(self, mode='human'):
                if mode == 'rgb_array':
                    return np.array(...) # return RGB frame suitable for video
                elif mode is 'human':
                    ... # pop up a window and render
                else:
                    super(MyEnv, self).render(mode=mode) # just raise an exception
        ")
                        (reparse-symbol indented_block_body) [2337 3934])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3949 3953]))                          
                        :documentation "Override _close in your subclass to perform any necessary cleanup.

        Environments will automatically close() themselves when
        garbage collected or when the program exits.
        ")
                        (reparse-symbol indented_block_body) [3939 4179])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4193 4197])
                            ("seed" variable nil (reparse-symbol function_parameters) [4199 4203]))                          
                        :documentation "Sets the seed for this env's random number generator(s).

        Note:
            Some environments use multiple pseudorandom number generators.
            We want to capture all such seeds used in order to ensure that
            there aren't accidental correlations between multiple generators.

        Returns:
            list<bigint>: Returns the list of seeds used in this env's random
              number generators. The first value in the list should be the
              \"main\" seed, or the value which a reproducer should pass to
              'seed'. Often, the main seed equals the provided 'seed', but
              this won't be true if seed=None, for example.
        ")
                        (reparse-symbol indented_block_body) [4184 4988])
                    ("unwrapped" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5021 5025]))                          
                        :documentation "Completely unwrap this env.

        Returns:
            gym.Env: The base non-wrapped gym.Env instance
        ")
                        (reparse-symbol indented_block_body) [4993 5176])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5193 5197]))                          )
                        (reparse-symbol indented_block_body) [5181 5379]))                  
                :type "class")
                nil [165 5379])
            ("GoalEnv" type
               (:documentation "A goal-based environment. It functions just as any regular OpenAI Gym environment but it
    imposes a required structure on the observation_space. More concretely, the observation
    space is required to contain at least three elements, namely `observation`, `desired_goal`, and
    `achieved_goal`. Here, `desired_goal` specifies the goal that the agent should attempt to achieve.
    `achieved_goal` is the goal that it currently achieved instead. `observation` contains the
    actual observations of the environment as per usual.
    "
                :superclasses ("Env")
                :members 
                  ( ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5967 5971]))                          )
                        (reparse-symbol indented_block_body) [5957 6507])
                    ("compute_reward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6531 6535])
                            ("achieved_goal" variable nil (reparse-symbol function_parameters) [6537 6550])
                            ("desired_goal" variable nil (reparse-symbol function_parameters) [6552 6564])
                            ("info" variable nil (reparse-symbol function_parameters) [6566 6570]))                          
                        :documentation "Compute the step reward. This externalizes the reward function and makes
        it dependent on an a desired goal and the one that was achieved. If you wish to include
        additional rewards that are independent of the goal, you can include the necessary values
        to derive it in info and compute it accordingly.

        Args:
            achieved_goal (object): the goal that was achieved during execution
            desired_goal (object): the desired goal that we asked the agent to attempt to achieve
            info (dict): an info dictionary with additional information

        Returns:
            float: The reward that corresponds to the provided achieved goal w.r.t. to the desired
            goal. Note that the following should always hold true:

                ob, reward, done, info = env.step()
                assert reward == env.compute_reward(ob['achieved_goal'], ob['goal'], info)
        ")
                        (reparse-symbol indented_block_body) [6512 7549]))                  
                :type "class")
                nil [5381 7549])
            ("Space" type
               (:documentation "Defines the observation and action spaces, so you can write generic
    code that applies to any Env. For example, you can choose a random
    action.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("tuple" code nil (reparse-symbol indented_block_body) [7863 7875])
                            ("np" code nil (reparse-symbol indented_block_body) [7924 7939]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7784 7788])
                            ("shape" variable nil (reparse-symbol function_parameters) [7790 7795])
                            ("dtype" variable nil (reparse-symbol function_parameters) [7802 7807]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7771 7940])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7956 7960]))                          
                        :documentation "
        Uniformly randomly sample a random element of this space
        ")
                        (reparse-symbol indented_block_body) [7945 8086])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8104 8108])
                            ("x" variable nil (reparse-symbol function_parameters) [8110 8111]))                          
                        :documentation "
        Return boolean specifying if x is a valid
        member of this space
        ")
                        (reparse-symbol indented_block_body) [8091 8251])
                    ("to_jsonable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8272 8276])
                            ("sample_n" variable nil (reparse-symbol function_parameters) [8278 8286]))                          
                        :documentation "Convert a batch of samples from this space to a JSONable data type.")
                        (reparse-symbol indented_block_body) [8256 8445])
                    ("from_jsonable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8468 8472])
                            ("sample_n" variable nil (reparse-symbol function_parameters) [8474 8482]))                          
                        :documentation "Convert a JSONable data type to a batch of samples from this space.")
                        (reparse-symbol indented_block_body) [8450 8641]))                  
                :type "class")
                nil [7580 8641])
            ("warn_once" variable nil nil [8643 8659])
            ("deprecated_warn_once" function (:arguments 
              ( ("text" variable nil (reparse-symbol function_parameters) [8686 8690]))              ) nil [8661 8787])
            ("Wrapper" type
               (:superclasses ("Env")
                :members 
                  ( ("env" variable nil (reparse-symbol indented_block_body) [8813 8823])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8862 8876])
                            ("self" variable nil (reparse-symbol indented_block_body) [8885 8926])
                            ("self" variable nil (reparse-symbol indented_block_body) [8935 8986])
                            ("self" variable nil (reparse-symbol indented_block_body) [8995 9036])
                            ("self" variable nil (reparse-symbol indented_block_body) [9045 9078])
                            ("self" code nil (reparse-symbol indented_block_body) [9087 9111]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8842 8846])
                            ("env" variable nil (reparse-symbol function_parameters) [8848 8851]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8829 9112])
                    ("class_name" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9149 9152]))                          )
                        (reparse-symbol indented_block_body) [9117 9183])
                    ("_warn_double_wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9210 9214]))                          )
                        (reparse-symbol indented_block_body) [9188 9557])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9571 9575])
                            ("action" variable nil (reparse-symbol function_parameters) [9577 9583]))                          )
                        (reparse-symbol indented_block_body) [9562 10089])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10104 10108])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10110 10118]))                          )
                        (reparse-symbol indented_block_body) [10094 10637])
                    ("render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10653 10657])
                            ("mode" variable nil (reparse-symbol function_parameters) [10659 10663]))                          )
                        (reparse-symbol indented_block_body) [10642 10711])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10726 10730]))                          )
                        (reparse-symbol indented_block_body) [10716 10790])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10804 10808])
                            ("seed" variable nil (reparse-symbol function_parameters) [10810 10814]))                          )
                        (reparse-symbol indented_block_body) [10795 10857])
                    ("compute_reward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10881 10885])
                            ("achieved_goal" variable nil (reparse-symbol function_parameters) [10887 10900])
                            ("desired_goal" variable nil (reparse-symbol function_parameters) [10902 10914])
                            ("info" variable nil (reparse-symbol function_parameters) [10916 10920]))                          )
                        (reparse-symbol indented_block_body) [10862 10997])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11014 11018]))                          )
                        (reparse-symbol indented_block_body) [11002 11083])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11101 11105]))                          )
                        (reparse-symbol indented_block_body) [11088 11133])
                    ("unwrapped" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11166 11170]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11138 11207])
                    ("spec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11235 11239]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11212 11271]))                  
                :type "class")
                nil [8789 11271])
            ("ObservationWrapper" type
               (:superclasses ("Wrapper")
                :members 
                  ( ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11321 11325])
                            ("action" variable nil (reparse-symbol function_parameters) [11327 11333]))                          )
                        (reparse-symbol indented_block_body) [11312 11465])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11480 11484])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11486 11494]))                          )
                        (reparse-symbol indented_block_body) [11470 11589])
                    ("observation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11610 11614])
                            ("observation" variable nil (reparse-symbol function_parameters) [11616 11627]))                          )
                        (reparse-symbol indented_block_body) [11594 11818]))                  
                :type "class")
                nil [11273 11818])
            ("RewardWrapper" type
               (:superclasses ("Wrapper")
                :members 
                  ( ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11864 11868]))                          )
                        (reparse-symbol indented_block_body) [11854 11903])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11917 11921])
                            ("action" variable nil (reparse-symbol function_parameters) [11923 11929]))                          )
                        (reparse-symbol indented_block_body) [11908 12056])
                    ("reward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12072 12076])
                            ("reward" variable nil (reparse-symbol function_parameters) [12078 12084]))                          )
                        (reparse-symbol indented_block_body) [12061 12255]))                  
                :type "class")
                nil [11820 12255])
            ("ActionWrapper" type
               (:superclasses ("Wrapper")
                :members 
                  ( ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12300 12304])
                            ("action" variable nil (reparse-symbol function_parameters) [12306 12312]))                          )
                        (reparse-symbol indented_block_body) [12291 12389])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12404 12408]))                          )
                        (reparse-symbol indented_block_body) [12394 12443])
                    ("action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12459 12463])
                            ("action" variable nil (reparse-symbol function_parameters) [12465 12471]))                          )
                        (reparse-symbol indented_block_body) [12448 12642])
                    ("reverse_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12666 12670])
                            ("action" variable nil (reparse-symbol function_parameters) [12672 12678]))                          )
                        (reparse-symbol indented_block_body) [12647 12873]))                  
                :type "class")
                nil [12257 12873]))          
      :file "core.py"
      :pointmax 12873
      :fsize 12872
      :lastmodtime '(23188 14174 0 0)
      :unmatched-syntax '((NAME 7884 . 7888) (IF 7902 . 7904) (ELSE 7919 . 7923) (NAME 7823 . 7827) (IF 7841 . 7843) (ELSE 7858 . 7862))))
  :file "!Users!xiaoli!anaconda!lib!python3.6!site-packages!gym!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
