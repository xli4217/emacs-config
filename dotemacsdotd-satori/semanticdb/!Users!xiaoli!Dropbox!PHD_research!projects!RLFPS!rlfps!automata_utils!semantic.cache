;; Object automata_utils/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "automata_utils/"
  :tables
  (list
    (semanticdb-table "product.py"
      :major-mode 'python-mode
      :tags 
        '( ("networkx" include nil nil [1 22])
            ("itertools" include nil nil [23 45])
            ("lomap.classes.model" include nil nil [46 83])
            ("lomap.classes.ts" include nil nil [84 115])
            ("lomap.classes.markov" include nil nil [116 155])
            ("sys" include nil nil [156 166])
            ("logging" include nil nil [167 181])
            ("functools" include nil nil [182 210])
            ("logger" variable nil nil [212 248])
            ("fsa_times_fsa" function (:arguments 
              ( ("fsa1" variable nil (reparse-symbol function_parameters) [268 272])
                ("fsa2" variable nil (reparse-symbol function_parameters) [274 278]))              ) nil [250 2412])
            ("if" code nil nil [2413 2703]))          
      :file "product.py"
      :pointmax 2703
      :fsize 2702
      :lastmodtime '(22833 34302 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "plot_dynamic_graph.py"
      :major-mode 'python-mode
      :tags 
        '( ("random" include nil nil [1 14])
            ("matplotlib.pyplot" include nil nil [15 50])
            ("networkx" include nil nil [51 72])
            ("classes" include nil nil [73 110])
            ("numpy" include nil nil [111 129])
            ("scipy" include nil nil [130 152])
            ("visdom" include nil nil [153 166])
            ("PlotDynamicAutomata" type
               (:superclasses ("object")
                :members 
                  ( ("'''
    Uses visdom (https://github.com/facebookresearch/visdom) to dynamically update
    the automata graph visualization
    '''" code nil (reparse-symbol indented_block_body) [209 340])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [388 412])
                            ("self" variable nil (reparse-symbol indented_block_body) [421 447])
                            ("self" variable nil (reparse-symbol indented_block_body) [456 509])
                            ("self" variable nil (reparse-symbol indented_block_body) [519 540])
                            ("self" variable nil (reparse-symbol indented_block_body) [549 564])
                            ("self" variable nil (reparse-symbol indented_block_body) [573 595])
                            ("self" variable nil (reparse-symbol indented_block_body) [604 625]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [363 367])
                            ("automata" variable nil (reparse-symbol function_parameters) [369 377]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [350 626])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [650 654])
                            ("current_state" variable nil (reparse-symbol function_parameters) [656 669])
                            ("src_and_dest" variable nil (reparse-symbol function_parameters) [671 683]))                          )
                        (reparse-symbol indented_block_body) [639 1875]))                  
                :type "class")
                nil [169 1911]))          
      :file "plot_dynamic_graph.py"
      :pointmax 1915
      :fsize 1914
      :lastmodtime '(22840 28408 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "product_policy.py"
      :major-mode 'python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("ProductPolicy" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("pass" code nil (reparse-symbol indented_block_body) [84 88]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69 73]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56 89])
                    ("get_neg_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113 117])
                            ("policy" variable nil (reparse-symbol function_parameters) [119 125])
                            ("s" variable nil (reparse-symbol function_parameters) [127 128]))                          )
                        (reparse-symbol indented_block_body) [94 222])
                    ("get_logical_bonded_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [257 261])
                            ("policy_list" variable nil (reparse-symbol function_parameters) [263 274])
                            ("S_list" variable nil (reparse-symbol function_parameters) [276 282])
                            ("s" variable nil (reparse-symbol function_parameters) [284 285])
                            ("logic" variable nil (reparse-symbol function_parameters) [287 292]))                          )
                        (reparse-symbol indented_block_body) [227 1461]))                  
                :type "class")
                nil [22 1461]))          
      :file "product_policy.py"
      :pointmax 1474
      :fsize 1473
      :lastmodtime '(22840 25430 0 0)
      :unmatched-syntax nil))
  :file "!Users!xiaoli!Dropbox!PHD_research!projects!RLFPS!rlfps!automata_utils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
