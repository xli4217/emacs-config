;; Object graph_objs/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "graph_objs/"
  :tables
  (list
    (semanticdb-table "graph_objs.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
graph_objs
==========

A module that understands plotly language and can manage the json
structures. This module defines two base classes: PlotlyList and PlotlyDict.
The former inherits from `list` and the latter inherits from `dict`. and is
A third structure, PlotlyTrace, is also considered a base class for all
subclassing 'trace' objects like Scatter, Box, Bar, etc. It is also not meant
to instantiated by users.

Goals of this module:
---------------------

* A dict/list with the same entries as a PlotlyDict/PlotlyList should look
exactly the same once a call is made to plot.

* Only mutate object structure when users ASK for it. (some magic now...)

* It should always be possible to get a dict/list JSON representation from a
graph_objs object and it should always be possible to make a graph_objs object
from a dict/list JSON representation.

\"\"\"" code nil nil [1 864])
            ("__future__" include nil nil [865 903])
            ("copy" include nil nil [905 916])
            ("re" include nil nil [917 926])
            ("warnings" include nil nil [927 942])
            ("collections" include nil nil [943 978])
            ("six" include nil nil [980 990])
            ("plotly" include nil nil [992 1038])
            ("plotly.graph_objs" include nil nil [1039 1085])
            ("_subplot_regex" variable nil nil [1087 1135])
            ("PlotlyBase" type
               (:documentation "
    Base object for PlotlyList and PlotlyDict.

    "
                :superclasses ("object")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [1232 1244])
                    ("_parent" variable nil (reparse-symbol indented_block_body) [1249 1263])
                    ("_parent_key" variable nil (reparse-symbol indented_block_body) [1268 1286])
                    ("_get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1306 1310]))                          
                        :documentation "
        Get a tuple of the str keys and int indices for this object's path.

        :return: (tuple)

        ")
                        (reparse-symbol indented_block_body) [1292 1709])
                    ("_get_parents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1731 1735]))                          
                        :documentation "
        Get a list of all the parent objects above this one.

        :return: (list[PlotlyBase])

        ")
                        (reparse-symbol indented_block_body) [1714 2066])
                    ("_get_parent_object_names" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2100 2104]))                          
                        :documentation "
        Get a list of the names of the parent objects above this one.

        :return: (list[str])

        ")
                        (reparse-symbol indented_block_body) [2071 2322])
                    ("_get_class_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2347 2351]))                          
                        :documentation "For convenience. See `graph_reference.object_name_to_class_name`.")
                        (reparse-symbol indented_block_body) [2327 2503])
                    ("help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2517 2521])
                            ("return_help" variable nil (reparse-symbol function_parameters) [2523 2534]))                          
                        :documentation "
        Print a help string for this object.

        :param (bool) return_help: Return help string instead of prining?
        :return: (None|str) Optionally can return help string.

        ")
                        (reparse-symbol indented_block_body) [2508 3096])
                    ("to_graph_objs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3119 3123])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3125 3133]))                          
                        :documentation "Everything is cast into graph_objs. Here for backwards compat.")
                        (reparse-symbol indented_block_body) [3101 3226])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3244 3248]))                          
                        :documentation "Everything is *always* validated now. keep for backwards compat.")
                        (reparse-symbol indented_block_body) [3231 3343]))                  
                :type "class")
                nil [1138 3343])
            ("PlotlyList" type
               (:documentation "
    Base class for list-like Plotly objects.

    "
                :superclasses ("list" "PlotlyBase")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [3447 3459])
                    ("__init__" function
                       (:suite 
                          ( ("_raise" variable nil (reparse-symbol indented_block_body) [3510 3545])
                            ("if" code nil (reparse-symbol indented_block_body) [3554 3640])
                            ("self" variable nil (reparse-symbol indented_block_body) [3648 3696])
                            ("self" variable nil (reparse-symbol indented_block_body) [3705 3761])
                            ("if" code nil (reparse-symbol indented_block_body) [3771 3928])
                            ("if" code nil (reparse-symbol indented_block_body) [3937 4600])
                            ("super" code nil (reparse-symbol indented_block_body) [4609 4643])
                            ("for" code nil (reparse-symbol indented_block_body) [4653 4856]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3478 3482])
                            ("args" variable nil (reparse-symbol function_parameters) [3484 3489])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3491 3499]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3465 4856])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4877 4881])
                            ("index" variable nil (reparse-symbol function_parameters) [4883 4888])
                            ("value" variable nil (reparse-symbol function_parameters) [4890 4895])
                            ("_raise" variable nil (reparse-symbol function_parameters) [4897 4903]))                          
                        :documentation "Override to enforce validation.")
                        (reparse-symbol indented_block_body) [4861 5419])
                    ("__setattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5440 5444])
                            ("key" variable nil (reparse-symbol function_parameters) [5446 5449])
                            ("value" variable nil (reparse-symbol function_parameters) [5451 5456]))                          )
                        (reparse-symbol indented_block_body) [5424 5589])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5607 5611])
                            ("other" variable nil (reparse-symbol function_parameters) [5613 5618]))                          
                        :documentation "Defines the `+=` operator, which we map to extend.")
                        (reparse-symbol indented_block_body) [5594 5733])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5751 5755]))                          )
                        (reparse-symbol indented_block_body) [5738 5976])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5998 6002])
                            ("memodict" variable nil (reparse-symbol function_parameters) [6004 6012]))                          )
                        (reparse-symbol indented_block_body) [5981 6114])
                    ("_value_to_graph_object" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6146 6150])
                            ("index" variable nil (reparse-symbol function_parameters) [6152 6157])
                            ("value" variable nil (reparse-symbol function_parameters) [6159 6164])
                            ("_raise" variable nil (reparse-symbol function_parameters) [6166 6172]))                          
                        :documentation "
        Attempt to change the given value into a graph object.

        If _raise is False, this won't raise. If the entry can't be converted,
        `None` is returned, meaning the caller should ignore the value or
        discard it as a failed conversion.

        :param (dict) value: A dict to be converted into a graph object.
        :param (bool) _raise: If False, ignore bad values instead of raising.
        :return: (PlotlyBase|None) The graph object or possibly `None`.

        ")
                        (reparse-symbol indented_block_body) [6119 7370])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7386 7390])
                            ("value" variable nil (reparse-symbol function_parameters) [7392 7397]))                          
                        :documentation "Override to enforce validation.")
                        (reparse-symbol indented_block_body) [7375 7603])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7619 7623])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7625 7633]))                          
                        :documentation "Override to enforce validation.")
                        (reparse-symbol indented_block_body) [7608 7855])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7871 7875])
                            ("index" variable nil (reparse-symbol function_parameters) [7877 7882])
                            ("value" variable nil (reparse-symbol function_parameters) [7884 7889]))                          
                        :documentation "Override to enforce validation.")
                        (reparse-symbol indented_block_body) [7860 8049])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8065 8069])
                            ("changes" variable nil (reparse-symbol function_parameters) [8071 8078])
                            ("make_copies" variable nil (reparse-symbol function_parameters) [8080 8091]))                          
                        :documentation "
        Update current list with changed_list, which must be iterable.

        :param (dict|list[dict]) changes:
        :param (bool) make_copies:

        Because mutable objects contain references to their values, updating
        multiple items in a list will cause the items to all reference the same
        original set of objects. To change this behavior add
        `make_copies=True` which makes deep copies of the update items and
        therefore break references.

        ")
                        (reparse-symbol indented_block_body) [8054 9025])
                    ("strip_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9046 9050]))                          
                        :documentation "Strip style by calling `stip_style` on children items.")
                        (reparse-symbol indented_block_body) [9030 9193])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9211 9215])
                            ("flatten" variable nil (reparse-symbol function_parameters) [9217 9224]))                          
                        :documentation "
        Returns the JSON for the plot with non-data elements stripped.

        :param (bool) flatten: {'a': {'b': ''}} --> {'a.b': ''}
        :returns: (dict|list) Depending on (flat|unflat)

        ")
                        (reparse-symbol indented_block_body) [9198 10036])
                    ("get_ordered" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10057 10061])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10063 10071]))                          
                        :documentation "All children are already validated. Just use get_ordered on them.")
                        (reparse-symbol indented_block_body) [10041 10209])
                    ("to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10228 10232])
                            ("level" variable nil (reparse-symbol function_parameters) [10234 10239])
                            ("indent" variable nil (reparse-symbol function_parameters) [10243 10249])
                            ("eol" variable nil (reparse-symbol function_parameters) [10253 10256])
                            ("pretty" variable nil (reparse-symbol function_parameters) [10281 10287])
                            ("max_chars" variable nil (reparse-symbol function_parameters) [10294 10303]))                          
                        :documentation "Get formatted string by calling `to_string` on children items.")
                        (reparse-symbol indented_block_body) [10214 11237])
                    ("force_clean" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11258 11262])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11264 11272]))                          
                        :documentation "Remove empty/None values by calling `force_clean()` on children.")
                        (reparse-symbol indented_block_body) [11242 11636]))                  
                :type "class")
                nil [3345 11636])
            ("PlotlyDict" type
               (:documentation "
    Base class for dict-like Plotly objects.

    "
                :superclasses ("dict" "PlotlyBase")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [11740 11752])
                    ("_parent_key" variable nil (reparse-symbol indented_block_body) [11757 11775])
                    ("_valid_attributes" variable nil (reparse-symbol indented_block_body) [11780 11804])
                    ("_deprecated_attributes" variable nil (reparse-symbol indented_block_body) [11809 11838])
                    ("_subplot_attributes" variable nil (reparse-symbol indented_block_body) [11843 11869])
                    ("__init__" function
                       (:suite 
                          ( ("_raise" variable nil (reparse-symbol indented_block_body) [11921 11956])
                            ("if" code nil (reparse-symbol indented_block_body) [11965 12051])
                            ("self" variable nil (reparse-symbol indented_block_body) [12059 12113])
                            ("self" variable nil (reparse-symbol indented_block_body) [12122 12184])
                            ("if" code nil (reparse-symbol indented_block_body) [12194 12351])
                            ("super" code nil (reparse-symbol indented_block_body) [12360 12394])
                            ("if" code nil (reparse-symbol indented_block_body) [12404 12488])
                            ("d" variable nil (reparse-symbol indented_block_body) [12554 12614])
                            ("for" code nil (reparse-symbol indented_block_body) [12623 12704]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11888 11892])
                            ("args" variable nil (reparse-symbol function_parameters) [11894 11899])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11901 11909]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11875 12704])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12721 12725]))                          
                        :documentation "Dynamically return the existing and possible attributes.")
                        (reparse-symbol indented_block_body) [12709 12857])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12878 12882])
                            ("key" variable nil (reparse-symbol function_parameters) [12884 12887]))                          
                        :documentation "Calls __missing__ when key is not found. May mutate object.")
                        (reparse-symbol indented_block_body) [12862 13082])
                    ("__setattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13103 13107])
                            ("key" variable nil (reparse-symbol function_parameters) [13109 13112])
                            ("value" variable nil (reparse-symbol function_parameters) [13114 13119]))                          
                        :documentation "Maps __setattr__ onto __setitem__")
                        (reparse-symbol indented_block_body) [13087 13207])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13228 13232])
                            ("key" variable nil (reparse-symbol function_parameters) [13234 13237])
                            ("value" variable nil (reparse-symbol function_parameters) [13239 13244])
                            ("_raise" variable nil (reparse-symbol function_parameters) [13246 13252]))                          
                        :documentation "Validates/Converts values which should be Graph Objects.")
                        (reparse-symbol indented_block_body) [13212 15174])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15195 15199])
                            ("key" variable nil (reparse-symbol function_parameters) [15201 15204]))                          
                        :documentation "Python only calls this when key is missing!")
                        (reparse-symbol indented_block_body) [15179 15382])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15400 15404]))                          )
                        (reparse-symbol indented_block_body) [15387 15625])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15647 15651])
                            ("memodict" variable nil (reparse-symbol function_parameters) [15653 15661]))                          )
                        (reparse-symbol indented_block_body) [15630 15763])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15784 15788])
                            ("key" variable nil (reparse-symbol function_parameters) [15790 15793]))                          
                        :documentation "Mimics defaultdict. This is called from __getitem__ when key DNE.")
                        (reparse-symbol indented_block_body) [15768 16471])
                    ("_get_attribute_role" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16500 16504])
                            ("key" variable nil (reparse-symbol function_parameters) [16506 16509])
                            ("value" variable nil (reparse-symbol function_parameters) [16511 16516]))                          
                        :documentation "See `graph_reference.get_role`.")
                        (reparse-symbol indented_block_body) [16476 16811])
                    ("_get_valid_attributes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16842 16846]))                          
                        :documentation "See `graph_reference.get_valid_attributes`.")
                        (reparse-symbol indented_block_body) [16816 17251])
                    ("_get_deprecated_attributes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17287 17291]))                          
                        :documentation "See `graph_reference.get_deprecated_attributes`.")
                        (reparse-symbol indented_block_body) [17256 17731])
                    ("_get_subplot_attributes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17764 17768]))                          
                        :documentation "See `graph_reference.get_subplot_attributes`.")
                        (reparse-symbol indented_block_body) [17736 18187])
                    ("_get_subplot_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18213 18217])
                            ("key" variable nil (reparse-symbol function_parameters) [18219 18222]))                          
                        :documentation "Some keys can have appended integers, this handles that.")
                        (reparse-symbol indented_block_body) [18192 18559])
                    ("_value_to_graph_object" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18591 18595])
                            ("key" variable nil (reparse-symbol function_parameters) [18597 18600])
                            ("value" variable nil (reparse-symbol function_parameters) [18602 18607])
                            ("_raise" variable nil (reparse-symbol function_parameters) [18609 18615]))                          
                        :documentation "
        Attempt to convert value to graph object.

        :param (str|unicode) key: Should be an object_name from GRAPH_REFERENCE
        :param (dict) value: This will fail if it's not a dict.
        :param (bool) _raise: Flag to prevent inappropriate erring.

        :return: (PlotlyList|PlotlyDict|None) `None` if `_raise` and failure.

        ")
                        (reparse-symbol indented_block_body) [18564 19531])
                    ("help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19545 19549])
                            ("attribute" variable nil (reparse-symbol function_parameters) [19551 19560])
                            ("return_help" variable nil (reparse-symbol function_parameters) [19567 19578]))                          
                        :documentation "
        Print help string for this object or an attribute of this object.

        :param (str) attribute: A valid attribute string for this object.
        :param (bool) return_help: Return help_string instead of printing it?
        :return: (None|str)

        ")
                        (reparse-symbol indented_block_body) [19536 20324])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20340 20344])
                            ("dict1" variable nil (reparse-symbol function_parameters) [20346 20351])
                            ("dict2" variable nil (reparse-symbol function_parameters) [20358 20365]))                          
                        :documentation "
        Update current dict with dict1 and then dict2.

        This recursively updates the structure of the original dictionary-like
        object with the new entries in the second and third objects. This
        allows users to update with large, nested structures.

        Note, because the dict2 packs up all the keyword arguments, you can
        specify the changes as a list of keyword agruments.

        Examples:
        # update with dict
        obj = Layout(title='my title', xaxis=XAxis(range=[0,1], domain=[0,1]))
        update_dict = dict(title='new title', xaxis=dict(domain=[0,.8]))
        obj.update(update_dict)
        obj
        {'title': 'new title', 'xaxis': {'range': [0,1], 'domain': [0,.8]}}

        # update with list of keyword arguments
        obj = Layout(title='my title', xaxis=XAxis(range=[0,1], domain=[0,1]))
        obj.update(title='new title', xaxis=dict(domain=[0,.8]))
        obj
        {'title': 'new title', 'xaxis': {'range': [0,1], 'domain': [0,.8]}}

        This 'fully' supports duck-typing in that the call signature is
        identical, however this differs slightly from the normal update
        method provided by Python's dictionaries.

        ")
                        (reparse-symbol indented_block_body) [20329 22295])
                    ("strip_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22316 22320]))                          
                        :documentation "
        Recursively strip style from the current representation.

        All PlotlyDicts and PlotlyLists are guaranteed to survive the
        stripping process, though they made be left empty. This is allowable.

        Keys that will be stripped in this process are tagged with
        `'type': 'style'` in graph_objs_meta.json. Note that a key tagged as
        style, but with an array as a value may still be considered data.

        ")
                        (reparse-symbol indented_block_body) [22300 23255])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23273 23277])
                            ("flatten" variable nil (reparse-symbol function_parameters) [23279 23286]))                          
                        :documentation "Returns the JSON for the plot with non-data elements stripped.")
                        (reparse-symbol indented_block_body) [23260 24300])
                    ("get_ordered" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24321 24325])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24327 24335]))                          
                        :documentation "Return a predictable, OrderedDict version of self.")
                        (reparse-symbol indented_block_body) [24305 24714])
                    ("to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24733 24737])
                            ("level" variable nil (reparse-symbol function_parameters) [24739 24744])
                            ("indent" variable nil (reparse-symbol function_parameters) [24748 24754])
                            ("eol" variable nil (reparse-symbol function_parameters) [24758 24761])
                            ("pretty" variable nil (reparse-symbol function_parameters) [24786 24792])
                            ("max_chars" variable nil (reparse-symbol function_parameters) [24799 24808]))                          
                        :documentation "
        Returns a formatted string showing graph_obj constructors.

        :param (int) level: The number of indentations to start with.
        :param (int) indent: The indentation amount.
        :param (str) eol: The end of line character(s).
        :param (bool) pretty: Curtail long list output with a '..' ?
        :param (int) max_chars: The max characters per line.

        Example:

            print(obj.to_string())

        ")
                        (reparse-symbol indented_block_body) [24719 27963])
                    ("force_clean" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27984 27988])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27990 27998]))                          
                        :documentation "Recursively remove empty/None values.")
                        (reparse-symbol indented_block_body) [27968 28445]))                  
                :type "class")
                nil [11638 28445])
            ("GraphObjectFactory" type
               (:documentation "GraphObject creation in this module should run through this factory."
                :superclasses ("object")
                :members 
                  ( ("create" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("object_name" variable nil (reparse-symbol function_parameters) [28594 28605])
                            ("args" variable nil (reparse-symbol function_parameters) [28607 28612])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28614 28622]))                          
                        :documentation "
        Create a graph object from the OBJECTS dict by name, args, and kwargs.

        :param (str) object_name: A valid object name from OBJECTS.
        :param args: Arguments to pass to class constructor.
        :param kwargs: Keyword arguments to pass to class constructor.

        :return: (PlotlyList|PlotlyDict) The instantiated graph object.

        ")
                        (reparse-symbol indented_block_body) [28565 29756]))                  
                :type "class")
                nil [28447 29756])
            ("AngularAxis" type
               (:documentation "
    Valid attributes for 'angularaxis' at path [] under parents ():
    
        ['domain', 'endpadding', 'range', 'showline', 'showticklabels',
        'tickcolor', 'ticklen', 'tickorientation', 'ticksuffix', 'visible']
    
    Run `<angularaxis-object>.help('attribute')` on any of the above.
    '<angularaxis-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [30206 30227]))                  
                :type "class")
                nil [29811 30228])
            ("Annotation" type
               (:documentation "
    Valid attributes for 'annotation' at path [] under parents ():
    
        ['align', 'arrowcolor', 'arrowhead', 'arrowsize', 'arrowwidth', 'ax',
        'axref', 'ay', 'ayref', 'bgcolor', 'bordercolor', 'borderpad',
        'borderwidth', 'captureevents', 'clicktoshow', 'font', 'height',
        'hoverlabel', 'hovertext', 'opacity', 'ref', 'showarrow', 'standoff',
        'text', 'textangle', 'valign', 'visible', 'width', 'x', 'xanchor',
        'xclick', 'xref', 'xshift', 'y', 'yanchor', 'yclick', 'yref', 'yshift',
        'z']
    
    Run `<annotation-object>.help('attribute')` on any of the above.
    '<annotation-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [30941 30961]))                  
                :type "class")
                nil [30230 30962])
            ("Annotations" type
               (:documentation "
    Valid items for 'annotations' at path [] under parents ():
        ['Annotation']

    "
                :superclasses ("PlotlyList")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [31102 31123]))                  
                :type "class")
                nil [30964 31124])
            ("Area" type
               (:documentation "
    Valid attributes for 'area' at path [] under parents ():
    
        ['customdata', 'customdatasrc', 'hoverinfo', 'hoverinfosrc',
        'hoverlabel', 'ids', 'idssrc', 'legendgroup', 'marker', 'name',
        'opacity', 'r', 'rsrc', 'showlegend', 'stream', 't', 'tsrc', 'type',
        'uid', 'visible']
    
    Run `<area-object>.help('attribute')` on any of the above.
    '<area-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [31589 31603]))                  
                :type "class")
                nil [31126 31604])
            ("Bar" type
               (:documentation "
    Valid attributes for 'bar' at path [] under parents ():
    
        ['bardir', 'base', 'basesrc', 'constraintext', 'customdata',
        'customdatasrc', 'dx', 'dy', 'error_x', 'error_y', 'hoverinfo',
        'hoverinfosrc', 'hoverlabel', 'hovertext', 'hovertextsrc', 'ids',
        'idssrc', 'insidetextfont', 'legendgroup', 'marker', 'name', 'offset',
        'offsetsrc', 'opacity', 'orientation', 'outsidetextfont', 'r', 'rsrc',
        'showlegend', 'stream', 't', 'text', 'textfont', 'textposition',
        'textpositionsrc', 'textsrc', 'tsrc', 'type', 'uid', 'visible',
        'width', 'widthsrc', 'x', 'x0', 'xaxis', 'xcalendar', 'xsrc', 'y',
        'y0', 'yaxis', 'ycalendar', 'ysrc']
    
    Run `<bar-object>.help('attribute')` on any of the above.
    '<bar-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [32458 32471]))                  
                :type "class")
                nil [31606 32472])
            ("Box" type
               (:documentation "
    Valid attributes for 'box' at path [] under parents ():
    
        ['boxmean', 'boxpoints', 'customdata', 'customdatasrc', 'fillcolor',
        'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc', 'jitter',
        'legendgroup', 'line', 'marker', 'name', 'opacity', 'orientation',
        'pointpos', 'showlegend', 'stream', 'type', 'uid', 'visible',
        'whiskerwidth', 'x', 'x0', 'xaxis', 'xsrc', 'y', 'y0', 'yaxis', 'ysrc']
    
    Run `<box-object>.help('attribute')` on any of the above.
    '<box-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [33069 33082]))                  
                :type "class")
                nil [32474 33083])
            ("Candlestick" type
               (:documentation "
    Valid attributes for 'candlestick' at path [] under parents ():
    
        ['close', 'closesrc', 'customdata', 'customdatasrc', 'decreasing',
        'high', 'highsrc', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'ids',
        'idssrc', 'increasing', 'legendgroup', 'line', 'low', 'lowsrc', 'name',
        'opacity', 'open', 'opensrc', 'showlegend', 'stream', 'text',
        'textsrc', 'type', 'uid', 'visible', 'whiskerwidth', 'x', 'xaxis',
        'xcalendar', 'xsrc', 'yaxis']
    
    Run `<candlestick-object>.help('attribute')` on any of the above.
    '<candlestick-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [33747 33768]))                  
                :type "class")
                nil [33085 33769])
            ("Carpet" type
               (:documentation "
    Valid attributes for 'carpet' at path [] under parents ():
    
        ['a', 'a0', 'aaxis', 'asrc', 'b', 'b0', 'baxis', 'bsrc', 'carpet',
        'cheaterslope', 'color', 'customdata', 'customdatasrc', 'da', 'db',
        'font', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc',
        'legendgroup', 'name', 'opacity', 'showlegend', 'stream', 'type',
        'uid', 'visible', 'x', 'xaxis', 'xsrc', 'y', 'yaxis', 'ysrc']
    
    Run `<carpet-object>.help('attribute')` on any of the above.
    '<carpet-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [34369 34385]))                  
                :type "class")
                nil [33771 34386])
            ("Choropleth" type
               (:documentation "
    Valid attributes for 'choropleth' at path [] under parents ():
    
        ['autocolorscale', 'colorbar', 'colorscale', 'customdata',
        'customdatasrc', 'geo', 'hoverinfo', 'hoverinfosrc', 'hoverlabel',
        'ids', 'idssrc', 'legendgroup', 'locationmode', 'locations',
        'locationssrc', 'marker', 'name', 'opacity', 'reversescale',
        'showlegend', 'showscale', 'stream', 'text', 'textsrc', 'type', 'uid',
        'visible', 'z', 'zauto', 'zmax', 'zmin', 'zsrc']
    
    Run `<choropleth-object>.help('attribute')` on any of the above.
    '<choropleth-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [35047 35067]))                  
                :type "class")
                nil [34388 35068])
            ("ColorBar" type
               (:documentation "
    Valid attributes for 'colorbar' at path [] under parents ():
    
        ['bgcolor', 'bordercolor', 'borderwidth', 'dtick', 'exponentformat',
        'len', 'lenmode', 'nticks', 'outlinecolor', 'outlinewidth',
        'separatethousands', 'showexponent', 'showticklabels',
        'showtickprefix', 'showticksuffix', 'thickness', 'thicknessmode',
        'tick0', 'tickangle', 'tickcolor', 'tickfont', 'tickformat', 'ticklen',
        'tickmode', 'tickprefix', 'ticks', 'ticksuffix', 'ticktext',
        'ticktextsrc', 'tickvals', 'tickvalssrc', 'tickwidth', 'title',
        'titlefont', 'titleside', 'x', 'xanchor', 'xpad', 'y', 'yanchor',
        'ypad']
    
    Run `<colorbar-object>.help('attribute')` on any of the above.
    '<colorbar-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [35898 35916]))                  
                :type "class")
                nil [35070 35917])
            ("Contour" type
               (:documentation "
    Valid attributes for 'contour' at path [] under parents ():
    
        ['autocolorscale', 'autocontour', 'colorbar', 'colorscale',
        'connectgaps', 'contours', 'customdata', 'customdatasrc', 'dx', 'dy',
        'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc',
        'legendgroup', 'line', 'name', 'ncontours', 'opacity', 'reversescale',
        'showlegend', 'showscale', 'stream', 'text', 'textsrc', 'transpose',
        'type', 'uid', 'visible', 'x', 'x0', 'xaxis', 'xcalendar', 'xsrc',
        'xtype', 'y', 'y0', 'yaxis', 'ycalendar', 'ysrc', 'ytype', 'z',
        'zauto', 'zmax', 'zmin', 'zsrc']
    
    Run `<contour-object>.help('attribute')` on any of the above.
    '<contour-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [36708 36725]))                  
                :type "class")
                nil [35919 36726])
            ("Contourcarpet" type
               (:documentation "
    Valid attributes for 'contourcarpet' at path [] under parents ():
    
        ['a', 'a0', 'asrc', 'atype', 'autocolorscale', 'autocontour', 'b',
        'b0', 'bsrc', 'btype', 'carpet', 'colorbar', 'colorscale',
        'connectgaps', 'contours', 'customdata', 'customdatasrc', 'da', 'db',
        'fillcolor', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'ids',
        'idssrc', 'legendgroup', 'line', 'mode', 'name', 'ncontours',
        'opacity', 'reversescale', 'showlegend', 'showscale', 'stream', 'text',
        'textsrc', 'transpose', 'type', 'uid', 'visible', 'xaxis', 'yaxis',
        'z', 'zauto', 'zmax', 'zmin', 'zsrc']
    
    Run `<contourcarpet-object>.help('attribute')` on any of the above.
    '<contourcarpet-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [37546 37569]))                  
                :type "class")
                nil [36728 37570])
            ("Contours" type
               (:documentation "
    Valid attributes for 'contours' at path [] under parents ():
    
        ['coloring', 'end', 'labelfont', 'labelformat', 'operation',
        'showlabels', 'showlines', 'size', 'start', 'type', 'value', 'x', 'y',
        'z']
    
    Run `<contours-object>.help('attribute')` on any of the above.
    '<contours-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [37968 37986]))                  
                :type "class")
                nil [37572 37987])
            ("Data" type
               (:documentation "
    Valid items for 'data' at path [] under parents ():
        ['Area', 'Bar', 'Box', 'Candlestick', 'Carpet', 'Choropleth',
        'Contour', 'Contourcarpet', 'Heatmap', 'Heatmapgl', 'Histogram',
        'Histogram2d', 'Histogram2dcontour', 'Mesh3d', 'Ohlc', 'Parcoords',
        'Pie', 'Pointcloud', 'Sankey', 'Scatter', 'Scatter3d', 'Scattercarpet',
        'Scattergeo', 'Scattergl', 'Scattermapbox', 'Scatterternary',
        'Surface']

    "
                :superclasses ("PlotlyList")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [38478 38492])
                    ("_value_to_graph_object" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38525 38529])
                            ("index" variable nil (reparse-symbol function_parameters) [38531 38536])
                            ("value" variable nil (reparse-symbol function_parameters) [38538 38543])
                            ("_raise" variable nil (reparse-symbol function_parameters) [38545 38551]))                          )
                        (reparse-symbol indented_block_body) [38498 39337])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39355 39359])
                            ("flatten" variable nil (reparse-symbol function_parameters) [39361 39368]))                          
                        :documentation "
        Returns the JSON for the plot with non-data elements stripped.

        :param (bool) flatten: {'a': {'b': ''}} --> {'a.b': ''}
        :returns: (dict|list) Depending on (flat|unflat)

        ")
                        (reparse-symbol indented_block_body) [39342 40703]))                  
                :type "class")
                nil [37989 40703])
            ("ErrorX" type
               (:documentation "
    Valid attributes for 'error_x' at path [] under parents ():
    
        ['array', 'arrayminus', 'arrayminussrc', 'arraysrc', 'color',
        'copy_ystyle', 'copy_zstyle', 'opacity', 'symmetric', 'thickness',
        'traceref', 'tracerefminus', 'type', 'value', 'valueminus', 'visible',
        'width']
    
    Run `<error_x-object>.help('attribute')` on any of the above.
    '<error_x-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [41176 41193]))                  
                :type "class")
                nil [40705 41194])
            ("ErrorY" type
               (:documentation "
    Valid attributes for 'error_y' at path [] under parents ():
    
        ['array', 'arrayminus', 'arrayminussrc', 'arraysrc', 'color',
        'copy_ystyle', 'copy_zstyle', 'opacity', 'symmetric', 'thickness',
        'traceref', 'tracerefminus', 'type', 'value', 'valueminus', 'visible',
        'width']
    
    Run `<error_y-object>.help('attribute')` on any of the above.
    '<error_y-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [41667 41684]))                  
                :type "class")
                nil [41196 41685])
            ("ErrorZ" type
               (:documentation "
    Valid attributes for 'error_z' at path [] under parents ():
    
        ['array', 'arrayminus', 'arrayminussrc', 'arraysrc', 'color',
        'copy_ystyle', 'copy_zstyle', 'opacity', 'symmetric', 'thickness',
        'traceref', 'tracerefminus', 'type', 'value', 'valueminus', 'visible',
        'width']
    
    Run `<error_z-object>.help('attribute')` on any of the above.
    '<error_z-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [42158 42175]))                  
                :type "class")
                nil [41687 42176])
            ("Figure" type
               (:documentation "
    Valid attributes for 'figure' at path [] under parents ():
    
        ['data', 'frames', 'layout']
    
    Run `<figure-object>.help('attribute')` on any of the above.
    '<figure-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [42442 42458])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [42509 42554])
                            ("if" code nil (reparse-symbol indented_block_body) [42563 42649]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42477 42481])
                            ("args" variable nil (reparse-symbol function_parameters) [42483 42488])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42490 42498]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42464 42649])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42667 42671])
                            ("flatten" variable nil (reparse-symbol function_parameters) [42673 42680]))                          
                        :documentation "
        Returns the JSON for the plot with non-data elements stripped.

        Flattening may increase the utility of the result.

        :param (bool) flatten: {'a': {'b': ''}} --> {'a.b': ''}
        :returns: (dict|list) Depending on (flat|unflat)

        ")
                        (reparse-symbol indented_block_body) [42654 43018])
                    ("to_dataframe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43040 43044]))                          
                        :documentation "
        Create a dataframe with trace names and keys as column names.

        :return: (DataFrame)

        ")
                        (reparse-symbol indented_block_body) [43023 43347])
                    ("print_grid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43367 43371]))                          
                        :documentation "
        Print a visual layout of the figure's axes arrangement.

        This is only valid for figures that are created
        with plotly.tools.make_subplots.

        ")
                        (reparse-symbol indented_block_body) [43352 43798])
                    ("append_trace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43820 43824])
                            ("trace" variable nil (reparse-symbol function_parameters) [43826 43831])
                            ("row" variable nil (reparse-symbol function_parameters) [43833 43836])
                            ("col" variable nil (reparse-symbol function_parameters) [43838 43841]))                          
                        :documentation "
        Add a trace to your figure bound to axes at the row, col index.

        The row, col index is generated from figures created with
        plotly.tools.make_subplots and can be viewed with
        Figure.print_grid.

        :param (dict) trace: The data trace to be bound.
        :param (int) row: Subplot row index (see Figure.print_grid).
        :param (int) col: Subplot column index (see Figure.print_grid).

        Example:
        # stack two subplots vertically
        fig = tools.make_subplots(rows=2)

        This is the format of your plot grid:
        [ (1,1) x1,y1 ]
        [ (2,1) x2,y2 ]

        fig.append_trace(Scatter(x=[1,2,3], y=[2,1,2]), 1, 1)
        fig.append_trace(Scatter(x=[1,2,3], y=[2,1,2]), 2, 1)

        ")
                        (reparse-symbol indented_block_body) [43803 46410]))                  
                :type "class")
                nil [42178 46410])
            ("Font" type
               (:documentation "
    Valid attributes for 'font' at path [] under parents ():
    
        ['color', 'colorsrc', 'family', 'familysrc', 'size', 'sizesrc']
    
    Run `<font-object>.help('attribute')` on any of the above.
    '<font-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [46703 46717]))                  
                :type "class")
                nil [46412 46718])
            ("Frames" type
               (:documentation "
    Valid items for 'frames' at path [] under parents ():
        ['dict']

    "
                :superclasses ("PlotlyList")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [46842 46858])
                    ("_value_to_graph_object" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46891 46895])
                            ("index" variable nil (reparse-symbol function_parameters) [46897 46902])
                            ("value" variable nil (reparse-symbol function_parameters) [46904 46909])
                            ("_raise" variable nil (reparse-symbol function_parameters) [46911 46917]))                          )
                        (reparse-symbol indented_block_body) [46864 47143])
                    ("to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47162 47166])
                            ("level" variable nil (reparse-symbol function_parameters) [47168 47173])
                            ("indent" variable nil (reparse-symbol function_parameters) [47177 47183])
                            ("eol" variable nil (reparse-symbol function_parameters) [47187 47190])
                            ("pretty" variable nil (reparse-symbol function_parameters) [47215 47221])
                            ("max_chars" variable nil (reparse-symbol function_parameters) [47228 47237]))                          
                        :documentation "Get formatted string by calling `to_string` on children items.")
                        (reparse-symbol indented_block_body) [47148 48299]))                  
                :type "class")
                nil [46720 48299])
            ("Heatmap" type
               (:documentation "
    Valid attributes for 'heatmap' at path [] under parents ():
    
        ['autocolorscale', 'colorbar', 'colorscale', 'connectgaps',
        'customdata', 'customdatasrc', 'dx', 'dy', 'hoverinfo', 'hoverinfosrc',
        'hoverlabel', 'ids', 'idssrc', 'legendgroup', 'name', 'opacity',
        'reversescale', 'showlegend', 'showscale', 'stream', 'text', 'textsrc',
        'transpose', 'type', 'uid', 'visible', 'x', 'x0', 'xaxis', 'xcalendar',
        'xgap', 'xsrc', 'xtype', 'y', 'y0', 'yaxis', 'ycalendar', 'ygap',
        'ysrc', 'ytype', 'z', 'zauto', 'zmax', 'zmin', 'zsmooth', 'zsrc']
    
    Run `<heatmap-object>.help('attribute')` on any of the above.
    '<heatmap-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [49061 49078]))                  
                :type "class")
                nil [48301 49079])
            ("Heatmapgl" type
               (:documentation "
    Valid attributes for 'heatmapgl' at path [] under parents ():
    
        ['autocolorscale', 'colorbar', 'colorscale', 'customdata',
        'customdatasrc', 'dx', 'dy', 'hoverinfo', 'hoverinfosrc', 'hoverlabel',
        'ids', 'idssrc', 'legendgroup', 'name', 'opacity', 'reversescale',
        'showlegend', 'showscale', 'stream', 'text', 'textsrc', 'transpose',
        'type', 'uid', 'visible', 'x', 'x0', 'xaxis', 'xsrc', 'xtype', 'y',
        'y0', 'yaxis', 'ysrc', 'ytype', 'z', 'zauto', 'zmax', 'zmin', 'zsrc']
    
    Run `<heatmapgl-object>.help('attribute')` on any of the above.
    '<heatmapgl-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [49773 49792]))                  
                :type "class")
                nil [49081 49793])
            ("Histogram" type
               (:documentation "
    Valid attributes for 'histogram' at path [] under parents ():
    
        ['autobinx', 'autobiny', 'bardir', 'cumulative', 'customdata',
        'customdatasrc', 'error_x', 'error_y', 'histfunc', 'histnorm',
        'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc',
        'legendgroup', 'marker', 'name', 'nbinsx', 'nbinsy', 'opacity',
        'orientation', 'showlegend', 'stream', 'text', 'textsrc', 'type',
        'uid', 'visible', 'x', 'xaxis', 'xbins', 'xcalendar', 'xsrc', 'y',
        'yaxis', 'ybins', 'ycalendar', 'ysrc']
    
    Run `<histogram-object>.help('attribute')` on any of the above.
    '<histogram-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [50512 50531]))                  
                :type "class")
                nil [49795 50532])
            ("Histogram2d" type
               (:documentation "
    Valid attributes for 'histogram2d' at path [] under parents ():
    
        ['autobinx', 'autobiny', 'autocolorscale', 'colorbar', 'colorscale',
        'customdata', 'customdatasrc', 'histfunc', 'histnorm', 'hoverinfo',
        'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc', 'legendgroup', 'marker',
        'name', 'nbinsx', 'nbinsy', 'opacity', 'reversescale', 'showlegend',
        'showscale', 'stream', 'type', 'uid', 'visible', 'x', 'xaxis', 'xbins',
        'xcalendar', 'xgap', 'xsrc', 'y', 'yaxis', 'ybins', 'ycalendar',
        'ygap', 'ysrc', 'z', 'zauto', 'zmax', 'zmin', 'zsmooth', 'zsrc']
    
    Run `<histogram2d-object>.help('attribute')` on any of the above.
    '<histogram2d-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [51317 51338]))                  
                :type "class")
                nil [50534 51339])
            ("Histogram2dContour" type
               (:documentation "
    Valid attributes for 'histogram2dcontour' at path [] under parents ():
    
        ['autobinx', 'autobiny', 'autocolorscale', 'autocontour', 'colorbar',
        'colorscale', 'contours', 'customdata', 'customdatasrc', 'histfunc',
        'histnorm', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc',
        'legendgroup', 'line', 'marker', 'name', 'nbinsx', 'nbinsy',
        'ncontours', 'opacity', 'reversescale', 'showlegend', 'showscale',
        'stream', 'type', 'uid', 'visible', 'x', 'xaxis', 'xbins', 'xcalendar',
        'xsrc', 'y', 'yaxis', 'ybins', 'ycalendar', 'ysrc', 'z', 'zauto',
        'zmax', 'zmin', 'zsrc']
    
    Run `<histogram2dcontour-object>.help('attribute')` on any of the above.
    '<histogram2dcontour-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [52181 52209]))                  
                :type "class")
                nil [51341 52210])
            ("Histogram2dcontour" type
               (:documentation "
    Valid attributes for 'histogram2dcontour' at path [] under parents ():
    
        ['autobinx', 'autobiny', 'autocolorscale', 'autocontour', 'colorbar',
        'colorscale', 'contours', 'customdata', 'customdatasrc', 'histfunc',
        'histnorm', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc',
        'legendgroup', 'line', 'marker', 'name', 'nbinsx', 'nbinsy',
        'ncontours', 'opacity', 'reversescale', 'showlegend', 'showscale',
        'stream', 'type', 'uid', 'visible', 'x', 'xaxis', 'xbins', 'xcalendar',
        'xsrc', 'y', 'yaxis', 'ybins', 'ycalendar', 'ysrc', 'z', 'zauto',
        'zmax', 'zmin', 'zsrc']
    
    Run `<histogram2dcontour-object>.help('attribute')` on any of the above.
    '<histogram2dcontour-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [53052 53080]))                  
                :type "class")
                nil [52212 53081])
            ("Layout" type
               (:documentation "
    Valid attributes for 'layout' at path [] under parents ():
    
        ['angularaxis', 'annotations', 'autosize', 'bargap', 'bargroupgap',
        'barmode', 'barnorm', 'boxgap', 'boxgroupgap', 'boxmode', 'calendar',
        'direction', 'dragmode', 'font', 'geo', 'height', 'hiddenlabels',
        'hiddenlabelssrc', 'hidesources', 'hoverlabel', 'hovermode', 'images',
        'legend', 'mapbox', 'margin', 'orientation', 'paper_bgcolor',
        'plot_bgcolor', 'radialaxis', 'scene', 'separators', 'shapes',
        'showlegend', 'sliders', 'smith', 'ternary', 'title', 'titlefont',
        'updatemenus', 'width', 'xaxis', 'yaxis']
    
    Run `<layout-object>.help('attribute')` on any of the above.
    '<layout-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [53883 53899]))                  
                :type "class")
                nil [53083 53900])
            ("Legend" type
               (:documentation "
    Valid attributes for 'legend' at path [] under parents ():
    
        ['bgcolor', 'bordercolor', 'borderwidth', 'font', 'orientation',
        'tracegroupgap', 'traceorder', 'x', 'xanchor', 'y', 'yanchor']
    
    Run `<legend-object>.help('attribute')` on any of the above.
    '<legend-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [54273 54289]))                  
                :type "class")
                nil [53902 54290])
            ("Line" type
               (:documentation "
    Valid attributes for 'line' at path [] under parents ():
    
        ['autocolorscale', 'cauto', 'cmax', 'cmin', 'color', 'colorbar',
        'colorscale', 'colorsrc', 'dash', 'outliercolor', 'outlierwidth',
        'reversescale', 'shape', 'showscale', 'simplify', 'smoothing', 'width',
        'widthsrc']
    
    Run `<line-object>.help('attribute')` on any of the above.
    '<line-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [54758 54772]))                  
                :type "class")
                nil [54292 54773])
            ("Margin" type
               (:documentation "
    Valid attributes for 'margin' at path [] under parents ():
    
        ['autoexpand', 'b', 'l', 'pad', 'r', 't']
    
    Run `<margin-object>.help('attribute')` on any of the above.
    '<margin-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [55052 55068]))                  
                :type "class")
                nil [54775 55069])
            ("Marker" type
               (:documentation "
    Valid attributes for 'marker' at path [] under parents ():
    
        ['autocolorscale', 'blend', 'border', 'cauto', 'cmax', 'cmin', 'color',
        'colorbar', 'colors', 'colorscale', 'colorsrc', 'colorssrc',
        'gradient', 'line', 'maxdisplayed', 'opacity', 'opacitysrc',
        'outliercolor', 'reversescale', 'showscale', 'size', 'sizemax',
        'sizemin', 'sizemode', 'sizeref', 'sizesrc', 'symbol', 'symbolsrc']
    
    Run `<marker-object>.help('attribute')` on any of the above.
    '<marker-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [55664 55680]))                  
                :type "class")
                nil [55071 55681])
            ("Mesh3d" type
               (:documentation "
    Valid attributes for 'mesh3d' at path [] under parents ():
    
        ['alphahull', 'autocolorscale', 'cauto', 'cmax', 'cmin', 'color',
        'colorbar', 'colorscale', 'contour', 'customdata', 'customdatasrc',
        'delaunayaxis', 'facecolor', 'facecolorsrc', 'flatshading',
        'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'i', 'ids', 'idssrc',
        'intensity', 'intensitysrc', 'isrc', 'j', 'jsrc', 'k', 'ksrc',
        'legendgroup', 'lighting', 'lightposition', 'name', 'opacity',
        'reversescale', 'scene', 'showlegend', 'showscale', 'stream', 'type',
        'uid', 'vertexcolor', 'vertexcolorsrc', 'visible', 'x', 'xcalendar',
        'xsrc', 'y', 'ycalendar', 'ysrc', 'z', 'zcalendar', 'zsrc']
    
    Run `<mesh3d-object>.help('attribute')` on any of the above.
    '<mesh3d-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [56566 56582]))                  
                :type "class")
                nil [55683 56583])
            ("Ohlc" type
               (:documentation "
    Valid attributes for 'ohlc' at path [] under parents ():
    
        ['close', 'closesrc', 'customdata', 'customdatasrc', 'decreasing',
        'high', 'highsrc', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'ids',
        'idssrc', 'increasing', 'legendgroup', 'line', 'low', 'lowsrc', 'name',
        'opacity', 'open', 'opensrc', 'showlegend', 'stream', 'text',
        'textsrc', 'tickwidth', 'type', 'uid', 'visible', 'x', 'xaxis',
        'xcalendar', 'xsrc', 'yaxis']
    
    Run `<ohlc-object>.help('attribute')` on any of the above.
    '<ohlc-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [57216 57230]))                  
                :type "class")
                nil [56585 57231])
            ("Parcoords" type
               (:documentation "
    Valid attributes for 'parcoords' at path [] under parents ():
    
        ['customdata', 'customdatasrc', 'dimensions', 'domain', 'hoverinfo',
        'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc', 'labelfont',
        'legendgroup', 'line', 'name', 'opacity', 'rangefont', 'showlegend',
        'stream', 'tickfont', 'type', 'uid', 'visible']
    
    Run `<parcoords-object>.help('attribute')` on any of the above.
    '<parcoords-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [57750 57769]))                  
                :type "class")
                nil [57233 57770])
            ("Pie" type
               (:documentation "
    Valid attributes for 'pie' at path [] under parents ():
    
        ['customdata', 'customdatasrc', 'direction', 'dlabel', 'domain',
        'hole', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'hovertext',
        'hovertextsrc', 'ids', 'idssrc', 'insidetextfont', 'label0', 'labels',
        'labelssrc', 'legendgroup', 'marker', 'name', 'opacity',
        'outsidetextfont', 'pull', 'pullsrc', 'rotation', 'scalegroup',
        'showlegend', 'sort', 'stream', 'text', 'textfont', 'textinfo',
        'textposition', 'textpositionsrc', 'textsrc', 'type', 'uid', 'values',
        'valuessrc', 'visible']
    
    Run `<pie-object>.help('attribute')` on any of the above.
    '<pie-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [58531 58544]))                  
                :type "class")
                nil [57772 58545])
            ("Pointcloud" type
               (:documentation "
    Valid attributes for 'pointcloud' at path [] under parents ():
    
        ['customdata', 'customdatasrc', 'hoverinfo', 'hoverinfosrc',
        'hoverlabel', 'ids', 'idssrc', 'indices', 'indicessrc', 'legendgroup',
        'marker', 'name', 'opacity', 'showlegend', 'stream', 'text', 'textsrc',
        'type', 'uid', 'visible', 'x', 'xaxis', 'xbounds', 'xboundssrc',
        'xsrc', 'xy', 'xysrc', 'y', 'yaxis', 'ybounds', 'yboundssrc', 'ysrc']
    
    Run `<pointcloud-object>.help('attribute')` on any of the above.
    '<pointcloud-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [59169 59189]))                  
                :type "class")
                nil [58547 59190])
            ("RadialAxis" type
               (:documentation "
    Valid attributes for 'radialaxis' at path [] under parents ():
    
        ['domain', 'endpadding', 'orientation', 'range', 'showline',
        'showticklabels', 'tickcolor', 'ticklen', 'tickorientation',
        'ticksuffix', 'visible']
    
    Run `<radialaxis-object>.help('attribute')` on any of the above.
    '<radialaxis-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [59606 59626]))                  
                :type "class")
                nil [59192 59627])
            ("Sankey" type
               (:documentation "
    Valid attributes for 'sankey' at path [] under parents ():
    
        ['arrangement', 'customdata', 'customdatasrc', 'domain', 'hoverinfo',
        'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc', 'legendgroup', 'link',
        'name', 'node', 'opacity', 'orientation', 'showlegend', 'stream',
        'textfont', 'type', 'uid', 'valueformat', 'valuesuffix', 'visible']
    
    Run `<sankey-object>.help('attribute')` on any of the above.
    '<sankey-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [60162 60178]))                  
                :type "class")
                nil [59629 60179])
            ("Scatter" type
               (:documentation "
    Valid attributes for 'scatter' at path [] under parents ():
    
        ['cliponaxis', 'connectgaps', 'customdata', 'customdatasrc', 'dx',
        'dy', 'error_x', 'error_y', 'fill', 'fillcolor', 'hoverinfo',
        'hoverinfosrc', 'hoverlabel', 'hoveron', 'hovertext', 'hovertextsrc',
        'ids', 'idssrc', 'legendgroup', 'line', 'marker', 'mode', 'name',
        'opacity', 'r', 'rsrc', 'showlegend', 'stream', 't', 'text',
        'textfont', 'textposition', 'textpositionsrc', 'textsrc', 'tsrc',
        'type', 'uid', 'visible', 'x', 'x0', 'xaxis', 'xcalendar', 'xsrc', 'y',
        'y0', 'yaxis', 'ycalendar', 'ysrc']
    
    Run `<scatter-object>.help('attribute')` on any of the above.
    '<scatter-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [60976 60993]))                  
                :type "class")
                nil [60181 60994])
            ("Scatter3d" type
               (:documentation "
    Valid attributes for 'scatter3d' at path [] under parents ():
    
        ['connectgaps', 'customdata', 'customdatasrc', 'error_x', 'error_y',
        'error_z', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'hovertext',
        'hovertextsrc', 'ids', 'idssrc', 'legendgroup', 'line', 'marker',
        'mode', 'name', 'opacity', 'projection', 'scene', 'showlegend',
        'stream', 'surfaceaxis', 'surfacecolor', 'text', 'textfont',
        'textposition', 'textpositionsrc', 'textsrc', 'type', 'uid', 'visible',
        'x', 'xcalendar', 'xsrc', 'y', 'ycalendar', 'ysrc', 'z', 'zcalendar',
        'zsrc']
    
    Run `<scatter3d-object>.help('attribute')` on any of the above.
    '<scatter3d-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [61776 61795]))                  
                :type "class")
                nil [60996 61796])
            ("Scattercarpet" type
               (:documentation "
    Valid attributes for 'scattercarpet' at path [] under parents ():
    
        ['a', 'asrc', 'b', 'bsrc', 'carpet', 'connectgaps', 'customdata',
        'customdatasrc', 'fill', 'fillcolor', 'hoverinfo', 'hoverinfosrc',
        'hoverlabel', 'hoveron', 'ids', 'idssrc', 'legendgroup', 'line',
        'marker', 'mode', 'name', 'opacity', 'showlegend', 'stream', 'sum',
        'text', 'textfont', 'textposition', 'textpositionsrc', 'textsrc',
        'type', 'uid', 'visible', 'xaxis', 'yaxis']
    
    Run `<scattercarpet-object>.help('attribute')` on any of the above.
    '<scattercarpet-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [62477 62500]))                  
                :type "class")
                nil [61798 62501])
            ("Scattergeo" type
               (:documentation "
    Valid attributes for 'scattergeo' at path [] under parents ():
    
        ['connectgaps', 'customdata', 'customdatasrc', 'fill', 'fillcolor',
        'geo', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'hovertext',
        'hovertextsrc', 'ids', 'idssrc', 'lat', 'latsrc', 'legendgroup',
        'line', 'locationmode', 'locations', 'locationssrc', 'lon', 'lonsrc',
        'marker', 'mode', 'name', 'opacity', 'showlegend', 'stream', 'text',
        'textfont', 'textposition', 'textpositionsrc', 'textsrc', 'type',
        'uid', 'visible']
    
    Run `<scattergeo-object>.help('attribute')` on any of the above.
    '<scattergeo-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [63221 63241]))                  
                :type "class")
                nil [62503 63242])
            ("Scattergl" type
               (:documentation "
    Valid attributes for 'scattergl' at path [] under parents ():
    
        ['connectgaps', 'customdata', 'customdatasrc', 'dx', 'dy', 'error_x',
        'error_y', 'fill', 'fillcolor', 'hoverinfo', 'hoverinfosrc',
        'hoverlabel', 'ids', 'idssrc', 'legendgroup', 'line', 'marker', 'mode',
        'name', 'opacity', 'showlegend', 'stream', 'text', 'textsrc', 'type',
        'uid', 'visible', 'x', 'x0', 'xaxis', 'xcalendar', 'xsrc', 'y', 'y0',
        'yaxis', 'ycalendar', 'ysrc']
    
    Run `<scattergl-object>.help('attribute')` on any of the above.
    '<scattergl-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [63904 63923]))                  
                :type "class")
                nil [63244 63924])
            ("Scattermapbox" type
               (:documentation "
    Valid attributes for 'scattermapbox' at path [] under parents ():
    
        ['connectgaps', 'customdata', 'customdatasrc', 'fill', 'fillcolor',
        'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'hovertext', 'hovertextsrc',
        'ids', 'idssrc', 'lat', 'latsrc', 'legendgroup', 'line', 'lon',
        'lonsrc', 'marker', 'mode', 'name', 'opacity', 'showlegend', 'stream',
        'subplot', 'text', 'textfont', 'textposition', 'textsrc', 'type',
        'uid', 'visible']
    
    Run `<scattermapbox-object>.help('attribute')` on any of the above.
    '<scattermapbox-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [64588 64611]))                  
                :type "class")
                nil [63926 64612])
            ("Scatterternary" type
               (:documentation "
    Valid attributes for 'scatterternary' at path [] under parents ():
    
        ['a', 'asrc', 'b', 'bsrc', 'c', 'cliponaxis', 'connectgaps', 'csrc',
        'customdata', 'customdatasrc', 'fill', 'fillcolor', 'hoverinfo',
        'hoverinfosrc', 'hoverlabel', 'hoveron', 'hovertext', 'hovertextsrc',
        'ids', 'idssrc', 'legendgroup', 'line', 'marker', 'mode', 'name',
        'opacity', 'showlegend', 'stream', 'subplot', 'sum', 'text',
        'textfont', 'textposition', 'textpositionsrc', 'textsrc', 'type',
        'uid', 'visible']
    
    Run `<scatterternary-object>.help('attribute')` on any of the above.
    '<scatterternary-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [65344 65368]))                  
                :type "class")
                nil [64614 65369])
            ("Scene" type
               (:documentation "
    Valid attributes for 'scene' at path [] under parents ():
    
        ['annotations', 'aspectmode', 'aspectratio', 'bgcolor', 'camera',
        'cameraposition', 'domain', 'dragmode', 'hovermode', 'xaxis', 'yaxis',
        'zaxis']
    
    Run `<scene-object>.help('attribute')` on any of the above.
    '<scene-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [65764 65779]))                  
                :type "class")
                nil [65371 65780])
            ("Stream" type
               (:documentation "
    Valid attributes for 'stream' at path [] under parents ():
    
        ['maxpoints', 'token']
    
    Run `<stream-object>.help('attribute')` on any of the above.
    '<stream-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [66040 66056]))                  
                :type "class")
                nil [65782 66057])
            ("Surface" type
               (:documentation "
    Valid attributes for 'surface' at path [] under parents ():
    
        ['autocolorscale', 'cauto', 'cmax', 'cmin', 'colorbar', 'colorscale',
        'contours', 'customdata', 'customdatasrc', 'hidesurface', 'hoverinfo',
        'hoverinfosrc', 'hoverlabel', 'ids', 'idssrc', 'legendgroup',
        'lighting', 'lightposition', 'name', 'opacity', 'reversescale',
        'scene', 'showlegend', 'showscale', 'stream', 'surfacecolor',
        'surfacecolorsrc', 'text', 'textsrc', 'type', 'uid', 'visible', 'x',
        'xcalendar', 'xsrc', 'y', 'ycalendar', 'ysrc', 'z', 'zauto',
        'zcalendar', 'zmax', 'zmin', 'zsrc']
    
    Run `<surface-object>.help('attribute')` on any of the above.
    '<surface-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [66850 66867]))                  
                :type "class")
                nil [66059 66868])
            ("Trace" type
               (:superclasses ("dict")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [66893 66897]))                  
                :type "class")
                nil [66870 66898])
            ("XAxis" type
               (:documentation "
    Valid attributes for 'xaxis' at path [] under parents ():
    
        ['anchor', 'autorange', 'autotick', 'backgroundcolor', 'calendar',
        'categoryarray', 'categoryarraysrc', 'categoryorder', 'color',
        'constrain', 'constraintoward', 'domain', 'dtick', 'exponentformat',
        'fixedrange', 'gridcolor', 'gridwidth', 'hoverformat', 'layer',
        'linecolor', 'linewidth', 'mirror', 'nticks', 'overlaying', 'position',
        'range', 'rangemode', 'rangeselector', 'rangeslider', 'scaleanchor',
        'scaleratio', 'separatethousands', 'showaxeslabels', 'showbackground',
        'showexponent', 'showgrid', 'showline', 'showspikes', 'showticklabels',
        'showtickprefix', 'showticksuffix', 'side', 'spikecolor', 'spikedash',
        'spikemode', 'spikesides', 'spikethickness', 'tick0', 'tickangle',
        'tickcolor', 'tickfont', 'tickformat', 'ticklen', 'tickmode',
        'tickprefix', 'ticks', 'ticksuffix', 'ticktext', 'ticktextsrc',
        'tickvals', 'tickvalssrc', 'tickwidth', 'title', 'titlefont', 'type',
        'visible', 'zeroline', 'zerolinecolor', 'zerolinewidth']
    
    Run `<xaxis-object>.help('attribute')` on any of the above.
    '<xaxis-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [68173 68188]))                  
                :type "class")
                nil [66900 68189])
            ("XBins" type
               (:documentation "
    Valid attributes for 'xbins' at path [] under parents ():
    
        ['end', 'size', 'start']
    
    Run `<xbins-object>.help('attribute')` on any of the above.
    '<xbins-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [68447 68462]))                  
                :type "class")
                nil [68191 68463])
            ("YAxis" type
               (:documentation "
    Valid attributes for 'yaxis' at path [] under parents ():
    
        ['anchor', 'autorange', 'autotick', 'backgroundcolor', 'calendar',
        'categoryarray', 'categoryarraysrc', 'categoryorder', 'color',
        'constrain', 'constraintoward', 'domain', 'dtick', 'exponentformat',
        'fixedrange', 'gridcolor', 'gridwidth', 'hoverformat', 'layer',
        'linecolor', 'linewidth', 'mirror', 'nticks', 'overlaying', 'position',
        'range', 'rangemode', 'scaleanchor', 'scaleratio', 'separatethousands',
        'showaxeslabels', 'showbackground', 'showexponent', 'showgrid',
        'showline', 'showspikes', 'showticklabels', 'showtickprefix',
        'showticksuffix', 'side', 'spikecolor', 'spikedash', 'spikemode',
        'spikesides', 'spikethickness', 'tick0', 'tickangle', 'tickcolor',
        'tickfont', 'tickformat', 'ticklen', 'tickmode', 'tickprefix', 'ticks',
        'ticksuffix', 'ticktext', 'ticktextsrc', 'tickvals', 'tickvalssrc',
        'tickwidth', 'title', 'titlefont', 'type', 'visible', 'zeroline',
        'zerolinecolor', 'zerolinewidth']
    
    Run `<yaxis-object>.help('attribute')` on any of the above.
    '<yaxis-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [69706 69721]))                  
                :type "class")
                nil [68465 69722])
            ("YBins" type
               (:documentation "
    Valid attributes for 'ybins' at path [] under parents ():
    
        ['end', 'size', 'start']
    
    Run `<ybins-object>.help('attribute')` on any of the above.
    '<ybins-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [69980 69995]))                  
                :type "class")
                nil [69724 69996])
            ("ZAxis" type
               (:documentation "
    Valid attributes for 'zaxis' at path [] under parents ():
    
        ['autorange', 'backgroundcolor', 'calendar', 'categoryarray',
        'categoryarraysrc', 'categoryorder', 'color', 'dtick',
        'exponentformat', 'gridcolor', 'gridwidth', 'hoverformat', 'linecolor',
        'linewidth', 'mirror', 'nticks', 'range', 'rangemode',
        'separatethousands', 'showaxeslabels', 'showbackground',
        'showexponent', 'showgrid', 'showline', 'showspikes', 'showticklabels',
        'showtickprefix', 'showticksuffix', 'spikecolor', 'spikesides',
        'spikethickness', 'tick0', 'tickangle', 'tickcolor', 'tickfont',
        'tickformat', 'ticklen', 'tickmode', 'tickprefix', 'ticks',
        'ticksuffix', 'ticktext', 'ticktextsrc', 'tickvals', 'tickvalssrc',
        'tickwidth', 'title', 'titlefont', 'type', 'visible', 'zeroline',
        'zerolinecolor', 'zerolinewidth']
    
    Run `<zaxis-object>.help('attribute')` on any of the above.
    '<zaxis-object>' is the object at []

    "
                :superclasses ("PlotlyDict")
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [71047 71062]))                  
                :type "class")
                nil [69998 71063])
            ("__all__" variable nil nil [71064 71141]))          
      :file "graph_objs.py"
      :pointmax 71142
      :fsize 71141
      :lastmodtime '(22984 37462 0 0)
      :unmatched-syntax nil))
  :file "!Users!xiaoli!anaconda!lib!python3.6!site-packages!plotly!graph_objs!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
