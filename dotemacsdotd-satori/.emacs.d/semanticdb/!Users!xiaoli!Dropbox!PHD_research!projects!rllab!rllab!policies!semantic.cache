;; Object policies/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "policies/"
  :tables
  (list
    (semanticdb-table "gaussian_mlp_policy.py"
      :major-mode 'python-mode
      :tags 
        '( ("lasagne" include nil nil [1 15])
            ("lasagne.layers" include nil nil [16 42])
            ("lasagne.nonlinearities" include nil nil [43 78])
            ("numpy" include nil nil [79 97])
            ("rllab.core.lasagne_layers" include nil nil [99 147])
            ("rllab.core.lasagne_powered" include nil nil [148 201])
            ("rllab.core.network" include nil nil [202 236])
            ("rllab.spaces" include nil nil [237 265])
            ("rllab.core.serializable" include nil nil [267 315])
            ("rllab.policies.base" include nil nil [316 364])
            ("rllab.misc.overrides" include nil nil [365 407])
            ("rllab.misc" include nil nil [408 437])
            ("rllab.misc" include nil nil [438 464])
            ("rllab.distributions.diagonal_gaussian" include nil nil [465 531])
            ("theano.tensor" include nil nil [532 558])
            ("GaussianMLPPolicy" type
               (:superclasses ("StochasticPolicy" "LasagnePowered" "Serializable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :param env_spec:
        :param hidden_sizes: list of sizes for the fully-connected hidden layers
        :param learn_std: Is std trainable
        :param init_std: Initial std
        :param adaptive_std:
        :param std_share_network:
        :param std_hidden_sizes: list of sizes for the fully-connected layers for std
        :param min_std: whether to make sure that the std is at least some threshold value, to avoid numerical issues
        :param std_hidden_nonlinearity:
        :param hidden_nonlinearity: nonlinearity used for each hidden layer
        :param output_nonlinearity: nonlinearity for the output layer
        :param mean_network: custom network for the output mean
        :param std_network: custom network for the output log std
        :return:
        \"\"\"" code nil (reparse-symbol indented_block_body) [1115 1916])
                            ("Serializable" code nil (reparse-symbol indented_block_body) [1925 1964])
                            ("assert" code nil (reparse-symbol indented_block_body) [1973 2018])
                            ("obs_dim" variable nil (reparse-symbol indented_block_body) [2028 2073])
                            ("action_dim" variable nil (reparse-symbol indented_block_body) [2082 2125])
                            ("if" code nil (reparse-symbol indented_block_body) [2160 2467])
                            ("self" variable nil (reparse-symbol indented_block_body) [2497 2530])
                            ("l_mean" variable nil (reparse-symbol indented_block_body) [2540 2574])
                            ("obs_var" variable nil (reparse-symbol indented_block_body) [2583 2615])
                            ("if" code nil (reparse-symbol indented_block_body) [2625 3621])
                            ("self" variable nil (reparse-symbol indented_block_body) [3630 3652])
                            ("mean_var, log_std_var" code nil (reparse-symbol indented_block_body) [3662 3719])
                            ("if" code nil (reparse-symbol indented_block_body) [3729 3825])
                            ("self, self" code nil (reparse-symbol indented_block_body) [3834 3891])
                            ("self" variable nil (reparse-symbol indented_block_body) [3901 3922])
                            ("self" variable nil (reparse-symbol indented_block_body) [3931 3958])
                            ("self" variable nil (reparse-symbol indented_block_body) [3968 4009])
                            ("LasagnePowered" code nil (reparse-symbol indented_block_body) [4019 4069])
                            ("super" code nil (reparse-symbol indented_block_body) [4078 4127])
                            ("self" variable nil (reparse-symbol indented_block_body) [4137 4258]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [664 668])
                            ("env_spec" variable nil (reparse-symbol function_parameters) [682 690])
                            ("hidden_sizes" variable nil (reparse-symbol function_parameters) [704 716])
                            ("learn_std" variable nil (reparse-symbol function_parameters) [739 748])
                            ("init_std" variable nil (reparse-symbol function_parameters) [767 775])
                            ("adaptive_std" variable nil (reparse-symbol function_parameters) [793 805])
                            ("std_share_network" variable nil (reparse-symbol function_parameters) [825 842])
                            ("std_hidden_sizes" variable nil (reparse-symbol function_parameters) [862 878])
                            ("min_std" variable nil (reparse-symbol function_parameters) [901 908])
                            ("std_hidden_nonlinearity" variable nil (reparse-symbol function_parameters) [927 950])
                            ("hidden_nonlinearity" variable nil (reparse-symbol function_parameters) [972 991])
                            ("output_nonlinearity" variable nil (reparse-symbol function_parameters) [1013 1032])
                            ("mean_network" variable nil (reparse-symbol function_parameters) [1051 1063])
                            ("std_network" variable nil (reparse-symbol function_parameters) [1082 1093]))                          
                        :documentation "
        :param env_spec:
        :param hidden_sizes: list of sizes for the fully-connected hidden layers
        :param learn_std: Is std trainable
        :param init_std: Initial std
        :param adaptive_std:
        :param std_share_network:
        :param std_hidden_sizes: list of sizes for the fully-connected layers for std
        :param min_std: whether to make sure that the std is at least some threshold value, to avoid numerical issues
        :param std_hidden_nonlinearity:
        :param hidden_nonlinearity: nonlinearity used for each hidden layer
        :param output_nonlinearity: nonlinearity for the output layer
        :param mean_network: custom network for the output mean
        :param std_network: custom network for the output log std
        :return:
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [638 4259])
                    ("dist_info_sym" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4282 4286])
                            ("obs_var" variable nil (reparse-symbol function_parameters) [4288 4295])
                            ("state_info_vars" variable nil (reparse-symbol function_parameters) [4297 4312]))                          )
                        (reparse-symbol indented_block_body) [4264 4585])
                    ("get_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4620 4624])
                            ("observation" variable nil (reparse-symbol function_parameters) [4626 4637]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4590 4918])
                    ("get_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4939 4943])
                            ("observations" variable nil (reparse-symbol function_parameters) [4945 4957]))                          )
                        (reparse-symbol indented_block_body) [4923 5232])
                    ("get_reparam_action_sym" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5264 5268])
                            ("obs_var" variable nil (reparse-symbol function_parameters) [5270 5277])
                            ("action_var" variable nil (reparse-symbol function_parameters) [5279 5289])
                            ("old_dist_info_vars" variable nil (reparse-symbol function_parameters) [5291 5309]))                          
                        :documentation "
        Given observations, old actions, and distribution of old actions, return a symbolically reparameterized
        representation of the actions in terms of the policy parameters
        :param obs_var:
        :param action_var:
        :param old_dist_info_vars:
        :return:
        ")
                        (reparse-symbol indented_block_body) [5237 6121])
                    ("log_diagnostics" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6146 6150])
                            ("paths" variable nil (reparse-symbol function_parameters) [6152 6157]))                          )
                        (reparse-symbol indented_block_body) [6126 6348])
                    ("distribution" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6384 6388]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6353 6417]))                  
                :type "class")
                nil [561 6417]))          
      :file "gaussian_mlp_policy.py"
      :pointmax 6417
      :fsize 6416
      :lastmodtime '(22491 13952 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "base.py"
      :file "base.py"
      :fsize 2770
      :lastmodtime '(22354 18394 0 0)))
  :file "!Users!xiaoli!Dropbox!PHD_research!projects!rllab!rllab!policies!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
