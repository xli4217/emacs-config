;; Object joblib/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "joblib/"
  :tables
  (list
    (semanticdb-table "pool.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Custom implementation of multiprocessing.Pool with custom pickler.

This module provides efficient ways of working with data stored in
shared memory with numpy.memmap arrays without inducing any memory
copy between the parent and child processes.

This module should not be imported if multiprocessing is not
available as it implements subclasses of multiprocessing Pool
that uses a custom alternative to SimpleQueue.

\"\"\"" code nil nil [1 426])
            ("mmap" include nil nil [538 559])
            ("errno" include nil nil [560 572])
            ("os" include nil nil [573 582])
            ("stat" include nil nil [583 594])
            ("sys" include nil nil [595 605])
            ("threading" include nil nil [606 622])
            ("atexit" include nil nil [623 636])
            ("tempfile" include nil nil [637 652])
            ("shutil" include nil nil [653 666])
            ("warnings" include nil nil [667 682])
            ("time" include nil nil [683 705])
            ("try" code nil nil [707 771])
            ("pickle" include nil nil [772 802])
            ("try" code nil nil [803 987])
            ("pickle" include nil nil [1088 1114])
            ("pickle" include nil nil [1116 1151])
            ("io" include nil nil [1152 1174])
            ("assert_spawning" include nil nil [1207 1233])
            ("mp" include nil nil [1207 1233])
            ("multiprocessing.pool" include nil nil [1331 1368])
            ("try" code nil nil [1370 1483])
            ("load" include nil nil [1503 1514])
            ("dump" include nil nil [1534 1545])
            ("hash" include nil nil [1560 1571])
            ("SYSTEM_SHARED_MEM_FS" variable nil nil [1722 1755])
            ("FOLDER_PERMISSIONS" code nil nil [1929 1992])
            ("FILE_PERMISSIONS" code nil nil [1993 2039])
            ("_get_backing_memmap" function
               (:documentation "Recursively look up the original np.memmap instance base if any."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2215 2216]))                  )
                nil [2191 2691])
            ("has_shareable_memory" function
               (:documentation "Return True if a is backed by some mmap buffer directly or not."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2718 2719]))                  )
                nil [2693 2842])
            ("_strided_from_memmap" function
               (:documentation "Reconstruct an array view on a memory mapped file."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [2869 2877])
                    ("dtype" variable nil (reparse-symbol function_parameters) [2879 2884])
                    ("mode" variable nil (reparse-symbol function_parameters) [2886 2890])
                    ("offset" variable nil (reparse-symbol function_parameters) [2892 2898])
                    ("order" variable nil (reparse-symbol function_parameters) [2900 2905])
                    ("shape" variable nil (reparse-symbol function_parameters) [2907 2912])
                    ("strides" variable nil (reparse-symbol function_parameters) [2914 2921])
                    ("total_buffer_len" variable nil (reparse-symbol function_parameters) [2948 2964]))                  )
                nil [2844 3666])
            ("_reduce_memmap_backed" function
               (:documentation "Pickling reduction for memmap backed arrays.

    a is expected to be an instance of np.ndarray (or np.memmap)
    m is expected to be an instance of np.memmap on the top of the ``base``
    attribute ancestry of a. ``m.base`` should be the real python mmap object.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [3694 3695])
                    ("m" variable nil (reparse-symbol function_parameters) [3697 3698]))                  )
                nil [3668 4930])
            ("reduce_memmap" function
               (:documentation "Pickle the descriptors of a memmap instance to reopen on same file."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [4950 4951]))                  )
                nil [4932 5486])
            ("ArrayMemmapReducer" type
               (:documentation "Reducer callable to dump large arrays to memmap files.

    Parameters
    ----------
    max_nbytes: int
        Threshold to trigger memmaping of large arrays to files created
        a folder.
    temp_folder: str
        Path of a folder where files for backing memmaped arrays are created.
    mmap_mode: 'r', 'r+' or 'c'
        Mode for the created memmap datastructure. See the documentation of
        numpy.memmap for more details. Note: 'w+' is coerced to 'r+'
        automatically to avoid zeroing the data on unpickling.
    verbose: int, optional, 0 by default
        If verbose > 0, memmap creations are logged.
        If verbose > 1, both memmap creations, reuse and array pickling are
        logged.
    prewarm: bool, optional, False by default.
        Force a read on newly memmaped array to make sure that OS pre-cache it
        memory. This can be useful to avoid concurrent disk access when the
        same data array is passed to different worker processes.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6653 6682])
                            ("self" variable nil (reparse-symbol indented_block_body) [6691 6722])
                            ("self" variable nil (reparse-symbol indented_block_body) [6731 6758])
                            ("self" variable nil (reparse-symbol indented_block_body) [6767 6794])
                            ("self" variable nil (reparse-symbol indented_block_body) [6803 6826])
                            ("if" code nil (reparse-symbol indented_block_body) [6835 7047]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6543 6547])
                            ("max_nbytes" variable nil (reparse-symbol function_parameters) [6549 6559])
                            ("temp_folder" variable nil (reparse-symbol function_parameters) [6561 6572])
                            ("mmap_mode" variable nil (reparse-symbol function_parameters) [6574 6583])
                            ("verbose" variable nil (reparse-symbol function_parameters) [6585 6592])
                            ("context_id" variable nil (reparse-symbol function_parameters) [6613 6623])
                            ("prewarm" variable nil (reparse-symbol function_parameters) [6630 6637]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6530 7047])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7065 7069])
                            ("a" variable nil (reparse-symbol function_parameters) [7071 7072]))                          )
                        (reparse-symbol indented_block_body) [7052 9564]))                  
                :type "class")
                nil [5488 9564])
            ("CustomizablePickler" type
               (:documentation "Pickler that accepts custom reducers.

    HIGHEST_PROTOCOL is selected by default as this pickler is used
    to pickle ephemeral datastructures for interprocess communication
    hence no backward compatibility is required.

    `reducers` is expected to be a dictionary with key/values
    being `(type, callable)` pairs where `callable` is a function that
    give an instance of `type` will return a tuple `(constructor,
    tuple_of_objects)` to rebuild an instance out of the pickled
    `tuple_of_objects` as would return a `__reduce__` method. See the
    standard library documentation on pickling for more details.

    "
                :superclasses ("Pickler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Pickler" code nil (reparse-symbol indented_block_body) [10799 10848])
                            ("if" code nil (reparse-symbol indented_block_body) [10857 10904])
                            ("if" code nil (reparse-symbol indented_block_body) [10912 11329])
                            ("for" code nil (reparse-symbol indented_block_body) [11337 11425]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10734 10738])
                            ("writer" variable nil (reparse-symbol function_parameters) [10740 10746])
                            ("reducers" variable nil (reparse-symbol function_parameters) [10748 10756])
                            ("protocol" variable nil (reparse-symbol function_parameters) [10763 10771]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10721 11425])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11443 11447])
                            ("type" variable nil (reparse-symbol function_parameters) [11449 11453])
                            ("reduce_func" variable nil (reparse-symbol function_parameters) [11455 11466]))                          
                        :documentation "Attach a reducer function to a given type in the dispatch table.")
                        (reparse-symbol indented_block_body) [11430 11975]))                  
                :type "class")
                nil [9687 11975])
            ("CustomizablePicklingQueue" type
               (:documentation "Locked Pipe implementation that uses a customizable pickler.

    This class is an alternative to the multiprocessing implementation
    of SimpleQueue in order to make it possible to pass custom
    pickling reducers, for instance to avoid memory copy when passing
    memory mapped datastructures.

    `reducers` is expected to be a dict with key / values being
    `(type, callable)` pairs where `callable` is a function that, given an
    instance of `type`, will return a tuple `(constructor, tuple_of_objects)`
    to rebuild an instance out of the pickled `tuple_of_objects` as would
    return a `__reduce__` method.

    See the standard library documentation on pickling for more details.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12790 12815])
                            ("self, self" code nil (reparse-symbol indented_block_body) [12824 12879])
                            ("self" variable nil (reparse-symbol indented_block_body) [12888 12916])
                            ("if" code nil (reparse-symbol indented_block_body) [12925 13039])
                            ("self" code nil (reparse-symbol indented_block_body) [13047 13067]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12751 12755])
                            ("context" variable nil (reparse-symbol function_parameters) [12757 12764])
                            ("reducers" variable nil (reparse-symbol function_parameters) [12766 12774]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12738 13068])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13090 13094]))                          )
                        (reparse-symbol indented_block_body) [13073 13229])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13251 13255])
                            ("state" variable nil (reparse-symbol function_parameters) [13257 13262]))                          )
                        (reparse-symbol indented_block_body) [13234 13390])
                    ("empty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13405 13409]))                          )
                        (reparse-symbol indented_block_body) [13395 13451])
                    ("_make_methods" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13474 13478]))                          )
                        (reparse-symbol indented_block_body) [13456 14520]))                  
                :type "class")
                nil [11977 14520])
            ("PicklingPool" type
               (:documentation "Pool implementation with customizable pickling reducers.

    This is useful to control how data is shipped between processes
    and makes it possible to use shared memory without useless
    copies induces by the default pickling methods of the original
    objects passed as arguments to dispatch.

    `forward_reducers` and `backward_reducers` are expected to be
    dictionaries with key/values being `(type, callable)` pairs where
    `callable` is a function that, given an instance of `type`, will return a
    tuple `(constructor, tuple_of_objects)` to rebuild an instance out of the
    pickled `tuple_of_objects` as would return a `__reduce__` method.
    See the standard library documentation about pickling for more details.

    "
                :superclasses ("Pool")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15427 15494])
                            ("if" code nil (reparse-symbol indented_block_body) [15502 15571])
                            ("self" variable nil (reparse-symbol indented_block_body) [15579 15620])
                            ("self" variable nil (reparse-symbol indented_block_body) [15629 15672])
                            ("poolargs" variable nil (reparse-symbol indented_block_body) [15681 15717])
                            ("poolargs" code nil (reparse-symbol indented_block_body) [15726 15749])
                            ("super" code nil (reparse-symbol indented_block_body) [15758 15804]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15322 15326])
                            ("processes" variable nil (reparse-symbol function_parameters) [15328 15337])
                            ("forward_reducers" variable nil (reparse-symbol function_parameters) [15344 15360])
                            ("backward_reducers" variable nil (reparse-symbol function_parameters) [15384 15401])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15408 15416]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15309 15805])
                    ("_setup_queues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15828 15832]))                          )
                        (reparse-symbol indented_block_body) [15810 16241]))                  
                :type "class")
                nil [14522 16241])
            ("delete_folder" function
               (:documentation "Utility function to cleanup a temporary folder if still existing."
                :arguments 
                  ( ("folder_path" variable nil (reparse-symbol function_parameters) [16261 16272]))                  )
                nil [16243 16540])
            ("MemmapingPool" type
               (:documentation "Process pool that shares large arrays to avoid memory copy.

    This drop-in replacement for `multiprocessing.pool.Pool` makes
    it possible to work efficiently with shared memory in a numpy
    context.

    Existing instances of numpy.memmap are preserved: the child
    suprocesses will have access to the same shared memory in the
    original mode except for the 'w+' mode that is automatically
    transformed as 'r+' to avoid zeroing the original data upon
    instantiation.

    Furthermore large arrays from the parent process are automatically
    dumped to a temporary folder on the filesystem such as child
    processes to access their content via memmaping (file system
    backed shared memory).

    Note: it is important to call the terminate method to collect
    the temporary folder used by the pool.

    Parameters
    ----------
    processes: int, optional
        Number of worker processes running concurrently in the pool.
    initializer: callable, optional
        Callable executed on worker process creation.
    initargs: tuple, optional
        Arguments passed to the initializer callable.
    temp_folder: str, optional
        Folder to be used by the pool for memmaping large arrays
        for sharing memory with worker processes. If None, this will try in
        order:
        - a folder pointed by the JOBLIB_TEMP_FOLDER environment variable,
        - /dev/shm if the folder exists and is writable: this is a RAMdisk
          filesystem available by default on modern Linux distributions,
        - the default system temporary folder that can be overridden
          with TMP, TMPDIR or TEMP environment variables, typically /tmp
          under Unix operating systems.
    max_nbytes int or None, optional, 1e6 by default
        Threshold on the size of arrays passed to the workers that
        triggers automated memory mapping in temp_folder.
        Use None to disable memmaping of large arrays.
    mmap_mode: {'r+', 'r', 'w+', 'c'}
        Memmapping mode for numpy arrays passed to workers.
        See 'max_nbytes' parameter documentation for more details.
    forward_reducers: dictionary, optional
        Reducers used to pickle objects passed from master to worker
        processes: see below.
    backward_reducers: dictionary, optional
        Reducers used to pickle return values from workers back to the
        master process.
    verbose: int, optional
        Make it possible to monitor how the communication of numpy arrays
        with the subprocess is handled (pickling or memmaping)
    prewarm: bool or str, optional, \"auto\" by default.
        If True, force a read on newly memmaped array to make sure that OS pre-
        cache it in memory. This can be useful to avoid concurrent disk access
        when the same data array is passed to different worker processes.
        If \"auto\" (by default), prewarm is set to True, unless the Linux shared
        memory partition /dev/shm is available and used as temp_folder.

    `forward_reducers` and `backward_reducers` are expected to be
    dictionaries with key/values being `(type, callable)` pairs where
    `callable` is a function that give an instance of `type` will return
    a tuple `(constructor, tuple_of_objects)` to rebuild an instance out
    of the pickled `tuple_of_objects` as would return a `__reduce__`
    method. See the standard library documentation on pickling for more
    details.

    "
                :superclasses ("PicklingPool")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [20265 20332])
                            ("if" code nil (reparse-symbol indented_block_body) [20340 20409])
                            ("if" code nil (reparse-symbol indented_block_body) [20417 20629])
                            ("use_shared_mem" variable nil (reparse-symbol indented_block_body) [20830 20852])
                            ("pool_folder_name" code nil (reparse-symbol indented_block_body) [20861 20948])
                            ("if" code nil (reparse-symbol indented_block_body) [20957 21050])
                            ("if" code nil (reparse-symbol indented_block_body) [21058 21630])
                            ("if" code nil (reparse-symbol indented_block_body) [21638 21775])
                            ("temp_folder" variable nil (reparse-symbol indented_block_body) [21783 21845])
                            ("pool_folder" variable nil (reparse-symbol indented_block_body) [21854 21911])
                            ("self" variable nil (reparse-symbol indented_block_body) [21920 21951])
                            ("pool_module_name" variable nil (reparse-symbol indented_block_body) [22306 22368])
                            ("_cleanup" function nil (reparse-symbol indented_block_body) [22378 23057])
                            ("atexit" code nil (reparse-symbol indented_block_body) [23066 23091])
                            ("if" code nil (reparse-symbol indented_block_body) [23101 24180])
                            ("poolargs" variable nil (reparse-symbol indented_block_body) [24189 24334])
                            ("poolargs" code nil (reparse-symbol indented_block_body) [24343 24366])
                            ("super" code nil (reparse-symbol indented_block_body) [24375 24422]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20051 20055])
                            ("processes" variable nil (reparse-symbol function_parameters) [20057 20066])
                            ("temp_folder" variable nil (reparse-symbol function_parameters) [20073 20084])
                            ("max_nbytes" variable nil (reparse-symbol function_parameters) [20091 20101])
                            ("mmap_mode" variable nil (reparse-symbol function_parameters) [20124 20133])
                            ("forward_reducers" variable nil (reparse-symbol function_parameters) [20139 20155])
                            ("backward_reducers" variable nil (reparse-symbol function_parameters) [20162 20179])
                            ("verbose" variable nil (reparse-symbol function_parameters) [20203 20210])
                            ("context_id" variable nil (reparse-symbol function_parameters) [20214 20224])
                            ("prewarm" variable nil (reparse-symbol function_parameters) [20231 20238])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20246 20254]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20038 24423])
                    ("terminate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24442 24446]))                          )
                        (reparse-symbol indented_block_body) [24428 25034]))                  
                :type "class")
                nil [16542 25034]))          
      :file "pool.py"
      :pointmax 25034
      :fsize 25033
      :lastmodtime '(22780 645 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "memory.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
A context object for caching a function's return value each time it
is called with the same input arguments.

\"\"\"" code nil nil [1 118])
            ("__future__" include nil nil [259 296])
            ("os" include nil nil [297 306])
            ("shutil" include nil nil [307 320])
            ("time" include nil nil [321 332])
            ("pydoc" include nil nil [333 345])
            ("re" include nil nil [346 355])
            ("sys" include nil nil [356 366])
            ("try" code nil nil [367 439])
            ("functools" include nil nil [439 455])
            ("traceback" include nil nil [456 472])
            ("warnings" include nil nil [473 488])
            ("inspect" include nil nil [489 503])
            ("json" include nil nil [504 515])
            ("weakref" include nil nil [516 530])
            ("io" include nil nil [531 540])
            ("hashing" include nil nil [565 579])
            ("filter_args" include nil nil [599 647])
            ("get_func_name" include nil nil [599 647])
            ("get_func_code" include nil nil [599 647])
            ("format_call" include nil nil [667 703])
            ("format_signature" include nil nil [667 703])
            ("open_py_source" include nil nil [726 747])
            ("pformat" include nil nil [761 796])
            ("format_time" include nil nil [761 796])
            ("Logger" include nil nil [761 796])
            ("numpy_pickle" include nil nil [804 823])
            ("rm_subdirs" include nil nil [835 860])
            ("mkdirp" include nil nil [835 860])
            ("PY3_OR_LATER" include nil nil [875 907])
            ("_basestring" include nil nil [875 907])
            ("FIRST_LINE_TEXT" variable nil nil [909 942])
            ("extract_first_line" function
               (:documentation " Extract the first line information from the function code
        text if available.
    "
                :arguments 
                  ( ("func_code" variable nil (reparse-symbol function_parameters) [1455 1464]))                  )
                nil [1432 1830])
            ("JobLibCollisionWarning" type
               (:documentation " Warn that there might be a collision between names of functions.
    "
                :superclasses ("UserWarning")
                :type "class")
                nil [1832 1956])
            ("_get_func_fullname" function
               (:documentation "Compute the part of part associated with a function.

    See code of_cache_key_to_dir() for details
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [1981 1985]))                  )
                nil [1958 2211])
            ("_cache_key_to_dir" function
               (:documentation "Compute directory associated with a given cache key.

    func can be a function or a string as returned by _get_func_fullname().
    "
                :arguments 
                  ( ("cachedir" variable nil (reparse-symbol function_parameters) [2235 2243])
                    ("func" variable nil (reparse-symbol function_parameters) [2245 2249])
                    ("argument_hash" variable nil (reparse-symbol function_parameters) [2251 2264]))                  )
                nil [2213 2660])
            ("_load_output" function
               (:documentation "Load output of a computation."
                :arguments 
                  ( ("output_dir" variable nil (reparse-symbol function_parameters) [2679 2689])
                    ("func_name" variable nil (reparse-symbol function_parameters) [2691 2700])
                    ("timestamp" variable nil (reparse-symbol function_parameters) [2702 2711])
                    ("metadata" variable nil (reparse-symbol function_parameters) [2718 2726])
                    ("mmap_mode" variable nil (reparse-symbol function_parameters) [2750 2759])
                    ("verbose" variable nil (reparse-symbol function_parameters) [2766 2773]))                  )
                nil [2662 3963])
            ("_FUNCTION_HASHES" variable nil nil [4090 4136])
            ("MemorizedResult" type
               (:documentation "Object representing a cached value.

    Attributes
    ----------
    cachedir: string
        path to root of joblib cache

    func: function or string
        function whose output is cached. The string case is intended only for
        instanciation based on the output of repr() on another instance.
        (namely eval(repr(memorized_instance)) works).

    argument_hash: string
        hash of the function arguments

    mmap_mode: {None, 'r+', 'r', 'w+', 'c'}
        The memmapping mode used when loading from cache numpy arrays. See
        numpy.load for the meaning of the different values.

    verbose: int
        verbosity level (0 means no message)

    timestamp, metadata: string
        for internal use only
    "
                :superclasses ("Logger")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Logger" code nil (reparse-symbol indented_block_body) [5242 5263])
                            ("if" code nil (reparse-symbol indented_block_body) [5272 5398])
                            ("self" variable nil (reparse-symbol indented_block_body) [5406 5440])
                            ("self" variable nil (reparse-symbol indented_block_body) [5449 5473])
                            ("self" variable nil (reparse-symbol indented_block_body) [5482 5508])
                            ("self" variable nil (reparse-symbol indented_block_body) [5518 5635])
                            ("if" code nil (reparse-symbol indented_block_body) [5645 6013])
                            ("self" variable nil (reparse-symbol indented_block_body) [6022 6073])
                            ("self" variable nil (reparse-symbol indented_block_body) [6082 6104])
                            ("self" variable nil (reparse-symbol indented_block_body) [6113 6139]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5121 5125])
                            ("cachedir" variable nil (reparse-symbol function_parameters) [5127 5135])
                            ("func" variable nil (reparse-symbol function_parameters) [5137 5141])
                            ("argument_hash" variable nil (reparse-symbol function_parameters) [5143 5156])
                            ("mmap_mode" variable nil (reparse-symbol function_parameters) [5175 5184])
                            ("verbose" variable nil (reparse-symbol function_parameters) [5191 5198])
                            ("timestamp" variable nil (reparse-symbol function_parameters) [5202 5211])
                            ("metadata" variable nil (reparse-symbol function_parameters) [5218 5226]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5108 6140])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6153 6157]))                          
                        :documentation "Read value from cache and return it.")
                        (reparse-symbol indented_block_body) [6145 6470])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6485 6489]))                          
                        :documentation "Clear value from cache")
                        (reparse-symbol indented_block_body) [6475 6589])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6607 6611]))                          )
                        (reparse-symbol indented_block_body) [6594 6955])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6975 6979]))                          )
                        (reparse-symbol indented_block_body) [6960 7109]))                  
                :type "class")
                nil [4325 7109])
            ("NotMemorizedResult" type
               (:documentation "Class representing an arbitrary value.

    This class is a replacement for MemorizedResult when there is no cache.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7280 7310])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7351 7369])
                            ("self" variable nil (reparse-symbol indented_block_body) [7378 7395]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7329 7333])
                            ("value" variable nil (reparse-symbol function_parameters) [7335 7340]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7316 7396])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7409 7413]))                          )
                        (reparse-symbol indented_block_body) [7401 7530])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7545 7549]))                          )
                        (reparse-symbol indented_block_body) [7535 7605])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7623 7627]))                          )
                        (reparse-symbol indented_block_body) [7610 7892])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7984 7988]))                          )
                        (reparse-symbol indented_block_body) [7967 8049])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8071 8075])
                            ("state" variable nil (reparse-symbol function_parameters) [8077 8082]))                          )
                        (reparse-symbol indented_block_body) [8054 8157]))                  
                :type "class")
                nil [7111 8157])
            ("NotMemorizedFunc" type
               (:documentation "No-op object decorating a function.

    This class replaces MemorizedFunc when there is no cache. It provides an
    identical API but does not write anything on disk.

    Attributes
    ----------
    func: callable
        Original undecorated function.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8737 8753]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8716 8720])
                            ("func" variable nil (reparse-symbol function_parameters) [8722 8726]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8703 8754])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8772 8776])
                            ("args" variable nil (reparse-symbol function_parameters) [8778 8783])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8785 8793]))                          )
                        (reparse-symbol indented_block_body) [8759 8838])
                    ("call_and_shelve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8863 8867])
                            ("args" variable nil (reparse-symbol function_parameters) [8869 8874])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8876 8884]))                          )
                        (reparse-symbol indented_block_body) [8843 8949])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8969 8973]))                          )
                        (reparse-symbol indented_block_body) [8954 9022])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9040 9044]))                          )
                        (reparse-symbol indented_block_body) [9027 9169])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9184 9188])
                            ("warn" variable nil (reparse-symbol function_parameters) [9190 9194]))                          )
                        (reparse-symbol indented_block_body) [9174 9287]))                  
                :type "class")
                nil [8346 9287])
            ("MemorizedFunc" type
               (:documentation " Callable object decorating a function for caching its return value
        each time it is called.

        All values are cached on the filesystem, in a deep directory
        structure. Methods are provided to inspect the cache or clean it.

        Attributes
        ----------
        func: callable
            The original, undecorated, function.

        cachedir: string
            Path to the base cache directory of the memory context.

        ignore: list or None
            List of variable names to ignore when choosing whether to
            recompute.

        mmap_mode: {None, 'r+', 'r', 'w+', 'c'}
            The memmapping mode used when loading from cache
            numpy arrays. See numpy.load for the meaning of the different
            values.

        compress: boolean, or integer
            Whether to zip the stored data on disk. If an integer is
            given, it should be between 1 and 9, and sets the amount
            of compression. Note that compressed arrays cannot be
            read by memmapping.

        verbose: int, optional
            The verbosity flag, controls messages that are issued as
            the function is evaluated.
    "
                :superclasses ("Logger")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
            Parameters
            ----------
            func: callable
                The function to decorate
            cachedir: string
                The path of the base directory to use as a data store
            ignore: list or None
                List of variable names to ignore.
            mmap_mode: {None, 'r+', 'r', 'w+', 'c'}, optional
                The memmapping mode used when loading from cache
                numpy arrays. See numpy.load for the meaning of the
                arguments.
            compress : boolean, or integer
                Whether to zip the stored data on disk. If an integer is
                given, it should be between 1 and 9, and sets the amount
                of compression. Note that compressed arrays cannot be
                read by memmapping.
            verbose: int, optional
                Verbosity flag, controls the debug messages that are issued
                as functions are evaluated. The higher, the more verbose
            timestamp: float, optional
                The reference time from which times in tracing messages
                are reported.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11027 12180])
                            ("Logger" code nil (reparse-symbol indented_block_body) [12189 12210])
                            ("self" variable nil (reparse-symbol indented_block_body) [12219 12245])
                            ("self" variable nil (reparse-symbol indented_block_body) [12254 12270])
                            ("if" code nil (reparse-symbol indented_block_body) [12279 12322])
                            ("self" variable nil (reparse-symbol indented_block_body) [12330 12350])
                            ("self" variable nil (reparse-symbol indented_block_body) [12360 12383])
                            ("self" variable nil (reparse-symbol indented_block_body) [12392 12416])
                            ("self" variable nil (reparse-symbol indented_block_body) [12425 12449])
                            ("if" code nil (reparse-symbol indented_block_body) [12458 12610])
                            ("if" code nil (reparse-symbol indented_block_body) [12618 12676])
                            ("self" variable nil (reparse-symbol indented_block_body) [12684 12710])
                            ("mkdirp" code nil (reparse-symbol indented_block_body) [12719 12740])
                            ("try" code nil (reparse-symbol indented_block_body) [12749 12870])
                            ("if" code nil (reparse-symbol indented_block_body) [12878 13248])
                            ("self" code nil (reparse-symbol indented_block_body) [13256 13301]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10907 10911])
                            ("func" variable nil (reparse-symbol function_parameters) [10913 10917])
                            ("cachedir" variable nil (reparse-symbol function_parameters) [10919 10927])
                            ("ignore" variable nil (reparse-symbol function_parameters) [10929 10935])
                            ("mmap_mode" variable nil (reparse-symbol function_parameters) [10942 10951])
                            ("compress" variable nil (reparse-symbol function_parameters) [10975 10983])
                            ("verbose" variable nil (reparse-symbol function_parameters) [10991 10998])
                            ("timestamp" variable nil (reparse-symbol function_parameters) [11002 11011]))                          
                        :documentation "
            Parameters
            ----------
            func: callable
                The function to decorate
            cachedir: string
                The path of the base directory to use as a data store
            ignore: list or None
                List of variable names to ignore.
            mmap_mode: {None, 'r+', 'r', 'w+', 'c'}, optional
                The memmapping mode used when loading from cache
                numpy arrays. See numpy.load for the meaning of the
                arguments.
            compress : boolean, or integer
                Whether to zip the stored data on disk. If an integer is
                given, it should be between 1 and 9, and sets the amount
                of compression. Note that compressed arrays cannot be
                read by memmapping.
            verbose: int, optional
                Verbosity flag, controls the debug messages that are issued
                as functions are evaluated. The higher, the more verbose
            timestamp: float, optional
                The reference time from which times in tracing messages
                are reported.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10894 13302])
                    ("_cached_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13324 13328])
                            ("args" variable nil (reparse-symbol function_parameters) [13330 13334])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13336 13342]))                          
                        :documentation "Call wrapped function and cache result, or read cache if available.

        This function returns the wrapped function output and some metadata.

        Returns
        -------
        output: value or tuple
            what is returned by wrapped function

        argument_hash: string
            hash of function arguments

        metadata: dict
            some metadata about wrapped function call (see _persist_input())
        ")
                        (reparse-symbol indented_block_body) [13307 15994])
                    ("call_and_shelve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16019 16023])
                            ("args" variable nil (reparse-symbol function_parameters) [16025 16030])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16032 16040]))                          
                        :documentation "Call wrapped function, cache result and return a reference.

        This method returns a reference to the cached result instead of the
        result itself. The reference object is small and pickeable, allowing
        to send or store it easily. Call .get() on reference object to get
        result.

        Returns
        -------
        cached_result: MemorizedResult or NotMemorizedResult
            reference to the value returned by the wrapped function. The
            class \"NotMemorizedResult\" is used when there is no cache
            activated (e.g. cachedir=None in Memory).
        ")
                        (reparse-symbol indented_block_body) [15999 16900])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16918 16922])
                            ("args" variable nil (reparse-symbol function_parameters) [16924 16929])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16931 16939]))                          )
                        (reparse-symbol indented_block_body) [16905 16992])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17012 17016]))                          
                        :documentation " We don't store the timestamp when pickling, to avoid the hash
            depending from it.
            In addition, when unpickling, we run the __init__
        ")
                        (reparse-symbol indented_block_body) [16997 17333])
                    ("format_signature" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17359 17363])
                            ("args" variable nil (reparse-symbol function_parameters) [17365 17370])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17372 17380]))                          )
                        (reparse-symbol indented_block_body) [17338 17591])
                    ("format_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17612 17616])
                            ("args" variable nil (reparse-symbol function_parameters) [17618 17623])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17625 17633]))                          )
                        (reparse-symbol indented_block_body) [17596 17831])
                    ("_get_argument_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18042 18046])
                            ("args" variable nil (reparse-symbol function_parameters) [18048 18053])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18055 18063]))                          )
                        (reparse-symbol indented_block_body) [18019 18257])
                    ("_get_output_dir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18282 18286])
                            ("args" variable nil (reparse-symbol function_parameters) [18288 18293])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18295 18303]))                          
                        :documentation " Return the directory in which are persisted the result
            of the function called with the given arguments.
        ")
                        (reparse-symbol indented_block_body) [18262 18666])
                    ("get_output_dir" variable nil (reparse-symbol indented_block_body) [18671 18703])
                    ("_get_func_dir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18753 18757])
                            ("mkdir" variable nil (reparse-symbol function_parameters) [18759 18764]))                          
                        :documentation " Get the directory corresponding to the cache for the
            function.
        ")
                        (reparse-symbol indented_block_body) [18735 19011])
                    ("_hash_func" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19031 19035]))                          
                        :documentation "Hash a function to key the online cache")
                        (reparse-symbol indented_block_body) [19016 19216])
                    ("_write_func_code" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19242 19246])
                            ("filename" variable nil (reparse-symbol function_parameters) [19248 19256])
                            ("func_code" variable nil (reparse-symbol function_parameters) [19258 19267])
                            ("first_line" variable nil (reparse-symbol function_parameters) [19269 19279]))                          
                        :documentation " Write the function code and the filename to a file.
        ")
                        (reparse-symbol indented_block_body) [19221 20605])
                    ("_check_previous_func_code" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20640 20644])
                            ("stacklevel" variable nil (reparse-symbol function_parameters) [20646 20656]))                          
                        :documentation "
            stacklevel is the depth a which this function is called, to
            issue useful warnings to the user.
        ")
                        (reparse-symbol indented_block_body) [20610 24921])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24936 24940])
                            ("warn" variable nil (reparse-symbol function_parameters) [24942 24946]))                          
                        :documentation " Empty the function's cache.
        ")
                        (reparse-symbol indented_block_body) [24926 25461])
                    ("call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25475 25479])
                            ("args" variable nil (reparse-symbol function_parameters) [25481 25486])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25488 25496]))                          
                        :documentation " Force the execution of the function with the given arguments and
            persist the output values.
        ")
                        (reparse-symbol indented_block_body) [25466 26245])
                    ("_persist_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26288 26292])
                            ("output" variable nil (reparse-symbol function_parameters) [26294 26300])
                            ("dir" variable nil (reparse-symbol function_parameters) [26302 26305]))                          
                        :documentation " Persist the given output tuple in the directory.
        ")
                        (reparse-symbol indented_block_body) [26268 26716])
                    ("_persist_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26740 26744])
                            ("output_dir" variable nil (reparse-symbol function_parameters) [26746 26756])
                            ("duration" variable nil (reparse-symbol function_parameters) [26758 26766])
                            ("args" variable nil (reparse-symbol function_parameters) [26768 26772])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26774 26780])
                            ("this_duration_limit" variable nil (reparse-symbol function_parameters) [26805 26824]))                          
                        :documentation " Save a small summary of the call using json format in the
            output directory.

            output_dir: string
                directory where to write metadata.

            duration: float
                time taken by hashing input arguments, calling the wrapped
                function and persisting its output.

            args, kwargs: list and dict
                input arguments for wrapped function

            this_duration_limit: float
                Max execution time for this function before issuing a warning.
        ")
                        (reparse-symbol indented_block_body) [26721 29309])
                    ("load_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29330 29334])
                            ("output_dir" variable nil (reparse-symbol function_parameters) [29336 29346]))                          
                        :documentation " Read the results of a previous calculation from the directory
            it was cached in.
        ")
                        (reparse-symbol indented_block_body) [29314 29958])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30229 30233]))                          )
                        (reparse-symbol indented_block_body) [30216 30421]))                  
                :type "class")
                nil [9473 30421])
            ("Memory" type
               (:documentation " A context object for caching a function's return value each time it
        is called with the same input arguments.

        All values are cached on the filesystem, in a deep directory
        structure.

        see :ref:`memory_reference`
    "
                :superclasses ("Logger")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
            Parameters
            ----------
            cachedir: string or None
                The path of the base directory to use as a data store
                or None. If None is given, no caching is done and
                the Memory object is completely transparent.
            mmap_mode: {None, 'r+', 'r', 'w+', 'c'}, optional
                The memmapping mode used when loading from cache
                numpy arrays. See numpy.load for the meaning of the
                arguments.
            compress: boolean, or integer
                Whether to zip the stored data on disk. If an integer is
                given, it should be between 1 and 9, and sets the amount
                of compression. Note that compressed arrays cannot be
                read by memmapping.
            verbose: int, optional
                Verbosity flag, controls the debug messages that are issued
                as functions are evaluated.
        \"\"\"" code nil (reparse-symbol indented_block_body) [31148 32114])
                            ("Logger" code nil (reparse-symbol indented_block_body) [32184 32205])
                            ("self" variable nil (reparse-symbol indented_block_body) [32214 32237])
                            ("self" variable nil (reparse-symbol indented_block_body) [32246 32272])
                            ("self" variable nil (reparse-symbol indented_block_body) [32281 32309])
                            ("self" variable nil (reparse-symbol indented_block_body) [32318 32342])
                            ("if" code nil (reparse-symbol indented_block_body) [32351 32498])
                            ("if" code nil (reparse-symbol indented_block_body) [32506 32669]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31080 31084])
                            ("cachedir" variable nil (reparse-symbol function_parameters) [31086 31094])
                            ("mmap_mode" variable nil (reparse-symbol function_parameters) [31096 31105])
                            ("compress" variable nil (reparse-symbol function_parameters) [31112 31120])
                            ("verbose" variable nil (reparse-symbol function_parameters) [31128 31135]))                          
                        :documentation "
            Parameters
            ----------
            cachedir: string or None
                The path of the base directory to use as a data store
                or None. If None is given, no caching is done and
                the Memory object is completely transparent.
            mmap_mode: {None, 'r+', 'r', 'w+', 'c'}, optional
                The memmapping mode used when loading from cache
                numpy arrays. See numpy.load for the meaning of the
                arguments.
            compress: boolean, or integer
                Whether to zip the stored data on disk. If an integer is
                given, it should be between 1 and 9, and sets the amount
                of compression. Note that compressed arrays cannot be
                read by memmapping.
            verbose: int, optional
                Verbosity flag, controls the debug messages that are issued
                as functions are evaluated.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31067 32669])
                    ("cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32684 32688])
                            ("func" variable nil (reparse-symbol function_parameters) [32690 32694])
                            ("ignore" variable nil (reparse-symbol function_parameters) [32701 32707])
                            ("verbose" variable nil (reparse-symbol function_parameters) [32714 32721])
                            ("mmap_mode" variable nil (reparse-symbol function_parameters) [32752 32761]))                          
                        :documentation " Decorates the given function func to only compute its return
            value for input arguments not cached on disk.

            Parameters
            ----------
            func: callable, optional
                The function to be decorated
            ignore: list of strings
                A list of arguments name to ignore in the hashing
            verbose: integer, optional
                The verbosity mode of the function. By default that
                of the memory object is used.
            mmap_mode: {None, 'r+', 'r', 'w+', 'c'}, optional
                The memmapping mode used when loading from cache
                numpy arrays. See numpy.load for the meaning of the
                arguments. By default that of the memory object is used.

            Returns
            -------
            decorated_func: MemorizedFunc object
                The returned object is a MemorizedFunc object, that is
                callable (behaves like a function), but offers extra
                methods for cache lookup and management. See the
                documentation for :class:`joblib.memory.MemorizedFunc`.
        ")
                        (reparse-symbol indented_block_body) [32674 34825])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34840 34844])
                            ("warn" variable nil (reparse-symbol function_parameters) [34846 34850]))                          
                        :documentation " Erase the complete cache directory.
        ")
                        (reparse-symbol indented_block_body) [34830 35066])
                    ("eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35080 35084])
                            ("func" variable nil (reparse-symbol function_parameters) [35086 35090])
                            ("args" variable nil (reparse-symbol function_parameters) [35092 35097])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35099 35107]))                          
                        :documentation " Eval function func with arguments `*args` and `**kwargs`,
            in the context of the memory.

            This method works similarly to the builtin `apply`, except
            that the function is called only if the cache is not
            up to date.

        ")
                        (reparse-symbol indented_block_body) [35071 35520])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35730 35734]))                          )
                        (reparse-symbol indented_block_body) [35717 35882])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35902 35906]))                          
                        :documentation " We don't store the timestamp when pickling, to avoid the hash
            depending from it.
            In addition, when unpickling, we run the __init__
        ")
                        (reparse-symbol indented_block_body) [35887 36333]))                  
                :type "class")
                nil [30600 36333]))          
      :file "memory.py"
      :pointmax 36333
      :fsize 36332
      :lastmodtime '(22533 61332 0 0)
      :unmatched-syntax '((NAME 36158 . 36166) (IF 36188 . 36190) (ELSE 36217 . 36221) (FROM 861 . 865) (PERIOD 866 . 867) (FROM 824 . 828) (PERIOD 829 . 830) (FROM 797 . 801) (PERIOD 802 . 803) (FROM 748 . 752) (PERIOD 753 . 754) (FROM 704 . 708) (PERIOD 709 . 710) (FROM 648 . 652) (PERIOD 653 . 654) (FROM 580 . 584) (PERIOD 585 . 586) (FROM 558 . 562) (PERIOD 563 . 564)))
    (semanticdb-table "hashing.py"
      :file "hashing.py"
      :fsize 10120
      :lastmodtime '(22533 61332 0 0))
    (semanticdb-table "Logger.py"
      :file "Logger.py"
      :fsize 5135
      :lastmodtime '(22487 57777 0 0))
    (semanticdb-table "numpy_pickle.py"
      :file "numpy_pickle.py"
      :fsize 23222
      :lastmodtime '(22533 61332 0 0)))
  :file "!Users!xiaoli!anaconda!envs!rlfps3!lib!python3.5!site-packages!joblib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
