;; Object applications/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "applications/"
  :tables
  (list
    (semanticdb-table "vgg16.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"VGG16 model for Keras.

# Reference

- [Very Deep Convolutional Networks for Large-Scale Image Recognition](https://arxiv.org/abs/1409.1556)

\"\"\"" code nil nil [25 173])
            ("__future__" include nil nil [174 211])
            ("__future__" include nil nil [212 250])
            ("warnings" include nil nil [252 267])
            ("Model" include nil nil [283 295])
            ("Flatten" include nil nil [310 324])
            ("Dense" include nil nil [339 351])
            ("Input" include nil nil [366 378])
            ("Conv2D" include nil nil [393 406])
            ("MaxPooling2D" include nil nil [421 440])
            ("GlobalAveragePooling2D" include nil nil [455 484])
            ("GlobalMaxPooling2D" include nil nil [499 524])
            ("get_source_inputs" include nil nil [548 572])
            ("layer_utils" include nil nil [586 604])
            ("get_file" include nil nil [629 644])
            ("backend" include nil nil [653 672])
            ("decode_predictions" include nil nil [694 719])
            ("preprocess_input" include nil nil [741 764])
            ("_obtain_input_shape" include nil nil [786 812])
            ("WEIGHTS_PATH" variable nil nil [815 947])
            ("WEIGHTS_PATH_NO_TOP" variable nil nil [948 1093])
            ("VGG16" function
               (:documentation "Instantiates the VGG16 architecture.

    Optionally loads weights pre-trained
    on ImageNet. Note that when using TensorFlow,
    for best performance you should set
    `image_data_format=\"channels_last\"` in your Keras config
    at ~/.keras/keras.json.

    The model and the weights are compatible with both
    TensorFlow and Theano. The data format
    convention used by the model is the one
    specified in your Keras config file.

    # Arguments
        include_top: whether to include the 3 fully-connected
            layers at the top of the network.
        weights: one of `None` (random initialization)
            or \"imagenet\" (pre-training on ImageNet).
        input_tensor: optional Keras tensor (i.e. output of `layers.Input()`)
            to use as image input for the model.
        input_shape: optional shape tuple, only to be specified
            if `include_top` is False (otherwise the input shape
            has to be `(224, 224, 3)` (with `channels_last` data format)
            or `(3, 224, 244)` (with `channels_first` data format).
            It should have exactly 3 inputs channels,
            and width and height should be no smaller than 48.
            E.g. `(200, 200, 3)` would be one valid value.
        pooling: Optional pooling mode for feature extraction
            when `include_top` is `False`.
            - `None` means that the output of the model will be
                the 4D tensor output of the
                last convolutional layer.
            - `avg` means that global average pooling
                will be applied to the output of the
                last convolutional layer, and thus
                the output of the model will be a 2D tensor.
            - `max` means that global max pooling will
                be applied.
        classes: optional number of classes to classify images
            into, only to be specified if `include_top` is True, and
            if no `weights` argument is specified.

    # Returns
        A Keras model instance.

    # Raises
        ValueError: in case of invalid argument for `weights`,
            or invalid input shape.
    "
                :arguments 
                  ( ("include_top" variable nil (reparse-symbol function_parameters) [1106 1117])
                    ("weights" variable nil (reparse-symbol function_parameters) [1124 1131])
                    ("input_tensor" variable nil (reparse-symbol function_parameters) [1154 1166])
                    ("input_shape" variable nil (reparse-symbol function_parameters) [1173 1184])
                    ("pooling" variable nil (reparse-symbol function_parameters) [1201 1208])
                    ("classes" variable nil (reparse-symbol function_parameters) [1225 1232]))                  )
                nil [1096 8230]))          
      :file "vgg16.py"
      :pointmax 8230
      :fsize 8229
      :lastmodtime '(22729 42986 0 0)
      :unmatched-syntax '((FROM 765 . 769) (PERIOD 770 . 771) (FROM 720 . 724) (PERIOD 725 . 726) (FROM 673 . 677) (PERIOD 678 . 679) (PERIOD 651 . 652) (FROM 645 . 649) (PERIOD 650 . 651) (PERIOD 611 . 612) (FROM 605 . 609) (PERIOD 610 . 611) (PERIOD 579 . 580) (FROM 573 . 577) (PERIOD 578 . 579) (PERIOD 531 . 532) (FROM 525 . 529) (PERIOD 530 . 531) (PERIOD 491 . 492) (FROM 485 . 489) (PERIOD 490 . 491) (PERIOD 447 . 448) (FROM 441 . 445) (PERIOD 446 . 447) (PERIOD 413 . 414) (FROM 407 . 411) (PERIOD 412 . 413) (PERIOD 385 . 386) (FROM 379 . 383) (PERIOD 384 . 385) (PERIOD 358 . 359) (FROM 352 . 356) (PERIOD 357 . 358) (PERIOD 331 . 332) (FROM 325 . 329) (PERIOD 330 . 331) (PERIOD 302 . 303) (FROM 296 . 300) (PERIOD 301 . 302) (PERIOD 275 . 276) (FROM 269 . 273) (PERIOD 274 . 275)))
    (semanticdb-table "imagenet_utils.py"
      :major-mode 'python-mode
      :tags 
        '( ("json" include nil nil [1 12])
            ("get_file" include nil nil [38 53])
            ("backend" include nil nil [62 81])
            ("CLASS_INDEX" variable nil nil [83 101])
            ("CLASS_INDEX_PATH" variable nil nil [102 207])
            ("preprocess_input" function
               (:documentation "Preprocesses a tensor encoding a batch of images.

    # Arguments
        x: input Numpy tensor, 4D.
        data_format: data format of the image tensor.

    # Returns
        Preprocessed tensor.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [231 232])
                    ("data_format" variable nil (reparse-symbol function_parameters) [234 245]))                  )
                nil [210 1038])
            ("decode_predictions" function
               (:documentation "Decodes the prediction of an ImageNet model.

    # Arguments
        preds: Numpy tensor encoding a batch of predictions.
        top: integer, how many top-guesses to return.

    # Returns
        A list of lists of top class prediction tuples
        `(class_name, class_description, score)`.
        One list of tuples per sample in batch input.

    # Raises
        ValueError: in case of invalid shape of the `pred` array
            (must be 2D).
    "
                :arguments 
                  ( ("preds" variable nil (reparse-symbol function_parameters) [1063 1068])
                    ("top" variable nil (reparse-symbol function_parameters) [1070 1073]))                  )
                nil [1040 2372])
            ("_obtain_input_shape" function
               (:documentation "Internal utility to compute/validate an ImageNet model's input shape.

    # Arguments
        input_shape: either None (will return the default network input shape),
            or a user-provided shape to be validated.
        default_size: default input width/height for the model.
        min_size: minimum input width/height accepted by the model.
        data_format: image data format to use.
        include_top: whether the model is expected to
            be linked to a classifier via a Flatten layer.

    # Returns
        An integer shape tuple (may include None entries).

    # Raises
        ValueError: in case of invalid argument values.
    "
                :arguments 
                  ( ("input_shape" variable nil (reparse-symbol function_parameters) [2398 2409])
                    ("default_size" variable nil (reparse-symbol function_parameters) [2435 2447])
                    ("min_size" variable nil (reparse-symbol function_parameters) [2473 2481])
                    ("data_format" variable nil (reparse-symbol function_parameters) [2507 2518])
                    ("include_top" variable nil (reparse-symbol function_parameters) [2544 2555]))                  )
                nil [2374 5427]))          
      :file "imagenet_utils.py"
      :pointmax 5427
      :fsize 5426
      :lastmodtime '(22729 42986 0 0)
      :unmatched-syntax '((PERIOD 60 . 61) (FROM 54 . 58) (PERIOD 59 . 60) (PERIOD 20 . 21) (FROM 14 . 18) (PERIOD 19 . 20))))
  :file "!Users!xiaoli!anaconda!envs!rlfps3!lib!python3.5!site-packages!keras!applications!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
