;; Object core/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "core/"
  :tables
  (list
    (semanticdb-table "lasagne_powered.py"
      :major-mode 'python-mode
      :tags 
        '( ("rllab.core.parameterized" include nil nil [1 51])
            ("rllab.misc.overrides" include nil nil [52 94])
            ("lasagne.layers" include nil nil [95 121])
            ("LasagnePowered" type
               (:superclasses ("Parameterized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [209 244])
                            ("super" code nil (reparse-symbol indented_block_body) [253 291]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [179 183])
                            ("output_layers" variable nil (reparse-symbol function_parameters) [185 198]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [166 292])
                    ("output_layers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [329 333]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [297 371])
                    ("get_params_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [415 419])
                            ("tags" variable nil (reparse-symbol function_parameters) [421 427]))                          
                        :decorators 
                          ( ("overrides" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [376 559]))                  
                :type "class")
                nil [124 559]))          
      :file "lasagne_powered.py"
      :pointmax 559
      :fsize 654
      :lastmodtime '(22749 16759 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "parameterized.py"
      :major-mode 'python-mode
      :tags 
        '( ("contextlib" include nil nil [1 38])
            ("rllab.core.serializable" include nil nil [40 88])
            ("rllab.misc.tensor_utils" include nil nil [89 159])
            ("load_params" variable nil nil [161 179])
            ("suppress_params_loading" function (:decorators 
              ( ("contextmanager" function (:type "decorator") nil nil))              ) nil [181 308])
            ("Parameterized" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [371 395])
                            ("self" variable nil (reparse-symbol indented_block_body) [404 434])
                            ("self" variable nil (reparse-symbol indented_block_body) [443 473]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [356 360]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [343 474])
                    ("get_params_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [503 507])
                            ("tags" variable nil (reparse-symbol function_parameters) [509 515]))                          
                        :documentation "
        Internal method to be implemented which does not perform caching
        ")
                        (reparse-symbol indented_block_body) [479 649])
                    ("get_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [669 673])
                            ("tags" variable nil (reparse-symbol function_parameters) [675 681]))                          
                        :documentation "
        Get the list of parameters, filtered by the provided tags.
        Some common tags include 'regularizable' and 'trainable'
        ")
                        (reparse-symbol indented_block_body) [654 1081])
                    ("get_param_dtypes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1107 1111])
                            ("tags" variable nil (reparse-symbol function_parameters) [1113 1119]))                          )
                        (reparse-symbol indented_block_body) [1086 1457])
                    ("get_param_shapes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1483 1487])
                            ("tags" variable nil (reparse-symbol function_parameters) [1489 1495]))                          )
                        (reparse-symbol indented_block_body) [1462 1833])
                    ("get_param_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1859 1863])
                            ("tags" variable nil (reparse-symbol function_parameters) [1865 1871]))                          )
                        (reparse-symbol indented_block_body) [1838 2009])
                    ("set_param_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2035 2039])
                            ("flattened_params" variable nil (reparse-symbol function_parameters) [2041 2057])
                            ("tags" variable nil (reparse-symbol function_parameters) [2059 2065]))                          )
                        (reparse-symbol indented_block_body) [2014 2499])
                    ("flat_to_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2523 2527])
                            ("flattened_params" variable nil (reparse-symbol function_parameters) [2529 2545])
                            ("tags" variable nil (reparse-symbol function_parameters) [2547 2553]))                          )
                        (reparse-symbol indented_block_body) [2504 2638])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2660 2664]))                          )
                        (reparse-symbol indented_block_body) [2643 2774])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2796 2800])
                            ("d" variable nil (reparse-symbol function_parameters) [2802 2803]))                          )
                        (reparse-symbol indented_block_body) [2779 2947]))                  
                :type "class")
                nil [309 2947]))          
      :file "parameterized.py"
      :pointmax 2948
      :fsize 3036
      :lastmodtime '(22749 16759 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "serializable.py"
      :major-mode 'python-mode
      :tags 
        '( ("inspect" include nil nil [1 15])
            ("Serializable" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [96 114])
                            ("self" variable nil (reparse-symbol indented_block_body) [123 145]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64 68])
                            ("args" variable nil (reparse-symbol function_parameters) [70 75])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [77 85]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51 146])
                    ("quick_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166 170])
                            ("locals_" variable nil (reparse-symbol function_parameters) [172 179]))                          )
                        (reparse-symbol indented_block_body) [151 787])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [809 813]))                          )
                        (reparse-symbol indented_block_body) [792 882])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [904 908])
                            ("d" variable nil (reparse-symbol function_parameters) [910 911]))                          )
                        (reparse-symbol indented_block_body) [887 1013]))                  
                :type "class")
                nil [18 1013]))          
      :file "serializable.py"
      :pointmax 1013
      :fsize 1836
      :lastmodtime '(22749 16759 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags nil
      :file "__init__.py"
      :pointmax 1
      :fsize 0
      :lastmodtime '(22749 16759 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "lasagne_helpers.py"
      :major-mode 'python-mode
      :tags 
        '( ("lasagne.layers" include nil nil [1 42])
            ("lasagne" include nil nil [43 68])
            ("get_full_output" function
               (:documentation "
    Computes the output of the network at one or more given layers.
    Optionally, you can define the input(s) to propagate through the network
    instead of using the input variable(s) associated with the network's
    input layer(s).

    Parameters
    ----------
    layer_or_layers : Layer or list
        the :class:`Layer` instance for which to compute the output
        expressions, or a list of :class:`Layer` instances.

    inputs : None, Theano expression, numpy array, or dict
        If None, uses the input variables associated with the
        :class:`InputLayer` instances.
        If a Theano expression, this defines the input for a single
        :class:`InputLayer` instance. Will throw a ValueError if there
        are multiple :class:`InputLayer` instances.
        If a numpy array, this will be wrapped as a Theano constant
        and used just like a Theano expression.
        If a dictionary, any :class:`Layer` instance (including the
        input layers) can be mapped to a Theano expression or numpy
        array to use instead of its regular output.

    Returns
    -------
    output : Theano expression or list
        the output of the given layer(s) for the given network input

    Notes
    -----
    Depending on your network architecture, `get_output([l1, l2])` may
    be crucially different from `[get_output(l1), get_output(l2)]`. Only
    the former ensures that the output expressions depend on the same
    intermediate expressions. For example, when `l1` and `l2` depend on
    a common dropout layer, the former will use the same dropout mask for
    both, while the latter will use two different dropout masks.
    "
                :arguments 
                  ( ("layer_or_layers" variable nil (reparse-symbol function_parameters) [91 106])
                    ("inputs" variable nil (reparse-symbol function_parameters) [108 114])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [121 129]))                  )
                nil [71 4585])
            ("get_output" function (:arguments 
              ( ("layer_or_layers" variable nil (reparse-symbol function_parameters) [4602 4617])
                ("inputs" variable nil (reparse-symbol function_parameters) [4619 4625])
                ("kwargs" variable nil (reparse-symbol function_parameters) [4632 4640]))              ) nil [4587 4708]))          
      :file "lasagne_helpers.py"
      :pointmax 4708
      :fsize 4719
      :lastmodtime '(22749 16759 0 0)
      :unmatched-syntax '((NAME 1993 . 2007) (IF 2024 . 2026) (ELSE 2052 . 2056)))
    (semanticdb-table "lasagne_layers.py"
      :major-mode 'python-mode
      :tags 
        '( ("lasagne.layers" include nil nil [20 46])
            ("lasagne" include nil nil [47 61])
            ("theano" include nil nil [62 75])
            ("theano.tensor" include nil nil [76 102])
            ("ParamLayer" type
               (:superclasses ("L.Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [262 314])
                            ("self" variable nil (reparse-symbol indented_block_body) [323 349])
                            ("self" variable nil (reparse-symbol indented_block_body) [358 499]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150 154])
                            ("incoming" variable nil (reparse-symbol function_parameters) [156 164])
                            ("num_units" variable nil (reparse-symbol function_parameters) [166 175])
                            ("param" variable nil (reparse-symbol function_parameters) [177 182])
                            ("trainable" variable nil (reparse-symbol function_parameters) [227 236])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [243 251]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [137 500])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [530 534])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [536 547]))                          )
                        (reparse-symbol indented_block_body) [505 602])
                    ("get_output_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [626 630])
                            ("input" variable nil (reparse-symbol function_parameters) [632 637])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [639 647]))                          )
                        (reparse-symbol indented_block_body) [607 904]))                  
                :type "class")
                nil [105 904])
            ("OpLayer" type
               (:superclasses ("L.MergeLayer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1043 1086])
                            ("incomings" code nil (reparse-symbol indented_block_body) [1094 1125])
                            ("super" code nil (reparse-symbol indented_block_body) [1134 1184])
                            ("self" variable nil (reparse-symbol indented_block_body) [1193 1205])
                            ("self" variable nil (reparse-symbol indented_block_body) [1214 1238])
                            ("self" variable nil (reparse-symbol indented_block_body) [1247 1273]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [952 956])
                            ("incoming" variable nil (reparse-symbol function_parameters) [958 966])
                            ("op" variable nil (reparse-symbol function_parameters) [968 970])
                            ("shape_op" variable nil (reparse-symbol function_parameters) [989 997])
                            ("extras" variable nil (reparse-symbol function_parameters) [1011 1017])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1024 1032]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [939 1274])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1304 1308])
                            ("input_shapes" variable nil (reparse-symbol function_parameters) [1310 1322]))                          )
                        (reparse-symbol indented_block_body) [1279 1369])
                    ("get_output_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1393 1397])
                            ("inputs" variable nil (reparse-symbol function_parameters) [1399 1405])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1407 1415]))                          )
                        (reparse-symbol indented_block_body) [1374 1450]))                  
                :type "class")
                nil [906 1450])
            ("BatchNormLayer" type
               (:documentation "
    lasagne.layers.BatchNormLayer(incoming, axes='auto', epsilon=1e-4,
    alpha=0.1, mode='low_mem',
    beta=lasagne.init.Constant(0), gamma=lasagne.init.Constant(1),
    mean=lasagne.init.Constant(0), std=lasagne.init.Constant(1), **kwargs)

    Batch Normalization

    This layer implements batch normalization of its inputs, following [1]_:

    .. math::
        y = \\\\frac{x - \\\\mu}{\\\\sqrt{\\\\sigma^2 + \\\\epsilon}} \\\\gamma + \\\\beta

    That is, the input is normalized to zero mean and unit variance, and then
    linearly transformed. The crucial part is that the mean and variance are
    computed across the batch dimension, i.e., over examples, not per example.

    During training, :math:`\\\\mu` and :math:`\\\\sigma^2` are defined to be the
    mean and variance of the current input mini-batch :math:`x`, and during
    testing, they are replaced with average statistics over the training
    data. Consequently, this layer has four stored parameters: :math:`\\\\beta`,
    :math:`\\\\gamma`, and the averages :math:`\\\\mu` and :math:`\\\\sigma^2`
    (nota bene: instead of :math:`\\\\sigma^2`, the layer actually stores
    :math:`1 / \\\\sqrt{\\\\sigma^2 + \\\\epsilon}`, for compatibility to cuDNN).
    By default, this layer learns the average statistics as exponential moving
    averages computed during training, so it can be plugged into an existing
    network without any changes of the training procedure (see Notes).

    Parameters
    ----------
    incoming : a :class:`Layer` instance or a tuple
        The layer feeding into this layer, or the expected input shape
    axes : 'auto', int or tuple of int
        The axis or axes to normalize over. If ``'auto'`` (the default),
        normalize over all axes except for the second: this will normalize over
        the minibatch dimension for dense layers, and additionally over all
        spatial dimensions for convolutional layers.
    epsilon : scalar
        Small constant :math:`\\\\epsilon` added to the variance before taking
        the square root and dividing by it, to avoid numerical problems
    alpha : scalar
        Coefficient for the exponential moving average of batch-wise means and
        standard deviations computed during training; the closer to one, the
        more it will depend on the last batches seen
    beta : Theano shared variable, expression, numpy array, callable or None
        Initial value, expression or initializer for :math:`\\\\beta`. Must match
        the incoming shape, skipping all axes in `axes`. Set to ``None`` to fix
        it to 0.0 instead of learning it.
        See :func:`lasagne.utils.create_param` for more information.
    gamma : Theano shared variable, expression, numpy array, callable or None
        Initial value, expression or initializer for :math:`\\\\gamma`. Must
        match the incoming shape, skipping all axes in `axes`. Set to ``None``
        to fix it to 1.0 instead of learning it.
        See :func:`lasagne.utils.create_param` for more information.
    mean : Theano shared variable, expression, numpy array, or callable
        Initial value, expression or initializer for :math:`\\\\mu`. Must match
        the incoming shape, skipping all axes in `axes`.
        See :func:`lasagne.utils.create_param` for more information.
    std : Theano shared variable, expression, numpy array, or callable
        Initial value, expression or initializer for :math:`1 / \\\\sqrt{
        \\\\sigma^2 + \\\\epsilon}`. Must match the incoming shape, skipping all
        axes in `axes`.
        See :func:`lasagne.utils.create_param` for more information.
    **kwargs
        Any additional keyword arguments are passed to the :class:`Layer`
        superclass.

    Notes
    -----
    This layer should be inserted between a linear transformation (such as a
    :class:`DenseLayer`, or :class:`Conv2DLayer`) and its nonlinearity. The
    convenience function :func:`batch_norm` modifies an existing layer to
    insert batch normalization in front of its nonlinearity.

    The behavior can be controlled by passing keyword arguments to
    :func:`lasagne.layers.get_output()` when building the output expression
    of any network containing this layer.

    During training, [1]_ normalize each input mini-batch by its statistics
    and update an exponential moving average of the statistics to be used for
    validation. This can be achieved by passing ``deterministic=False``.
    For validation, [1]_ normalize each input mini-batch by the stored
    statistics. This can be achieved by passing ``deterministic=True``.

    For more fine-grained control, ``batch_norm_update_averages`` can be passed
    to update the exponential moving averages (``True``) or not (``False``),
    and ``batch_norm_use_averages`` can be passed to use the exponential moving
    averages for normalization (``True``) or normalize each mini-batch by its
    own statistics (``False``). These settings override ``deterministic``.

    Note that for testing a model after training, [1]_ replace the stored
    exponential moving average statistics by fixing all network weights and
    re-computing average statistics over the training data in a layerwise
    fashion. This is not part of the layer implementation.

    In case you set `axes` to not include the batch dimension (the first axis,
    usually), normalization is done per example, not across examples. This does
    not require any averages, so you can pass ``batch_norm_update_averages``
    and ``batch_norm_use_averages`` as ``False`` in this case.

    See also
    --------
    batch_norm : Convenience function to apply batch normalization to a layer

    References
    ----------
    .. [1] Ioffe, Sergey and Szegedy, Christian (2015):
           Batch Normalization: Accelerating Deep Network Training by Reducing
           Internal Covariate Shift. http://arxiv.org/abs/1502.03167.
    "
                :superclasses ("L.Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [7641 7697])
                            ("if" code nil (reparse-symbol indented_block_body) [7707 7916])
                            ("self" variable nil (reparse-symbol indented_block_body) [7924 7940])
                            ("self" variable nil (reparse-symbol indented_block_body) [7950 7972])
                            ("self" variable nil (reparse-symbol indented_block_body) [7981 7999])
                            ("self" variable nil (reparse-symbol indented_block_body) [8008 8024])
                            ("shape" variable nil (reparse-symbol indented_block_body) [8095 8197])
                            ("if" code nil (reparse-symbol indented_block_body) [8206 8387])
                            ("if" code nil (reparse-symbol indented_block_body) [8395 8591])
                            ("if" code nil (reparse-symbol indented_block_body) [8599 8801])
                            ("self" variable nil (reparse-symbol indented_block_body) [8809 8929])
                            ("self" variable nil (reparse-symbol indented_block_body) [8938 9058]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7394 7398])
                            ("incoming" variable nil (reparse-symbol function_parameters) [7400 7408])
                            ("axes" variable nil (reparse-symbol function_parameters) [7410 7414])
                            ("epsilon" variable nil (reparse-symbol function_parameters) [7423 7430])
                            ("alpha" variable nil (reparse-symbol function_parameters) [7437 7442])
                            ("mode" variable nil (reparse-symbol function_parameters) [7465 7469])
                            ("beta" variable nil (reparse-symbol function_parameters) [7481 7485])
                            ("gamma" variable nil (reparse-symbol function_parameters) [7512 7517])
                            ("mean" variable nil (reparse-symbol function_parameters) [7561 7565])
                            ("std" variable nil (reparse-symbol function_parameters) [7592 7595])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7622 7630]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7381 9059])
                    ("get_output_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9083 9087])
                            ("input" variable nil (reparse-symbol function_parameters) [9089 9094])
                            ("deterministic" variable nil (reparse-symbol function_parameters) [9096 9109])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9117 9125]))                          )
                        (reparse-symbol indented_block_body) [9064 11413]))                  
                :type "class")
                nil [1452 11413])
            ("batch_norm" function
               (:documentation "
    Apply batch normalization to an existing layer. This is a convenience
    function modifying an existing layer to include batch normalization: It
    will steal the layer's nonlinearity if there is one (effectively
    introducing the normalization right before the nonlinearity), remove
    the layer's bias if there is one (because it would be redundant), and add
    a :class:`BatchNormLayer` and :class:`NonlinearityLayer` on top.

    Parameters
    ----------
    layer : A :class:`Layer` instance
        The layer to apply the normalization to; note that it will be
        irreversibly modified as specified above
    **kwargs
        Any additional keyword arguments are passed on to the
        :class:`BatchNormLayer` constructor.

    Returns
    -------
    BatchNormLayer or NonlinearityLayer instance
        A batch normalization layer stacked on the given modified `layer`, or
        a nonlinearity layer stacked on top of both if `layer` was nonlinear.

    Examples
    --------
    Just wrap any layer into a :func:`batch_norm` call on creating it:

    >>> from lasagne.layers import InputLayer, DenseLayer, batch_norm
    >>> from lasagne.nonlinearities import tanh
    >>> l1 = InputLayer((64, 768))
    >>> l2 = batch_norm(DenseLayer(l1, num_units=500, nonlinearity=tanh))

    This introduces batch normalization right before its nonlinearity:

    >>> from lasagne.layers import get_all_layers
    >>> [l.__class__.__name__ for l in get_all_layers(l2)]
    ['InputLayer', 'DenseLayer', 'BatchNormLayer', 'NonlinearityLayer']
    "
                :arguments 
                  ( ("layer" variable nil (reparse-symbol function_parameters) [11430 11435])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [11437 11445]))                  )
                nil [11415 13431]))          
      :file "lasagne_layers.py"
      :pointmax 13431
      :fsize 13436
      :lastmodtime '(22749 16759 0 0)
      :unmatched-syntax '((NAME 11153 . 11158) (IF 11163 . 11165) (ELSE 11185 . 11189) (NAME 11080 . 11084) (IF 11089 . 11091) (ELSE 11110 . 11114)))
    (semanticdb-table "network.py"
      :major-mode 'python-mode
      :tags 
        '( ("lasagne.layers" include nil nil [3 29])
            ("lasagne.nonlinearities" include nil nil [30 65])
            ("lasagne.init" include nil nil [66 91])
            ("theano.tensor" include nil nil [92 118])
            ("theano" include nil nil [119 132])
            ("rllab.misc" include nil nil [133 159])
            ("rllab.core.lasagne_layers" include nil nil [160 205])
            ("rllab.core.lasagne_powered" include nil nil [206 259])
            ("rllab.core.serializable" include nil nil [260 308])
            ("numpy" include nil nil [310 328])
            ("wrapped_conv" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [348 353])
                ("kwargs" variable nil (reparse-symbol function_parameters) [355 363]))              ) nil [331 934])
            ("MLP" type
               (:superclasses ("LasagnePowered" "Serializable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Serializable" code nil (reparse-symbol indented_block_body) [1340 1379])
                            ("if" code nil (reparse-symbol indented_block_body) [1389 1476])
                            ("if" code nil (reparse-symbol indented_block_body) [1485 1636])
                            ("self" variable nil (reparse-symbol indented_block_body) [1644 1665])
                            ("l_hid" variable nil (reparse-symbol indented_block_body) [1674 1686])
                            ("for" code nil (reparse-symbol indented_block_body) [1695 2132])
                            ("l_out" variable nil (reparse-symbol indented_block_body) [2141 2370])
                            ("self" code nil (reparse-symbol indented_block_body) [2379 2405])
                            ("self" variable nil (reparse-symbol indented_block_body) [2414 2431])
                            ("self" variable nil (reparse-symbol indented_block_body) [2440 2459])
                            ("self" variable nil (reparse-symbol indented_block_body) [2511 2545])
                            ("LasagnePowered" code nil (reparse-symbol indented_block_body) [2554 2592]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [994 998])
                            ("output_dim" variable nil (reparse-symbol function_parameters) [1000 1010])
                            ("hidden_sizes" variable nil (reparse-symbol function_parameters) [1012 1024])
                            ("hidden_nonlinearity" variable nil (reparse-symbol function_parameters) [1026 1045])
                            ("output_nonlinearity" variable nil (reparse-symbol function_parameters) [1064 1083])
                            ("hidden_W_init" variable nil (reparse-symbol function_parameters) [1085 1098])
                            ("hidden_b_init" variable nil (reparse-symbol function_parameters) [1119 1132])
                            ("output_W_init" variable nil (reparse-symbol function_parameters) [1167 1180])
                            ("output_b_init" variable nil (reparse-symbol function_parameters) [1201 1214])
                            ("name" variable nil (reparse-symbol function_parameters) [1249 1253])
                            ("input_var" variable nil (reparse-symbol function_parameters) [1260 1269])
                            ("input_layer" variable nil (reparse-symbol function_parameters) [1276 1287])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [1294 1305])
                            ("batch_norm" variable nil (reparse-symbol function_parameters) [1312 1322]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [981 2593])
                    ("input_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2628 2632]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2598 2661])
                    ("output_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2697 2701]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2666 2731])
                    ("layers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2843 2847]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2818 2878])
                    ("output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2908 2912]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2883 2943]))                  
                :type "class")
                nil [936 2943])
            ("GRULayer" type
               (:documentation "
    A gated recurrent unit implements the following update mechanism:
    Reset gate:        r(t) = f_r(x(t) @ W_xr + h(t-1) @ W_hr + b_r)
    Update gate:       u(t) = f_u(x(t) @ W_xu + h(t-1) @ W_hu + b_u)
    Cell gate:         c(t) = f_c(x(t) @ W_xc + r(t) * (h(t-1) @ W_hc) + b_c)
    New hidden state:  h(t) = (1 - u(t)) * h(t-1) + u_t * c(t)
    Note that the reset, update, and cell vectors must have the same dimension as the hidden state
    "
                :superclasses ("L.Layer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [3710 3788])
                            ("if" code nil (reparse-symbol indented_block_body) [3797 3871])
                            ("super" code nil (reparse-symbol indented_block_body) [3880 3931])
                            ("input_shape" variable nil (reparse-symbol indented_block_body) [3941 3975])
                            ("input_dim" variable nil (reparse-symbol indented_block_body) [3985 4031])
                            ("self" variable nil (reparse-symbol indented_block_body) [4115 4264])
                            ("self" variable nil (reparse-symbol indented_block_body) [4310 4381])
                            ("self" variable nil (reparse-symbol indented_block_body) [4390 4461])
                            ("self" variable nil (reparse-symbol indented_block_body) [4470 4550])
                            ("self" variable nil (reparse-symbol indented_block_body) [4597 4668])
                            ("self" variable nil (reparse-symbol indented_block_body) [4677 4748])
                            ("self" variable nil (reparse-symbol indented_block_body) [4757 4837])
                            ("self" variable nil (reparse-symbol indented_block_body) [4882 4953])
                            ("self" variable nil (reparse-symbol indented_block_body) [4962 5033])
                            ("self" variable nil (reparse-symbol indented_block_body) [5042 5122])
                            ("self" variable nil (reparse-symbol indented_block_body) [5131 5173])
                            ("self" variable nil (reparse-symbol indented_block_body) [5182 5208])
                            ("self" variable nil (reparse-symbol indented_block_body) [5217 5256]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3452 3456])
                            ("incoming" variable nil (reparse-symbol function_parameters) [3458 3466])
                            ("num_units" variable nil (reparse-symbol function_parameters) [3468 3477])
                            ("hidden_nonlinearity" variable nil (reparse-symbol function_parameters) [3479 3498])
                            ("gate_nonlinearity" variable nil (reparse-symbol function_parameters) [3517 3534])
                            ("name" variable nil (reparse-symbol function_parameters) [3547 3551])
                            ("W_init" variable nil (reparse-symbol function_parameters) [3575 3581])
                            ("b_init" variable nil (reparse-symbol function_parameters) [3602 3608])
                            ("hidden_init" variable nil (reparse-symbol function_parameters) [3643 3654])
                            ("hidden_init_trainable" variable nil (reparse-symbol function_parameters) [3672 3693]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3439 5257])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5271 5275])
                            ("x" variable nil (reparse-symbol function_parameters) [5277 5278])
                            ("hprev" variable nil (reparse-symbol function_parameters) [5280 5285]))                          )
                        (reparse-symbol indented_block_body) [5262 5632])
                    ("get_step_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5656 5660])
                            ("l_in" variable nil (reparse-symbol function_parameters) [5662 5666])
                            ("l_prev_hidden" variable nil (reparse-symbol function_parameters) [5668 5681]))                          )
                        (reparse-symbol indented_block_body) [5637 5761])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5791 5795])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [5797 5808]))                          )
                        (reparse-symbol indented_block_body) [5766 5902])
                    ("get_output_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5926 5930])
                            ("input" variable nil (reparse-symbol function_parameters) [5932 5937])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5939 5947]))                          )
                        (reparse-symbol indented_block_body) [5907 6404]))                  
                :type "class")
                nil [2945 6404])
            ("GRUStepLayer" type
               (:superclasses ("L.MergeLayer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [6505 6556])
                            ("self" variable nil (reparse-symbol indented_block_body) [6565 6592]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6457 6461])
                            ("incomings" variable nil (reparse-symbol function_parameters) [6463 6472])
                            ("gru_layer" variable nil (reparse-symbol function_parameters) [6474 6483])
                            ("name" variable nil (reparse-symbol function_parameters) [6485 6489]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6444 6593])
                    ("get_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6613 6617])
                            ("tags" variable nil (reparse-symbol function_parameters) [6619 6625]))                          )
                        (reparse-symbol indented_block_body) [6598 6678])
                    ("get_output_shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6708 6712])
                            ("input_shapes" variable nil (reparse-symbol function_parameters) [6714 6726]))                          )
                        (reparse-symbol indented_block_body) [6683 6813])
                    ("get_output_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6837 6841])
                            ("inputs" variable nil (reparse-symbol function_parameters) [6843 6849])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6851 6859]))                          )
                        (reparse-symbol indented_block_body) [6818 7000]))                  
                :type "class")
                nil [6406 7000])
            ("GRUNetwork" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7217 7387])
                            ("l_step_input" variable nil (reparse-symbol indented_block_body) [7395 7451])
                            ("l_step_prev_hidden" variable nil (reparse-symbol indented_block_body) [7460 7519])
                            ("l_gru" variable nil (reparse-symbol indented_block_body) [7528 7667])
                            ("l_gru_flat" variable nil (reparse-symbol indented_block_body) [7676 7756])
                            ("l_output_flat" variable nil (reparse-symbol indented_block_body) [7765 7908])
                            ("l_output" variable nil (reparse-symbol indented_block_body) [7917 8253])
                            ("l_step_hidden" variable nil (reparse-symbol indented_block_body) [8262 8332])
                            ("l_step_output" variable nil (reparse-symbol indented_block_body) [8341 8549])
                            ("self" variable nil (reparse-symbol indented_block_body) [8559 8576])
                            ("self" variable nil (reparse-symbol indented_block_body) [8585 8616])
                            ("self" variable nil (reparse-symbol indented_block_body) [8625 8644])
                            ("self" variable nil (reparse-symbol indented_block_body) [8653 8675])
                            ("self" variable nil (reparse-symbol indented_block_body) [8684 8717])
                            ("self" variable nil (reparse-symbol indented_block_body) [8726 8771])
                            ("self" variable nil (reparse-symbol indented_block_body) [8780 8815])
                            ("self" variable nil (reparse-symbol indented_block_body) [8824 8859]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7045 7049])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [7051 7062])
                            ("output_dim" variable nil (reparse-symbol function_parameters) [7064 7074])
                            ("hidden_dim" variable nil (reparse-symbol function_parameters) [7076 7086])
                            ("hidden_nonlinearity" variable nil (reparse-symbol function_parameters) [7088 7107])
                            ("output_nonlinearity" variable nil (reparse-symbol function_parameters) [7137 7156])
                            ("name" variable nil (reparse-symbol function_parameters) [7163 7167])
                            ("input_var" variable nil (reparse-symbol function_parameters) [7174 7183])
                            ("input_layer" variable nil (reparse-symbol function_parameters) [7190 7201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7032 8860])
                    ("input_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8895 8899]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8865 8928])
                    ("input_var" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8961 8965]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8933 9004])
                    ("output_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9040 9044]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9009 9074])
                    ("step_input_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9114 9118]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9079 9155])
                    ("step_prev_hidden_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9201 9205]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9160 9248])
                    ("step_hidden_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9289 9293]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9253 9331])
                    ("step_output_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9372 9376]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9336 9414])
                    ("hid_init_param" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9452 9456]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9419 9495]))                  
                :type "class")
                nil [7002 9495])
            ("ConvNetwork" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [10057 10144])
                            ("if" code nil (reparse-symbol indented_block_body) [10153 10675])
                            ("for" code nil (reparse-symbol indented_block_body) [10683 11282])
                            ("for" code nil (reparse-symbol indented_block_body) [11290 11617])
                            ("l_out" variable nil (reparse-symbol indented_block_body) [11625 11854])
                            ("self" variable nil (reparse-symbol indented_block_body) [11863 11880])
                            ("self" variable nil (reparse-symbol indented_block_body) [11889 11908])
                            ("self" variable nil (reparse-symbol indented_block_body) [11917 11949]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9541 9545])
                            ("input_shape" variable nil (reparse-symbol function_parameters) [9547 9558])
                            ("output_dim" variable nil (reparse-symbol function_parameters) [9560 9570])
                            ("hidden_sizes" variable nil (reparse-symbol function_parameters) [9572 9584])
                            ("conv_filters" variable nil (reparse-symbol function_parameters) [9603 9615])
                            ("conv_filter_sizes" variable nil (reparse-symbol function_parameters) [9617 9634])
                            ("conv_strides" variable nil (reparse-symbol function_parameters) [9636 9648])
                            ("conv_pads" variable nil (reparse-symbol function_parameters) [9650 9659])
                            ("hidden_W_init" variable nil (reparse-symbol function_parameters) [9678 9691])
                            ("hidden_b_init" variable nil (reparse-symbol function_parameters) [9712 9725])
                            ("output_W_init" variable nil (reparse-symbol function_parameters) [9760 9773])
                            ("output_b_init" variable nil (reparse-symbol function_parameters) [9794 9807])
                            ("hidden_nonlinearity" variable nil (reparse-symbol function_parameters) [9922 9941])
                            ("output_nonlinearity" variable nil (reparse-symbol function_parameters) [9971 9990])
                            ("name" variable nil (reparse-symbol function_parameters) [10020 10024])
                            ("input_var" variable nil (reparse-symbol function_parameters) [10031 10040]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9528 11950])
                    ("input_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11985 11989]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11955 12018])
                    ("output_layer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12054 12058]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12023 12088])
                    ("input_var" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12121 12125]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12093 12164]))                  
                :type "class")
                nil [9497 12164]))          
      :file "network.py"
      :pointmax 12164
      :fsize 12163
      :lastmodtime '(22749 16759 0 0)
      :unmatched-syntax '((INDENT_BLOCK 828 . 934) (NEWLINE 827 . 828) (COLON 826 . 827) (TRY 648 . 651) (AS 822 . 824))))
  :file "!Users!xiaoli!Dropbox!PHD_research!projects!RLFPS!rllab!rllab!core!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
