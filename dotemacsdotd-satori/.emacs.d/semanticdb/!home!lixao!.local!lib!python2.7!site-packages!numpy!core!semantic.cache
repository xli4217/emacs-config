;; Object core/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "core/"
  :tables
  (list
    (semanticdb-table "numerictypes.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
numerictypes: Define the numeric type objects

This module is designed so \"from numerictypes import \\\\*\" is safe.
Exported symbols include:

  Dictionary with all registered number types (including aliases):
    typeDict

  Type objects (not all will be available, depends on platform):
      see variable sctypes for which ones you have

    Bit-width names

    int8 int16 int32 int64 int128
    uint8 uint16 uint32 uint64 uint128
    float16 float32 float64 float96 float128 float256
    complex32 complex64 complex128 complex192 complex256 complex512
    datetime64 timedelta64

    c-based names

    bool_

    object_

    void, str_, unicode_

    byte, ubyte,
    short, ushort
    intc, uintc,
    intp, uintp,
    int_, uint,
    longlong, ulonglong,

    single, csingle,
    float_, complex_,
    longfloat, clongfloat,

   As part of the type-hierarchy:    xx -- is bit-width

   generic
     +-> bool_                                  (kind=b)
     +-> number                                 (kind=i)
     |     integer
     |     signedinteger   (intxx)
     |     byte
     |     short
     |     intc
     |     intp           int0
     |     int_
     |     longlong
     +-> unsignedinteger  (uintxx)              (kind=u)
     |     ubyte
     |     ushort
     |     uintc
     |     uintp          uint0
     |     uint_
     |     ulonglong
     +-> inexact
     |   +-> floating           (floatxx)       (kind=f)
     |   |     half
     |   |     single
     |   |     float_  (double)
     |   |     longfloat
     |   \\\\-> complexfloating    (complexxx)     (kind=c)
     |         csingle  (singlecomplex)
     |         complex_ (cfloat, cdouble)
     |         clongfloat (longcomplex)
     +-> flexible
     |     character
     |     void                                 (kind=V)
     |
     |     str_     (string_, bytes_)           (kind=S)    [Python 2]
     |     unicode_                             (kind=U)    [Python 2]
     |
     |     bytes_   (string_)                   (kind=S)    [Python 3]
     |     str_     (unicode_)                  (kind=U)    [Python 3]
     |
     \\\\-> object_ (not used much)                (kind=O)

\"\"\"" code nil nil [1 2186])
            ("__future__" include nil nil [2187 2251])
            ("types" include nil nil [2253 2275])
            ("sys" include nil nil [2276 2286])
            ("numbers" include nil nil [2287 2301])
            ("warnings" include nil nil [2302 2317])
            ("numpy.compat" include nil nil [2319 2355])
            ("" code nil nil [2390 2555])
            ("__all__" variable nil nil [2586 2953])
            ("if" code nil nil [3054 3247])
            ("_all_chars" variable nil nil [3422 3465])
            ("_ascii_upper" variable nil nil [3466 3501])
            ("_ascii_lower" variable nil nil [3502 3537])
            ("LOWER_TABLE" variable nil nil [3538 3612])
            ("UPPER_TABLE" variable nil nil [3613 3687])
            ("english_lower" function
               (:documentation " Apply English case rules to convert ASCII strings to all lower case.

    This is an internal utility function to replace calls to str.lower() such
    that we can avoid changing behavior with changing locales. In particular,
    Turkish has distinct dotted and dotless variants of the Latin letter \"I\" in
    both lowercase and uppercase. Thus, \"I\".lower() != \"i\" in a \"tr\" locale.

    Parameters
    ----------
    s : str

    Returns
    -------
    lowered : str

    Examples
    --------
    >>> from numpy.core.numerictypes import english_lower
    >>> english_lower('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_')
    'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789_'
    >>> english_lower('')
    ''
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3708 3709]))                  )
                nil [3690 4532])
            ("english_upper" function
               (:documentation " Apply English case rules to convert ASCII strings to all upper case.

    This is an internal utility function to replace calls to str.upper() such
    that we can avoid changing behavior with changing locales. In particular,
    Turkish has distinct dotted and dotless variants of the Latin letter \"I\" in
    both lowercase and uppercase. Thus, \"i\".upper() != \"I\" in a \"tr\" locale.

    Parameters
    ----------
    s : str

    Returns
    -------
    uppered : str

    Examples
    --------
    >>> from numpy.core.numerictypes import english_upper
    >>> english_upper('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_')
    'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'
    >>> english_upper('')
    ''
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4551 4552]))                  )
                nil [4533 5375])
            ("english_capitalize" function
               (:documentation " Apply English case rules to convert the first character of an ASCII
    string to upper case.

    This is an internal utility function to replace calls to str.capitalize()
    such that we can avoid changing behavior with changing locales.

    Parameters
    ----------
    s : str

    Returns
    -------
    capitalized : str

    Examples
    --------
    >>> from numpy.core.numerictypes import english_capitalize
    >>> english_capitalize('int8')
    'Int8'
    >>> english_capitalize('Int8')
    'Int8'
    >>> english_capitalize('')
    ''
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5399 5400]))                  )
                nil [5376 6050])
            ("sctypeDict" variable nil nil [6052 6067])
            ("sctypeNA" variable nil nil [6124 6137])
            ("allTypes" variable nil nil [6206 6219])
            ("_evalname" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [6291 6295]))              ) nil [6277 6512])
            ("bitname" function
               (:documentation "Return a bit-width name for a given type object"
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [6525 6528]))                  )
                nil [6513 7785])
            ("_add_types" function nil nil [7787 8272])
            ("_add_types" code nil nil [8272 8284])
            ("_add_aliases" function nil nil [8286 9601])
            ("_add_aliases" code nil nil [9601 9615])
            ("_add_integer_aliases" function nil nil [9875 11043])
            ("_add_integer_aliases" code nil nil [11043 11065])
            ("void" variable nil nil [11088 11111])
            ("generic" variable nil nil [11112 11141])
            ("_set_up_aliases" function nil nil [11271 13000])
            ("_set_up_aliases" code nil nil [13000 13017])
            ("_sctype2char_dict" variable nil nil [13084 13106])
            ("_construct_char_code_lookup" function nil nil [13107 13332])
            ("_construct_char_code_lookup" code nil nil [13332 13361])
            ("sctypes" variable nil nil [13364 13513])
            ("_add_array_type" function (:arguments 
              ( ("typename" variable nil (reparse-symbol function_parameters) [13535 13543])
                ("bits" variable nil (reparse-symbol function_parameters) [13545 13549]))              ) nil [13515 13689])
            ("_set_array_types" function nil nil [13690 14370])
            ("_set_array_types" code nil nil [14370 14388])
            ("genericTypeRank" variable nil nil [14391 14811])
            ("maximum_sctype" function
               (:documentation "
    Return the scalar type of highest precision of the same kind as the input.

    Parameters
    ----------
    t : dtype or dtype specifier
        The input data type. This can be a `dtype` object or an object that
        is convertible to a `dtype`.

    Returns
    -------
    out : dtype
        The highest precision data type of the same kind (`dtype.kind`) as `t`.

    See Also
    --------
    obj2sctype, mintypecode, sctype2char
    dtype

    Examples
    --------
    >>> np.maximum_sctype(int)
    <type 'numpy.int64'>
    >>> np.maximum_sctype(np.uint8)
    <type 'numpy.uint64'>
    >>> np.maximum_sctype(complex)
    <type 'numpy.complex192'>

    >>> np.maximum_sctype(str)
    <type 'numpy.string_'>

    >>> np.maximum_sctype('i2')
    <type 'numpy.int64'>
    >>> np.maximum_sctype('f4')
    <type 'numpy.float96'>

    "
                :arguments 
                  ( ("t" variable nil (reparse-symbol function_parameters) [14832 14833]))                  )
                nil [14813 15894])
            ("issctype" function
               (:documentation "
    Determines whether the given object represents a scalar data-type.

    Parameters
    ----------
    rep : any
        If `rep` is an instance of a scalar dtype, True is returned. If not,
        False is returned.

    Returns
    -------
    out : bool
        Boolean result of check whether `rep` is a scalar dtype.

    See Also
    --------
    issubsctype, issubdtype, obj2sctype, sctype2char

    Examples
    --------
    >>> np.issctype(np.int32)
    True
    >>> np.issctype(list)
    False
    >>> np.issctype(1.1)
    False

    Strings are also a scalar type:

    >>> np.issctype(np.dtype('str'))
    True

    "
                :arguments 
                  ( ("rep" variable nil (reparse-symbol function_parameters) [15909 15912]))                  )
                nil [15896 16784])
            ("obj2sctype" function
               (:documentation "
    Return the scalar dtype or NumPy equivalent of Python type of an object.

    Parameters
    ----------
    rep : any
        The object of which the type is returned.
    default : any, optional
        If given, this is returned for objects whose types can not be
        determined. If not given, None is returned for those objects.

    Returns
    -------
    dtype : dtype or Python type
        The data type of `rep`.

    See Also
    --------
    sctype2char, issctype, issubsctype, issubdtype, maximum_sctype

    Examples
    --------
    >>> np.obj2sctype(np.int32)
    <type 'numpy.int32'>
    >>> np.obj2sctype(np.array([1., 2.]))
    <type 'numpy.float64'>
    >>> np.obj2sctype(np.array([1.j]))
    <type 'numpy.complex128'>

    >>> np.obj2sctype(dict)
    <type 'numpy.object_'>
    >>> np.obj2sctype('string')
    <type 'numpy.string_'>

    >>> np.obj2sctype(1, default=list)
    <type 'list'>

    "
                :arguments 
                  ( ("rep" variable nil (reparse-symbol function_parameters) [16800 16803])
                    ("default" variable nil (reparse-symbol function_parameters) [16805 16812]))                  )
                nil [16785 18121])
            ("issubclass_" function
               (:documentation "
    Determine if a class is a subclass of a second class.

    `issubclass_` is equivalent to the Python built-in ``issubclass``,
    except that it returns False instead of raising a TypeError if one
    of the arguments is not a class.

    Parameters
    ----------
    arg1 : class
        Input class. True is returned if `arg1` is a subclass of `arg2`.
    arg2 : class or tuple of classes.
        Input class. If a tuple of classes, True is returned if `arg1` is a
        subclass of any of the tuple elements.

    Returns
    -------
    out : bool
        Whether `arg1` is a subclass of `arg2` or not.

    See Also
    --------
    issubsctype, issubdtype, issctype

    Examples
    --------
    >>> np.issubclass_(np.int32, int)
    True
    >>> np.issubclass_(np.int32, float)
    False

    "
                :arguments 
                  ( ("arg1" variable nil (reparse-symbol function_parameters) [18139 18143])
                    ("arg2" variable nil (reparse-symbol function_parameters) [18145 18149]))                  )
                nil [18123 19063])
            ("issubsctype" function
               (:documentation "
    Determine if the first argument is a subclass of the second argument.

    Parameters
    ----------
    arg1, arg2 : dtype or dtype specifier
        Data-types.

    Returns
    -------
    out : bool
        The result.

    See Also
    --------
    issctype, issubdtype,obj2sctype

    Examples
    --------
    >>> np.issubsctype('S8', str)
    True
    >>> np.issubsctype(np.array([1]), int)
    True
    >>> np.issubsctype(np.array([1]), float)
    False

    "
                :arguments 
                  ( ("arg1" variable nil (reparse-symbol function_parameters) [19080 19084])
                    ("arg2" variable nil (reparse-symbol function_parameters) [19086 19090]))                  )
                nil [19064 19635])
            ("issubdtype" function
               (:documentation "
    Returns True if first argument is a typecode lower/equal in type hierarchy.

    Parameters
    ----------
    arg1, arg2 : dtype_like
        dtype or string representing a typecode.

    Returns
    -------
    out : bool

    See Also
    --------
    issubsctype, issubclass_
    numpy.core.numerictypes : Overview of numpy type hierarchy.

    Examples
    --------
    >>> np.issubdtype('S1', np.string_)
    True
    >>> np.issubdtype(np.float64, np.float32)
    False

    "
                :arguments 
                  ( ("arg1" variable nil (reparse-symbol function_parameters) [19651 19655])
                    ("arg2" variable nil (reparse-symbol function_parameters) [19657 19661]))                  )
                nil [19636 21522])
            ("_typedict" type
               (:documentation "
    Base object for a dictionary for look-up with any alias for an array dtype.

    Instances of `_typedict` can not be used as dictionaries directly,
    first they have to be populated.

    "
                :superclasses ("dict")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21849 21853])
                            ("obj" variable nil (reparse-symbol function_parameters) [21855 21858]))                          )
                        (reparse-symbol indented_block_body) [21833 21916]))                  
                :type "class")
                nil [21599 21916])
            ("nbytes" variable nil nil [21917 21937])
            ("_alignment" variable nil nil [21938 21962])
            ("_maxvals" variable nil nil [21963 21985])
            ("_minvals" variable nil nil [21986 22008])
            ("_construct_lookups" function nil nil [22009 22400])
            ("_construct_lookups" code nil nil [22401 22421])
            ("sctype2char" function
               (:documentation "
    Return the string representation of a scalar dtype.

    Parameters
    ----------
    sctype : scalar dtype or object
        If a scalar dtype, the corresponding string character is
        returned. If an object, `sctype2char` tries to infer its scalar type
        and then return the corresponding string character.

    Returns
    -------
    typechar : str
        The string character corresponding to the scalar type.

    Raises
    ------
    ValueError
        If `sctype` is an object for which the type can not be inferred.

    See Also
    --------
    obj2sctype, issctype, issubsctype, mintypecode

    Examples
    --------
    >>> for sctype in [np.int32, float, complex, np.string_, np.ndarray]:
    ...     print(np.sctype2char(sctype))
    l
    d
    D
    S
    O

    >>> x = np.array([1., 2-1.j])
    >>> np.sctype2char(x)
    'D'
    >>> np.sctype2char(list)
    'O'

    "
                :arguments 
                  ( ("sctype" variable nil (reparse-symbol function_parameters) [22439 22445]))                  )
                nil [22423 23503])
            ("cast" variable nil nil [23603 23621])
            ("try" code nil nil [23622 23939])
            ("ScalarType" code nil nil [23940 23983])
            ("ScalarType" variable nil nil [23984 24014])
            ("for" code nil nil [24015 24116])
            ("_typestr" variable nil nil [24159 24181])
            ("for" code nil nil [24182 24377])
            ("for" code nil nil [24424 24518])
            ("if" code nil nil [24563 24900])
            ("for" code nil nil [24901 25051])
            ("del" code nil nil [25052 25068])
            ("for" code nil nil [25122 25202])
            ("del" code nil nil [25203 25210])
            ("typecodes" variable nil nil [25212 25531])
            ("typeDict" variable nil nil [25579 25600])
            ("typeNA" variable nil nil [25601 25618])
            ("_kind_list" variable nil nil [25822 25890])
            ("__test_types" code nil nil [25892 25965])
            ("__len_test_types" variable nil nil [25966 26002])
            ("_find_common_coerce" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [26128 26129])
                ("b" variable nil (reparse-symbol function_parameters) [26131 26132]))              ) nil [26104 26313])
            ("_can_coerce_all" function (:arguments 
              ( ("dtypelist" variable nil (reparse-symbol function_parameters) [26401 26410])
                ("start" variable nil (reparse-symbol function_parameters) [26412 26417]))              ) nil [26381 26786])
            ("_register_types" function nil nil [26787 26959])
            ("_register_types" code nil nil [26960 26977])
            ("find_common_type" function
               (:documentation "
    Determine common type following standard coercion rules.

    Parameters
    ----------
    array_types : sequence
        A list of dtypes or dtype convertible objects representing arrays.
    scalar_types : sequence
        A list of dtypes or dtype convertible objects representing scalars.

    Returns
    -------
    datatype : dtype
        The common data type, which is the maximum of `array_types` ignoring
        `scalar_types`, unless the maximum of `scalar_types` is of a
        different kind (`dtype.kind`). If the kind is not understood, then
        None is returned.

    See Also
    --------
    dtype, common_type, can_cast, mintypecode

    Examples
    --------
    >>> np.find_common_type([], [np.int64, np.float32, complex])
    dtype('complex128')
    >>> np.find_common_type([np.int64, np.float32], [])
    dtype('float64')

    The standard casting rules ensure that a scalar cannot up-cast an
    array unless the scalar is of a fundamentally different kind of data
    (i.e. under a different hierarchy in the data type hierarchy) then
    the array:

    >>> np.find_common_type([np.float32], [np.int64, np.float64])
    dtype('float32')

    Complex is of a different type, so it up-casts the float in the
    `array_types` argument:

    >>> np.find_common_type([np.float32], [complex])
    dtype('complex128')

    Type specifier strings are convertible to dtypes and can therefore
    be used instead of dtypes:

    >>> np.find_common_type(['f4', 'f4', 'i4'], ['c8'])
    dtype('complex128')

    "
                :arguments 
                  ( ("array_types" variable nil (reparse-symbol function_parameters) [27000 27011])
                    ("scalar_types" variable nil (reparse-symbol function_parameters) [27013 27025]))                  )
                nil [26979 29103]))          
      :file "numerictypes.py"
      :pointmax 29103
      :fsize 29102
      :lastmodtime '(23154 21084 737053 0)
      :unmatched-syntax '((NAME 20596 . 20600) (IF 20610 . 20612) (ELSE 20626 . 20630))))
  :file "!home!lixao!.local!lib!python2.7!site-packages!numpy!core!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
